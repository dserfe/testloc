{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..0c5abf5 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,10 +29,11 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n-    if sample_weight is not None:\n-        estimator.fit(X, y, sample_weight=sample_weight)\n-    else:\n-        estimator.fit(X, y)\n+    if estimator is not None:\n+        if sample_weight is not None:\n+            estimator.fit(X, y, sample_weight=sample_weight)\n+        else:\n+            estimator.fit(X, y)\n     return estimator\n \n \n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..1c042dc 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -10,10 +10,11 @@ from ..utils.validation import has_fit_parameter, check_is_fitted\n from ..utils.metaestimators import _BaseComposition\n from ..utils import Bunch\n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n-    if sample_weight is not None:\n-        estimator.fit(X, y, sample_weight=sample_weight)\n-    else:\n-        estimator.fit(X, y)\n+    if estimator is not None:\n+        if sample_weight is not None:\n+            estimator.fit(X, y, sample_weight=sample_weight)\n+        else:\n+            estimator.fit(X, y)\n     return estimator\n class _BaseVoting(_BaseComposition, TransformerMixin):\n     _required_parameters = ['estimators']\n", "normalized_occurrence": 2}
