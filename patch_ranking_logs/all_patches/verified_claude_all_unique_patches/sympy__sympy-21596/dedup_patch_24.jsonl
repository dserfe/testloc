{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..cd0c62b 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,6 +1389,21 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        # First check basic containment in all sets\n+        if not all(fuzzy_bool(set.contains(other)) for set in self.args):\n+            return False\n+        \n+        # Special handling for Reals intersection\n+        from sympy import Reals, im\n+        if any(s == Reals for s in self.args):\n+            # If intersecting with Reals, imaginary part must be zero\n+            try:\n+                imag_part = im(other)\n+                if imag_part != 0:\n+                    return False\n+            except:\n+                pass\n+        \n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..11edd46 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,6 +530,16 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n+        if not all((fuzzy_bool(set.contains(other)) for set in self.args)):\n+            return False\n+        from sympy import Reals, im\n+        if any((s == Reals for s in self.args)):\n+            try:\n+                imag_part = im(other)\n+                if imag_part != 0:\n+                    return False\n+            except:\n+                pass\n         return And(*[set.contains(other) for set in self.args])\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "normalized_occurrence": 1}
