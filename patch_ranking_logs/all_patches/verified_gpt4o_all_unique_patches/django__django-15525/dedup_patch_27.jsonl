{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 07a02ab..7dfac72 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -172,6 +172,13 @@ def Deserializer(\n                     )\n \n         obj = base.build_instance(Model, data, using)\n+        # Ensure the related objects are saved first when using natural keys\n+        if deferred_fields:\n+            for field, field_value in deferred_fields.items():\n+                if isinstance(field.remote_field, models.ManyToOneRel):\n+                    related_model = field.remote_field.model\n+                    natural_key = related_model.objects.db_manager(using).get_by_natural_key(*field_value)\n+                    setattr(obj, field.attname, natural_key.pk)\n         yield base.DeserializedObject(obj, m2m_data, deferred_fields)\n \n \n@@ -182,4 +189,4 @@ def _get_model(model_identifier):\n     except (LookupError, TypeError):\n         raise base.DeserializationError(\n             \"Invalid model identifier: '%s'\" % model_identifier\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex e208b62..ff42346 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -97,6 +97,12 @@ def Deserializer(object_list, *, using=DEFAULT_DB_ALIAS, ignorenonexistent=False\n                 except Exception as e:\n                     raise base.DeserializationError.WithData(e, d['model'], d.get('pk'), field_value)\n         obj = base.build_instance(Model, data, using)\n+        if deferred_fields:\n+            for field, field_value in deferred_fields.items():\n+                if isinstance(field.remote_field, models.ManyToOneRel):\n+                    related_model = field.remote_field.model\n+                    natural_key = related_model.objects.db_manager(using).get_by_natural_key(*field_value)\n+                    setattr(obj, field.attname, natural_key.pk)\n         yield base.DeserializedObject(obj, m2m_data, deferred_fields)\n def _get_model(model_identifier):\n     try:\n", "normalized_occurrence": 1}
