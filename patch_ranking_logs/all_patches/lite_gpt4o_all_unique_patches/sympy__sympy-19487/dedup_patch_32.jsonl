{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19487", "model_patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 6852819..e471c9d 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -645,6 +645,10 @@ class MinMaxBase(Expr, LatticeOp):\n \n     def _eval_rewrite_as_Abs(self, *args, **kwargs):\n         from sympy.functions.elementary.complexes import Abs\n+        from sympy import Piecewise\n+        if isinstance(self, sign):\n+            arg = self.args[0]\n+            return Piecewise((arg / Abs(arg), arg != 0), (0, True))\n         s = (args[0] + self.func(*args[1:]))/2\n         d = abs(args[0] - self.func(*args[1:]))/2\n         return (s + d if isinstance(self, Max) else s - d).rewrite(Abs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex b26bc6b..f546cb2 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -232,6 +232,10 @@ class MinMaxBase(Expr, LatticeOp):\n         return Add(*l)\n     def _eval_rewrite_as_Abs(self, *args, **kwargs):\n         from sympy.functions.elementary.complexes import Abs\n+        from sympy import Piecewise\n+        if isinstance(self, sign):\n+            arg = self.args[0]\n+            return Piecewise((arg / Abs(arg), arg != 0), (0, True))\n         s = (args[0] + self.func(*args[1:])) / 2\n         d = abs(args[0] - self.func(*args[1:])) / 2\n         return (s + d if isinstance(self, Max) else s - d).rewrite(Abs)\n", "normalized_occurrence": 1}
