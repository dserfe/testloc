{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..f4c5552 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -90,32 +90,31 @@ def apart(f, x=None, full=False, **options):\n             nc = f.func(*nc)\n             if c:\n                 c = apart(f.func._from_args(c), x=x, full=full, **_options)\n-                return c*nc\n+                return c * nc\n             else:\n-                return nc\n+                return apart(nc, x=x, full=full, **_options)\n         elif f.is_Add:\n-            c = []\n-            nc = []\n-            for i in f.args:\n-                if i.is_commutative:\n-                    c.append(i)\n+            c_part, nc_part = [], []\n+            for arg in f.args:\n+                if arg.is_commutative:\n+                    c_part.append(arg)\n                 else:\n                     try:\n-                        nc.append(apart(i, x=x, full=full, **_options))\n+                        nc_part.append(apart(arg, x=x, full=full, **_options))\n                     except NotImplementedError:\n-                        nc.append(i)\n-            return apart(f.func(*c), x=x, full=full, **_options) + f.func(*nc)\n+                        nc_part.append(arg)\n+            return apart(Add(*c_part), x=x, full=full, **_options) + Add(*nc_part)\n         else:\n-            reps = []\n-            pot = preorder_traversal(f)\n-            next(pot)\n-            for e in pot:\n+            replacements = []\n+            traversal = preorder_traversal(f)\n+            next(traversal)\n+            for expr in traversal:\n                 try:\n-                    reps.append((e, apart(e, x=x, full=full, **_options)))\n-                    pot.skip()  # this was handled successfully\n+                    replacements.append((expr, apart(expr, x=x, full=full, **_options)))\n+                    traversal.skip()  # this was handled successfully\n                 except NotImplementedError:\n                     pass\n-            return f.xreplace(dict(reps))\n+            return f.xreplace(dict(replacements))\n \n     if P.is_multivariate:\n         fc = f.cancel()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..47621de 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -30,30 +30,29 @@ def apart(f, x=None, full=False, **options):\n                 c = apart(f.func._from_args(c), x=x, full=full, **_options)\n                 return c * nc\n             else:\n-                return nc\n+                return apart(nc, x=x, full=full, **_options)\n         elif f.is_Add:\n-            c = []\n-            nc = []\n-            for i in f.args:\n-                if i.is_commutative:\n-                    c.append(i)\n+            c_part, nc_part = ([], [])\n+            for arg in f.args:\n+                if arg.is_commutative:\n+                    c_part.append(arg)\n                 else:\n                     try:\n-                        nc.append(apart(i, x=x, full=full, **_options))\n+                        nc_part.append(apart(arg, x=x, full=full, **_options))\n                     except NotImplementedError:\n-                        nc.append(i)\n-            return apart(f.func(*c), x=x, full=full, **_options) + f.func(*nc)\n+                        nc_part.append(arg)\n+            return apart(Add(*c_part), x=x, full=full, **_options) + Add(*nc_part)\n         else:\n-            reps = []\n-            pot = preorder_traversal(f)\n-            next(pot)\n-            for e in pot:\n+            replacements = []\n+            traversal = preorder_traversal(f)\n+            next(traversal)\n+            for expr in traversal:\n                 try:\n-                    reps.append((e, apart(e, x=x, full=full, **_options)))\n-                    pot.skip()\n+                    replacements.append((expr, apart(expr, x=x, full=full, **_options)))\n+                    traversal.skip()\n                 except NotImplementedError:\n                     pass\n-            return f.xreplace(dict(reps))\n+            return f.xreplace(dict(replacements))\n     if P.is_multivariate:\n         fc = f.cancel()\n         if fc != f:\n", "normalized_occurrence": 1}
