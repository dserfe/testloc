{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..421711e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1157,9 +1157,20 @@ class PythonDomain(Domain):\n                     else:\n                         # \"fuzzy\" searching mode\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        # For attributes, only match within the same class/module context\n+                        if type == 'attr':\n+                            if modname and classname:\n+                                context = modname + '.' + classname + '.'\n+                                matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                         if oname.endswith(searchname) and\n+                                         oname.startswith(context) and\n+                                         self.objects[oname].objtype in objtypes]\n+                            else:\n+                                matches = []\n+                        else:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..81333c8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -684,7 +684,14 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        if type == 'attr':\n+                            if modname and classname:\n+                                context = modname + '.' + classname + '.'\n+                                matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and oname.startswith(context) and (self.objects[oname].objtype in objtypes)]\n+                            else:\n+                                matches = []\n+                        else:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
