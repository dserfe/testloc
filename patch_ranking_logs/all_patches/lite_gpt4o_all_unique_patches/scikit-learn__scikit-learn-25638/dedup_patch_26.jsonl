{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..9b92236 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -82,7 +82,7 @@ def unique_labels(*ys):\n     if ys_types == {\"binary\", \"multiclass\"}:\n         ys_types = {\"multiclass\"}\n \n-    if len(ys_types) > 1:\n+    if len(ys_types) > 1 and not (ys_types <= {\"binary\", \"unknown\"}):\n         raise ValueError(\"Mix type of y not allowed, got types %s\" % ys_types)\n \n     label_type = ys_types.pop()\n@@ -113,7 +113,7 @@ def unique_labels(*ys):\n \n     ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n     # Check that we don't mix string type with number type\n-    if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n+    if len(set(isinstance(label, str) or label is pd.NA for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n \n     return xp.asarray(sorted(ys_labels))\n@@ -280,6 +280,8 @@ def type_of_target(y, input_name=\"\"):\n     'multilabel-indicator'\n     \"\"\"\n     xp, is_array_api = get_namespace(y)\n+    if hasattr(y, \"dtype\") and y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"]:\n+        y = y.astype(object)\n     valid = (\n         (isinstance(y, Sequence) or issparse(y) or hasattr(y, \"__array__\"))\n         and not isinstance(y, str)\n@@ -351,7 +353,7 @@ def type_of_target(y, input_name=\"\"):\n         suffix = \"\"  # [1, 2, 3] or [[1], [2], [3]]\n \n     # Check float and contains non-integer float values\n-    if y.dtype.kind == \"f\":\n+    if y.dtype.kind in {\"f\", \"O\"}:\n         # [.1, .2, 3] or [[.1, .2, 3]] or [[1., .2]] and not [1., 2., 3.]\n         data = y.data if issparse(y) else y\n         if xp.any(data != data.astype(int)):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..4d0aa52 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -23,7 +23,7 @@ def unique_labels(*ys):\n     ys_types = set((type_of_target(x) for x in ys))\n     if ys_types == {'binary', 'multiclass'}:\n         ys_types = {'multiclass'}\n-    if len(ys_types) > 1:\n+    if len(ys_types) > 1 and (not ys_types <= {'binary', 'unknown'}):\n         raise ValueError('Mix type of y not allowed, got types %s' % ys_types)\n     label_type = ys_types.pop()\n     if label_type == 'multilabel-indicator' and len(set((check_array(y, accept_sparse=['csr', 'csc', 'coo']).shape[1] for y in ys))) > 1:\n@@ -35,7 +35,7 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n     ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y)) for y in ys)))\n-    if len(set((isinstance(label, str) for label in ys_labels))) > 1:\n+    if len(set((isinstance(label, str) or label is pd.NA for label in ys_labels))) > 1:\n         raise ValueError('Mix of label input types (string and number)')\n     return xp.asarray(sorted(ys_labels))\n def _is_integral_float(y):\n@@ -65,6 +65,8 @@ def check_classification_targets(y):\n         raise ValueError('Unknown label type: %r' % y_type)\n def type_of_target(y, input_name=''):\n     xp, is_array_api = get_namespace(y)\n+    if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean']:\n+        y = y.astype(object)\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n@@ -97,7 +99,7 @@ def type_of_target(y, input_name=''):\n         suffix = '-multioutput'\n     else:\n         suffix = ''\n-    if y.dtype.kind == 'f':\n+    if y.dtype.kind in {'f', 'O'}:\n         data = y.data if issparse(y) else y\n         if xp.any(data != data.astype(int)):\n             _assert_all_finite(data, input_name=input_name)\n", "normalized_occurrence": 1}
