{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..51ecdbc 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -89,7 +89,8 @@ class SQLCompiler:\n \n         # The query.group_by is either None (no GROUP BY at all), True\n         # (group by select fields), or a list of expressions to be added\n-        # to the group by.\n+        # to the group by. \n+        # When doing subqueries, ensure to group by the correct columns.\n         if self.query.group_by is None:\n             return []\n         expressions = []\n@@ -107,10 +108,16 @@ class SQLCompiler:\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n+        subquery = self.query.subquery\n+        if subquery:\n+            group_by_subquery = subquery.get_group_by_cols()\n+            for col in group_by_subquery:\n                 expressions.append(col)\n+        else:\n+            for expr, _, _ in select:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..bf2c3d7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,10 +45,16 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n+        subquery = self.query.subquery\n+        if subquery:\n+            group_by_subquery = subquery.get_group_by_cols()\n+            for col in group_by_subquery:\n                 expressions.append(col)\n+        else:\n+            for expr, _, _ in select:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             if not expr.contains_aggregate and (not is_ref):\n                 expressions.extend(expr.get_source_expressions())\n", "normalized_occurrence": 1}
