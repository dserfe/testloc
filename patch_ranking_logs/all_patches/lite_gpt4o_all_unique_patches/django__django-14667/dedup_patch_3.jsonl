{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..32db058 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,7 +1221,18 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            existing, defer = clone.query.deferred_loading\n+            if defer:\n+                # Add to existing deferred names.\n+                clone.query.deferred_loading = existing.union(fields), True\n+            else:\n+                # Remove names from the set of any existing \"immediate load\" names.\n+                clone.query.deferred_loading = existing.difference(fields), False\n+\n+            # Handle case where only() has been called\n+            immediate_loading = set(clone.query.immediate_loading_fields)\n+            if immediate_loading:\n+                clone.query.deferred_loading = clone.query.deferred_loading[0].difference(immediate_loading), clone.query.deferred_loading[1]\n         return clone\n \n     def only(self, *fields):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..7ea06c0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -741,7 +741,14 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            existing, defer = clone.query.deferred_loading\n+            if defer:\n+                clone.query.deferred_loading = (existing.union(fields), True)\n+            else:\n+                clone.query.deferred_loading = (existing.difference(fields), False)\n+            immediate_loading = set(clone.query.immediate_loading_fields)\n+            if immediate_loading:\n+                clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(immediate_loading), clone.query.deferred_loading[1])\n         return clone\n     def only(self, *fields):\n         self._not_support_combined_queries('only')\n", "normalized_occurrence": 1}
