{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 7b0ad01..144ab5f 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -160,6 +160,21 @@ class DenseMatrix(MatrixBase):\n         return self._new(len(rowsList), len(colsList),\n                          list(mat[i] for i in indices), copy=False)\n \n+    def hstack(*args):\n+        from sympy.matrices import Matrix, zeros\n+        rows = max(a.rows for a in args)\n+        cols = sum(a.cols for a in args)\n+        if rows == 0:\n+            return zeros(0, cols)\n+        if cols == 0:\n+            return zeros(rows, 0)\n+        new_mat = zeros(rows, cols)\n+        col = 0\n+        for a in args:\n+            new_mat[:, col:col + a.cols] = a\n+            col += a.cols\n+        return new_mat\n+    \n     def _eval_matrix_mul(self, other):\n         from sympy import Add\n         # cache attributes for faster access\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n+    def hstack(*args):\n+        from sympy.matrices import Matrix, zeros\n+        rows = max((a.rows for a in args))\n+        cols = sum((a.cols for a in args))\n+        if rows == 0:\n+            return zeros(0, cols)\n+        if cols == 0:\n+            return zeros(rows, 0)\n+        new_mat = zeros(rows, cols)\n+        col = 0\n+        for a in args:\n+            new_mat[:, col:col + a.cols] = a\n+            col += a.cols\n+        return new_mat", "normalized_occurrence": 1}
