{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23987", "model_patch": "diff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 2a777f2..213e0e1 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -181,7 +181,7 @@ class TightLayoutEngine(LayoutEngine):\n                 fig, fig.axes, subplotspec_list, renderer,\n                 pad=info['pad'], h_pad=info['h_pad'], w_pad=info['w_pad'],\n                 rect=info['rect'])\n-        if kwargs:\n+        if kwargs and self._adjust_compatible:\n             fig.subplots_adjust(**kwargs)\n \n     def set(self, *, pad=None, w_pad=None, h_pad=None, rect=None):\n@@ -229,7 +229,8 @@ class ConstrainedLayoutEngine(LayoutEngine):\n         \"\"\"\n         super().__init__(**kwargs)\n         # set the defaults:\n-        self.set(w_pad=mpl.rcParams['figure.constrained_layout.w_pad'],\n+        if constrained_layout:\n+            self.set(w_pad=mpl.rcParams['figure.constrained_layout.w_pad'],\n                  h_pad=mpl.rcParams['figure.constrained_layout.h_pad'],\n                  wspace=mpl.rcParams['figure.constrained_layout.wspace'],\n                  hspace=mpl.rcParams['figure.constrained_layout.hspace'],\n@@ -283,4 +284,4 @@ class ConstrainedLayoutEngine(LayoutEngine):\n         \"\"\"\n         for td in self.set.__kwdefaults__:\n             if locals()[td] is not None:\n-                self._params[td] = locals()[td]\n+                self._params[td] = locals()[td]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/layout_engine.py b/lib/matplotlib/layout_engine.py\nindex 2879487..39799eb 100644\n--- a/lib/matplotlib/layout_engine.py\n+++ b/lib/matplotlib/layout_engine.py\n@@ -48,7 +48,7 @@ class TightLayoutEngine(LayoutEngine):\n         renderer = fig._get_renderer()\n         with getattr(renderer, '_draw_disabled', nullcontext)():\n             kwargs = get_tight_layout_figure(fig, fig.axes, subplotspec_list, renderer, pad=info['pad'], h_pad=info['h_pad'], w_pad=info['w_pad'], rect=info['rect'])\n-        if kwargs:\n+        if kwargs and self._adjust_compatible:\n             fig.subplots_adjust(**kwargs)\n     def set(self, *, pad=None, w_pad=None, h_pad=None, rect=None):\n         for td in self.set.__kwdefaults__:\n@@ -59,7 +59,8 @@ class ConstrainedLayoutEngine(LayoutEngine):\n     _colorbar_gridspec = False\n     def __init__(self, *, h_pad=None, w_pad=None, hspace=None, wspace=None, rect=(0, 0, 1, 1), compress=False, **kwargs):\n         super().__init__(**kwargs)\n-        self.set(w_pad=mpl.rcParams['figure.constrained_layout.w_pad'], h_pad=mpl.rcParams['figure.constrained_layout.h_pad'], wspace=mpl.rcParams['figure.constrained_layout.wspace'], hspace=mpl.rcParams['figure.constrained_layout.hspace'], rect=(0, 0, 1, 1))\n+        if constrained_layout:\n+            self.set(w_pad=mpl.rcParams['figure.constrained_layout.w_pad'], h_pad=mpl.rcParams['figure.constrained_layout.h_pad'], wspace=mpl.rcParams['figure.constrained_layout.wspace'], hspace=mpl.rcParams['figure.constrained_layout.hspace'], rect=(0, 0, 1, 1))\n         self.set(w_pad=w_pad, h_pad=h_pad, wspace=wspace, hspace=hspace, rect=rect)\n         self._compress = compress\n     def execute(self, fig):\n", "normalized_occurrence": 1}
