{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..cc9e929 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -522,48 +522,18 @@ class Add(Expr, AssocOp):\n             elif (S.ImaginaryUnit*a).is_real:\n                 im_I.append(a*S.ImaginaryUnit)\n             else:\n-                return\n+                return None\n         b = self.func(*nz)\n         if b.is_zero:\n-            return fuzzy_not(self.func(*im_I).is_zero)\n+            res = self.func(*im_I).is_zero\n+            if res is not None:\n+                return fuzzy_not(res)\n+            return None\n         elif b.is_zero is False:\n             return False\n+        return None\n+\n \n-    def _eval_is_zero(self):\n-        if self.is_commutative is False:\n-            # issue 10528: there is no way to know if a nc symbol\n-            # is zero or not\n-            return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n-        for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n-            else:\n-                return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n-            return False\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..a1d5f2d 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -279,45 +279,16 @@ class Add(Expr, AssocOp):\n             elif (S.ImaginaryUnit * a).is_real:\n                 im_I.append(a * S.ImaginaryUnit)\n             else:\n-                return\n+                return None\n         b = self.func(*nz)\n         if b.is_zero:\n-            return fuzzy_not(self.func(*im_I).is_zero)\n-        elif b.is_zero is False:\n-            return False\n-    def _eval_is_zero(self):\n-        if self.is_commutative is False:\n-            return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n-        for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n-            else:\n-                return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n+            res = self.func(*im_I).is_zero\n+            if res is not None:\n+                return fuzzy_not(res)\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n-        if b.is_zero is False:\n+        elif b.is_zero is False:\n             return False\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
