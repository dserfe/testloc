{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..057ce1a 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -176,10 +176,14 @@ class UnitSystem(_QuantityMapper):\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n                 if dim != addend_dim:\n-                    raise ValueError(\n-                        'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n-                            addend, addend_dim, dim))\n+                    # Check if the dimensions are equivalent\n+                    if self.get_dimension_system().equivalent_dims(dim, addend_dim):\n+                        dim = self.get_dimension_system().get_dim(dim)\n+                    else:\n+                        raise ValueError(\n+                            'Dimension of \"{}\" is {}, '\n+                            'but it should be {}'.format(\n+                                addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n         elif isinstance(expr, Derivative):\n@@ -202,4 +206,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 212532e..f8bf2b8 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -105,7 +105,10 @@ class UnitSystem(_QuantityMapper):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n                 if dim != addend_dim:\n-                    raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n+                    if self.get_dimension_system().equivalent_dims(dim, addend_dim):\n+                        dim = self.get_dimension_system().get_dim(dim)\n+                    else:\n+                        raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n                 factor += addend_factor\n             return (factor, dim)\n         elif isinstance(expr, Derivative):\n", "normalized_occurrence": 1}
