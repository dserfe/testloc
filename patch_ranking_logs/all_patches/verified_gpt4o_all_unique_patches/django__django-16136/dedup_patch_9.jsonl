{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 940d12d..d90fe46 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -200,6 +200,9 @@ class BaseHandler:\n                 if response is None:\n                     raise\n \n+        if asyncio.iscoroutine(response):\n+            response = await response\n+\n         # Complain if the view returned None (a common error).\n         self.check_response(response, callback)\n \n@@ -217,7 +220,10 @@ class BaseHandler:\n                     % (middleware_method.__self__.__class__.__name__,),\n                 )\n             try:\n-                response = response.render()\n+                if asyncio.iscoroutine(response.render):\n+                    response = await response.render()\n+                else:\n+                    response = response.render()\n             except Exception as e:\n                 response = self.process_exception_by_middleware(e, request)\n                 if response is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 5df17b3..957811a 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -103,13 +103,18 @@ class BaseHandler:\n                 response = self.process_exception_by_middleware(e, request)\n                 if response is None:\n                     raise\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         self.check_response(response, callback)\n         if hasattr(response, 'render') and callable(response.render):\n             for middleware_method in self._template_response_middleware:\n                 response = middleware_method(request, response)\n                 self.check_response(response, middleware_method, name='%s.process_template_response' % (middleware_method.__self__.__class__.__name__,))\n             try:\n-                response = response.render()\n+                if asyncio.iscoroutine(response.render):\n+                    response = await response.render()\n+                else:\n+                    response = response.render()\n             except Exception as e:\n                 response = self.process_exception_by_middleware(e, request)\n                 if response is None:\n", "normalized_occurrence": 1}
