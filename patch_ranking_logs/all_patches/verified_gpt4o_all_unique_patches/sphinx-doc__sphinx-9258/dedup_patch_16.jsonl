{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..a9d18c4 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -161,7 +161,9 @@ def augment_descriptions_with_types(\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            # Handle union types separated by '|'\n+            union_types = annotations[name].replace('typing.', '').replace('Union[', '').replace(']', '').replace(', ', ' | ')\n+            field += nodes.field_body('', nodes.paragraph('', union_types))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n@@ -169,7 +171,9 @@ def augment_descriptions_with_types(\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            # Handle union types separated by '|'\n+            union_return_type = annotations['return'].replace('typing.', '').replace('Union[', '').replace(']', '').replace(', ', ' | ')\n+            field += nodes.field_body('', nodes.paragraph('', union_return_type))\n             node += field\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..c4ff604 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -119,13 +119,15 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            union_types = annotations[name].replace('typing.', '').replace('Union[', '').replace(']', '').replace(', ', ' | ')\n+            field += nodes.field_body('', nodes.paragraph('', union_types))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            union_return_type = annotations['return'].replace('typing.', '').replace('Union[', '').replace(']', '').replace(', ', ' | ')\n+            field += nodes.field_body('', nodes.paragraph('', union_return_type))\n             node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n", "normalized_occurrence": 1}
