{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..283d13d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,7 +78,7 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment = None, modname: str = None, classname: str = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n@@ -86,8 +86,9 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n         reftype = 'class'\n \n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n-                  'py:class': env.ref_context.get('py:class')}\n+        modname = modname or env.ref_context.get('py:module')\n+        classname = classname or env.ref_context.get('py:class')\n+        kwargs = {'py:module': modname, 'py:class': classname}\n     else:\n         kwargs = {}\n \n@@ -95,7 +96,7 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n-def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment = None, modname: str = None, classname: str = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -159,13 +160,13 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         result = unparse(tree)\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                result[i] = type_to_xref(str(node), env, modname, classname)\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n \n \n-def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:\n+def _parse_arglist(arglist: str, env: BuildEnvironment = None, modname: str = None, classname: str = None) -> addnodes.desc_parameterlist:\n     \"\"\"Parse a list of arguments using AST parser\"\"\"\n     params = addnodes.desc_parameterlist(arglist)\n     sig = signature_from_str('(%s)' % arglist)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..ad5b2d2 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -34,17 +34,19 @@ py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n-def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment=None, modname: str=None, classname: str=None) -> addnodes.pending_xref:\n     if text == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n+        modname = modname or env.ref_context.get('py:module')\n+        classname = classname or env.ref_context.get('py:class')\n+        kwargs = {'py:module': modname, 'py:class': classname}\n     else:\n         kwargs = {}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n-def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment=None, modname: str=None, classname: str=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n@@ -100,11 +102,11 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n         result = unparse(tree)\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                result[i] = type_to_xref(str(node), env, modname, classname)\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n-def _parse_arglist(arglist: str, env: BuildEnvironment=None) -> addnodes.desc_parameterlist:\n+def _parse_arglist(arglist: str, env: BuildEnvironment=None, modname: str=None, classname: str=None) -> addnodes.desc_parameterlist:\n     params = addnodes.desc_parameterlist(arglist)\n     sig = signature_from_str('(%s)' % arglist)\n     last_kind = None\n", "normalized_occurrence": 1}
