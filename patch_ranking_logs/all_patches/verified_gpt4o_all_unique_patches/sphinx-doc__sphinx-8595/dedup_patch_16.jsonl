{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..790c6dc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1073,17 +1073,14 @@ class ModuleDocumenter(Documenter):\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n-        if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-\n-                return False, list(members.values())\n+        if want_all and self.__all__ is not None:\n+            for member in members.values():\n+                if member.__name__ not in self.__all__:\n+                    member.skipped = True\n+\n+            return False, list(members.values())\n+        elif want_all:\n+            return True, []\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..4e0ab7c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -574,14 +574,13 @@ class ModuleDocumenter(Documenter):\n         return members\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n-        if want_all:\n-            if not self.__all__:\n-                return (True, list(members.values()))\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-                return (False, list(members.values()))\n+        if want_all and self.__all__ is not None:\n+            for member in members.values():\n+                if member.__name__ not in self.__all__:\n+                    member.skipped = True\n+            return (False, list(members.values()))\n+        elif want_all:\n+            return (True, [])\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "normalized_occurrence": 1}
