{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..01d8aa2 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -255,6 +255,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs[\"wcs\"] = deepcopy(self.wcs)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs[\"wcs\"] = self._arithmetic_wcs(\n                 operation, operand, compare_wcs, **kwds2[\"wcs\"]\n             )\n@@ -285,6 +289,10 @@ class NDArithmeticMixin:\n                     result, mask=np.zeros_like(result, dtype=bool)\n                 )\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             # Then calculate the resulting data (which can but needs not be a\n             # quantity)\n             result = self._arithmetic_data(\n@@ -304,6 +312,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs[\"uncertainty\"] = deepcopy(self.uncertainty)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs[\"uncertainty\"] = self._arithmetic_uncertainty(\n                 operation,\n                 operand,\n@@ -332,6 +344,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs[\"mask\"] = deepcopy(self.mask)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs[\"mask\"] = self._arithmetic_mask(\n                 operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n             )\n@@ -344,6 +360,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs[\"meta\"] = deepcopy(self.meta)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs[\"meta\"] = self._arithmetic_meta(\n                 operation, operand, handle_meta, **kwds2[\"meta\"]\n             )\n@@ -474,6 +494,10 @@ class NDArithmeticMixin:\n             return result_uncert\n \n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             # Both have uncertainties so just propagate.\n \n             # only supply the axis kwarg if one has been specified for a collapsing operation\n@@ -523,6 +547,10 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex b7eb663..832368c 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -26,6 +26,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs['wcs'] = deepcopy(self.wcs)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs['wcs'] = self._arithmetic_wcs(operation, operand, compare_wcs, **kwds2['wcs'])\n         use_masked_arith = operand is None and self.mask is not None\n         if use_masked_arith:\n@@ -40,6 +44,10 @@ class NDArithmeticMixin:\n             if not hasattr(result, 'mask'):\n                 result = np.ma.masked_array(result, mask=np.zeros_like(result, dtype=bool))\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             result = self._arithmetic_data(operation, operand, axis=axis, **kwds2['data'])\n         if not hasattr(result, 'unit') and hasattr(self, 'unit'):\n             kwargs['unit'] = self.unit\n@@ -51,6 +59,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs['uncertainty'] = deepcopy(self.uncertainty)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs['uncertainty'] = self._arithmetic_uncertainty(operation, operand, result, uncertainty_correlation, axis=axis, **kwds2['uncertainty'])\n         if self.psf is not None or (operand is not None and operand.psf is not None):\n             warnings.warn(f'Not setting psf attribute during {operation.__name__}.', AstropyUserWarning)\n@@ -64,6 +76,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs['mask'] = deepcopy(self.mask)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs['mask'] = self._arithmetic_mask(operation, operand, handle_mask, axis=axis, **kwds2['mask'])\n         if handle_meta is None:\n             kwargs['meta'] = None\n@@ -73,6 +89,10 @@ class NDArithmeticMixin:\n             else:\n                 kwargs['meta'] = deepcopy(self.meta)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             kwargs['meta'] = self._arithmetic_meta(operation, operand, handle_meta, **kwds2['meta'])\n         return (result, kwargs)\n     def _arithmetic_data(self, operation, operand, **kwds):\n@@ -109,6 +129,10 @@ class NDArithmeticMixin:\n             operand.uncertainty = None\n             return result_uncert\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             axis_kwarg = dict(axis=kwds['axis']) if 'axis' in kwds else dict()\n             return self.uncertainty.propagate(operation, operand, result, correlation, **axis_kwarg)\n     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n@@ -119,6 +143,10 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            if operand.mask is None:\n+                return deepcopy(self.mask)\n             return handle_mask(self.mask, operand.mask, **kwds)\n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         if not compare_wcs(self.wcs, operand.wcs, **kwds):\n", "normalized_occurrence": 1}
