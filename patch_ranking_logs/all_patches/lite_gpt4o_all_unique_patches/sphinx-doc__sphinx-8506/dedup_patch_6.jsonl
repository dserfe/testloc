{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex 2b9692e..f36fdc1 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -106,10 +106,28 @@ class ListTable(tables.ListTable):\n         return title, message\n \n \n-class Code(SphinxDirective):\n-    \"\"\"Parse and mark up content of a code block.\n+class OptionDirective(SphinxDirective):\n+    has_content = True\n+    option_spec = {\n+        'class': directives.class_option,\n+        'name': directives.unchanged,\n+    }\n+\n+    def run(self) -> List[Node]:\n+        self.assert_has_content()\n+        \n+        # Join the content lines to form the full option description\n+        option_desc = ' '.join(self.content)\n+        node = nodes.option(option_desc, option_desc, classes=self.options.get('classes', []))\n+        self.add_name(node)\n+        set_source_info(self, node)\n+        \n+        return [node]\n \n-    This is compatible with docutils' :rst:dir:`code` directive.\n+class OptionDirective(SphinxDirective):\n+    \"\"\"Parse and mark up content of an option directive.\n+    \n+    This allows for flexible option patterns that may not fit the restrictive opt, \"-opt args\", \"--opt args\", \"/opt args\" or \"+opt args\" formats.\n     \"\"\"\n     optional_arguments = 1\n     option_spec = {\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex d675290..a576d01 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -54,7 +54,17 @@ class ListTable(tables.ListTable):\n         if title:\n             set_source_info(self, title)\n         return (title, message)\n-class Code(SphinxDirective):\n+class OptionDirective(SphinxDirective):\n+    has_content = True\n+    option_spec = {'class': directives.class_option, 'name': directives.unchanged}\n+    def run(self) -> List[Node]:\n+        self.assert_has_content()\n+        option_desc = ' '.join(self.content)\n+        node = nodes.option(option_desc, option_desc, classes=self.options.get('classes', []))\n+        self.add_name(node)\n+        set_source_info(self, node)\n+        return [node]\n+class OptionDirective(SphinxDirective):\n     optional_arguments = 1\n     option_spec = {'class': directives.class_option, 'force': directives.flag, 'name': directives.unchanged, 'number-lines': optional_int}\n     has_content = True\n", "normalized_occurrence": 1}
