{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..e0ffa0e 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,12 +972,27 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+    if isinstance(target_type, tuple):\n+        actual_type = type(x)\n+        if (not isinstance(x, target_type) and\n+            not (any(issubclass(actual_type, t) for t in target_type)) and\n+            not (numbers.Integral in target_type and\n+                 isinstance(x, (numbers.Integral, np.integer))) and\n+            not (numbers.Real in target_type and\n+                 isinstance(x, (numbers.Real, np.number)))):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                          .format(name, target_type, type(x)))\n+    else:\n+        if (not isinstance(x, target_type) and\n+            not (target_type is numbers.Integral and\n+                 isinstance(x, (numbers.Integral, np.integer))) and\n+            not (target_type is numbers.Real and\n+                 isinstance(x, (numbers.Real, np.number)))):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                          .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..e88436b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,11 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    if isinstance(target_type, tuple):\n+        actual_type = type(x)\n+        if not isinstance(x, target_type) and (not any((issubclass(actual_type, t) for t in target_type))) and (not (numbers.Integral in target_type and isinstance(x, (numbers.Integral, np.integer)))) and (not (numbers.Real in target_type and isinstance(x, (numbers.Real, np.number)))):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    elif not isinstance(x, target_type) and (not (target_type is numbers.Integral and isinstance(x, (numbers.Integral, np.integer)))) and (not (target_type is numbers.Real and isinstance(x, (numbers.Real, np.number)))):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
