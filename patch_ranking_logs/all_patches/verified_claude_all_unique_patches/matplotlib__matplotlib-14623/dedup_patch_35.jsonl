{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-14623", "model_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex ebf1196..98efe18 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -2821,24 +2821,26 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n \n     swapped = False\n     if vmax < vmin:\n-        vmin, vmax = vmax, vmin\n         swapped = True\n+        if increasing:\n+            vmin, vmax = vmax, vmin\n \n     maxabsvalue = max(abs(vmin), abs(vmax))\n     if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n         vmin = -expander\n         vmax = expander\n+        if swapped and not increasing:\n+            vmin, vmax = vmax, vmin\n \n     elif vmax - vmin <= maxabsvalue * tiny:\n         if vmax == 0 and vmin == 0:\n             vmin = -expander\n             vmax = expander\n+            if swapped and not increasing:\n+                vmin, vmax = vmax, vmin\n         else:\n             vmin -= expander*abs(vmin)\n             vmax += expander*abs(vmax)\n-\n-    if swapped and not increasing:\n-        vmin, vmax = vmax, vmin\n     return vmin, vmax\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex 6dcd40d..4788cfe 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -1157,21 +1157,24 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n         return (-expander, expander)\n     swapped = False\n     if vmax < vmin:\n-        vmin, vmax = (vmax, vmin)\n         swapped = True\n+        if increasing:\n+            vmin, vmax = (vmax, vmin)\n     maxabsvalue = max(abs(vmin), abs(vmax))\n     if maxabsvalue < 1000000.0 / tiny * np.finfo(float).tiny:\n         vmin = -expander\n         vmax = expander\n+        if swapped and (not increasing):\n+            vmin, vmax = (vmax, vmin)\n     elif vmax - vmin <= maxabsvalue * tiny:\n         if vmax == 0 and vmin == 0:\n             vmin = -expander\n             vmax = expander\n+            if swapped and (not increasing):\n+                vmin, vmax = (vmax, vmin)\n         else:\n             vmin -= expander * abs(vmin)\n             vmax += expander * abs(vmax)\n-    if swapped and (not increasing):\n-        vmin, vmax = (vmax, vmin)\n     return (vmin, vmax)\n def interval_contains(interval, val):\n     a, b = interval\n", "normalized_occurrence": 1}
