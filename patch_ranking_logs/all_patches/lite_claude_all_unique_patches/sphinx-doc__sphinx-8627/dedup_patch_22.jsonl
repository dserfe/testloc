{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..aefaa40 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1383,12 +1383,22 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n+        \n+        # Check built-in class\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n-            # built-in class\n             return contnode\n+        # Check typing class\n         elif istyping(reftarget):\n-            # typing class\n             return contnode\n+        # Check standard library class\n+        elif modname and modname in sys.stdlib_module_names:\n+            try:\n+                mod = importlib.import_module(modname)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..51eab88 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -843,10 +843,18 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        elif modname and modname in sys.stdlib_module_names:\n+            try:\n+                mod = importlib.import_module(modname)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
