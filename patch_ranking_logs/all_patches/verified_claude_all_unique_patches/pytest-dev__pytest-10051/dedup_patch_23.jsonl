{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10051", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 9234395..eb6f1b1 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -441,6 +441,10 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        # Also clear the stashed records to maintain consistency with handler.records\n+        self._item.stash[caplog_records_key][\"call\"].clear()\n+        self._item.stash[caplog_records_key][\"setup\"].clear()\n+        self._item.stash[caplog_records_key][\"teardown\"].clear()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n", "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex d320659..46c0f3c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -198,6 +198,9 @@ class LogCaptureFixture:\n         return [r.getMessage() for r in self.records]\n     def clear(self) -> None:\n         self.handler.reset()\n+        self._item.stash[caplog_records_key]['call'].clear()\n+        self._item.stash[caplog_records_key]['setup'].clear()\n+        self._item.stash[caplog_records_key]['teardown'].clear()\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n", "normalized_occurrence": 1}
