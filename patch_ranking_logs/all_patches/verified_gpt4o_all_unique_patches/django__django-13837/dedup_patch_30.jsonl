{"model_name_or_path": "agentless", "instance_id": "django__django-13837", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 3b7178c..cee7bf5 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,33 +216,38 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n-    py_script = Path(sys.argv[0])\n+    import __main__\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n-    elif not py_script.exists():\n-        # sys.argv[0] may not exist for several reasons on Windows.\n-        # It may exist with a .exe extension or have a -script.py suffix.\n-        exe_entrypoint = py_script.with_suffix('.exe')\n-        if exe_entrypoint.exists():\n-            # Should be executed directly, ignoring sys.executable.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [str(exe_entrypoint), *sys.argv[1:]]\n-        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n-        if script_entrypoint.exists():\n-            # Should be executed as usual.\n-            # TODO: Remove str() when dropping support for PY37.\n-            # args parameter accepts path-like on Windows from Python 3.8.\n-            return [*args, str(script_entrypoint), *sys.argv[1:]]\n-        raise RuntimeError('Script %s does not exist.' % py_script)\n+    if __main__.__spec__ is not None:\n+        module_name = __main__.__spec__.parent\n+        if module_name:\n+            # The server was started with `python -m <module_name> runserver`.\n+            args += ['-m', module_name]\n+            args += sys.argv[1:]\n+        else:\n+            # The server was started with a directory or zip file.\n+            args += sys.argv\n     else:\n-        args += sys.argv\n+        py_script = Path(sys.argv[0])\n+        if not py_script.exists():\n+            # sys.argv[0] may not exist for several reasons on Windows.\n+            # It may exist with a .exe extension or have a -script.py suffix.\n+            exe_entrypoint = py_script.with_suffix('.exe')\n+            if exe_entrypoint.exists():\n+                # Should be executed directly, ignoring sys.executable.\n+                # TODO: Remove str() when dropping support for PY37.\n+                # args parameter accepts path-like on Windows from Python 3.8.\n+                return [str(exe_entrypoint), *sys.argv[1:]]\n+            script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n+            if script_entrypoint.exists():\n+                # Should be executed as usual.\n+                # TODO: Remove str() when dropping support for PY37.\n+                # args parameter accepts path-like on Windows from Python 3.8.\n+                return [*args, str(script_entrypoint), *sys.argv[1:]]\n+            raise RuntimeError('Script %s does not exist.' % py_script)\n+        else:\n+            args += sys.argv\n     return args\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 9acf8d8..66c2be4 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -131,23 +131,27 @@ def sys_path_directories():\n         else:\n             yield resolved_path\n def get_child_arguments():\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n-    py_script = Path(sys.argv[0])\n+    import __main__\n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n-    elif not py_script.exists():\n-        exe_entrypoint = py_script.with_suffix('.exe')\n-        if exe_entrypoint.exists():\n-            return [str(exe_entrypoint), *sys.argv[1:]]\n-        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n-        if script_entrypoint.exists():\n-            return [*args, str(script_entrypoint), *sys.argv[1:]]\n-        raise RuntimeError('Script %s does not exist.' % py_script)\n+    if __main__.__spec__ is not None:\n+        module_name = __main__.__spec__.parent\n+        if module_name:\n+            args += ['-m', module_name]\n+            args += sys.argv[1:]\n+        else:\n+            args += sys.argv\n     else:\n-        args += sys.argv\n+        py_script = Path(sys.argv[0])\n+        if not py_script.exists():\n+            exe_entrypoint = py_script.with_suffix('.exe')\n+            if exe_entrypoint.exists():\n+                return [str(exe_entrypoint), *sys.argv[1:]]\n+            script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)\n+            if script_entrypoint.exists():\n+                return [*args, str(script_entrypoint), *sys.argv[1:]]\n+            raise RuntimeError('Script %s does not exist.' % py_script)\n+        else:\n+            args += sys.argv\n     return args\n def trigger_reload(filename):\n     logger.info('%s changed, reloading.', filename)\n", "normalized_occurrence": 1}
