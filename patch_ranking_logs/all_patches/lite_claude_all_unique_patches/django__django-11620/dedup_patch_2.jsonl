{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11620", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 37e3b61..37e7d3c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -239,6 +239,8 @@ def _route_to_regex(route, is_endpoint=False):\n     return ''.join(parts), converters\n \n \n+from django.http import Http404\n+\n class RoutePattern(CheckURLMixin):\n     regex = LocaleRegexDescriptor('_route')\n \n@@ -260,6 +262,8 @@ class RoutePattern(CheckURLMixin):\n                     kwargs[key] = converter.to_python(value)\n                 except ValueError:\n                     return None\n+                except Http404:\n+                    raise  # Let Http404 propagate up\n             return path[match.end():], (), kwargs\n         return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 24bb34e..7c0b4e8 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -140,6 +140,7 @@ def _route_to_regex(route, is_endpoint=False):\n     if is_endpoint:\n         parts.append('$')\n     return (''.join(parts), converters)\n+from django.http import Http404\n class RoutePattern(CheckURLMixin):\n     regex = LocaleRegexDescriptor('_route')\n     def __init__(self, route, name=None, is_endpoint=False):\n@@ -158,6 +159,8 @@ class RoutePattern(CheckURLMixin):\n                     kwargs[key] = converter.to_python(value)\n                 except ValueError:\n                     return None\n+                except Http404:\n+                    raise\n             return (path[match.end():], (), kwargs)\n         return None\n     def check(self):\n", "normalized_occurrence": 1}
