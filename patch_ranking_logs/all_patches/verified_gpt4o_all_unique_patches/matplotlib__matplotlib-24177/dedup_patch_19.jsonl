{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..e7e5a46 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6887,8 +6887,12 @@ such objects\n                 for patch in patch_list:\n                     if orientation == 'vertical':\n                         patch.sticky_edges.y.append(0)\n+                        if density:\n+                            self.dataLim.update_from_data_y(np.array([0, *tops.flatten()]))\n                     elif orientation == 'horizontal':\n                         patch.sticky_edges.x.append(0)\n+                        if density:\n+                            self.dataLim.update_from_data_x(np.array([0, *tops.flatten()]))\n \n             # we return patches, so put it back in the expected order\n             patches.reverse()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..8b62bf4 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2042,8 +2042,12 @@ class Axes(_AxesBase):\n                 for patch in patch_list:\n                     if orientation == 'vertical':\n                         patch.sticky_edges.y.append(0)\n+                        if density:\n+                            self.dataLim.update_from_data_y(np.array([0, *tops.flatten()]))\n                     elif orientation == 'horizontal':\n                         patch.sticky_edges.x.append(0)\n+                        if density:\n+                            self.dataLim.update_from_data_x(np.array([0, *tops.flatten()]))\n             patches.reverse()\n         labels = [] if label is None else np.atleast_1d(np.asarray(label, str))\n         for patch, lbl in itertools.zip_longest(patches, labels):\n", "normalized_occurrence": 1}
