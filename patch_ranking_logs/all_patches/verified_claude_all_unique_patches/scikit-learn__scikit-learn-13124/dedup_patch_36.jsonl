{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..eff1606 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -576,8 +576,8 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle the order of the folds. Note that this does not\n+        shuffle samples within each stratification.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n@@ -648,13 +648,17 @@ class StratifiedKFold(_BaseKFold):\n         # pre-assign each sample to a test fold index using individual KFold\n         # splitting strategies for each class so as to respect the balance of\n         # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n+        # First shuffle indices within each class if shuffle=True\n+        test_folds = np.zeros(n_samples, dtype=np.int)\n+        per_cls_cvs = []\n+        for cls, count in zip(unique_y, y_counts):\n+            cls_indices = np.where(y == cls)[0]\n+            if self.shuffle:\n+                rng.shuffle(cls_indices)\n+            # Use unshuffled KFold since we already shuffled the indices\n+            per_cls_cvs.append(\n+                KFold(self.n_splits, shuffle=False).split(np.zeros(max(count, self.n_splits)))\n+            )\n \n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex a142d27..229373f 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -503,8 +503,8 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle the order of the folds. Note that this does not\n+        shuffle samples within each stratification.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n@@ -562,7 +562,13 @@ class StratifiedKFold(_BaseKFold):\n             raise ValueError('n_splits=%d cannot be greater than the number of members in each class.' % self.n_splits)\n         if self.n_splits > min_groups:\n             warnings.warn('The least populated class in y has only %d members, which is too few. The minimum number of members in any class cannot be less than n_splits=%d.' % (min_groups, self.n_splits), Warning)\n-        per_cls_cvs = [KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n+        test_folds = np.zeros(n_samples, dtype=np.int)\n+        per_cls_cvs = []\n+        for cls, count in zip(unique_y, y_counts):\n+            cls_indices = np.where(y == cls)[0]\n+            if self.shuffle:\n+                rng.shuffle(cls_indices)\n+            per_cls_cvs.append(KFold(self.n_splits, shuffle=False).split(np.zeros(max(count, self.n_splits))))\n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n             for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n", "normalized_occurrence": 1}
