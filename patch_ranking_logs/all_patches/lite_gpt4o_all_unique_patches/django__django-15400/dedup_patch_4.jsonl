{"model_name_or_path": "agentless", "instance_id": "django__django-15400", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 8bdf0cb..48e0e71 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -423,14 +423,10 @@ class SimpleLazyObject(LazyObject):\n             # If initialized, return a copy of the wrapped object.\n             return copy.copy(self._wrapped)\n \n-    def __deepcopy__(self, memo):\n+    def __radd__(self, other):\n         if self._wrapped is empty:\n-            # We have to use SimpleLazyObject, not self.__class__, because the\n-            # latter is proxied.\n-            result = SimpleLazyObject(self._setupfunc)\n-            memo[id(self)] = result\n-            return result\n-        return copy.deepcopy(self._wrapped, memo)\n+            self._setup()\n+        return other + self._wrapped\n \n \n def partition(predicate, values):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex ee68922..b08ce00 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -207,12 +207,10 @@ class SimpleLazyObject(LazyObject):\n             return SimpleLazyObject(self._setupfunc)\n         else:\n             return copy.copy(self._wrapped)\n-    def __deepcopy__(self, memo):\n+    def __radd__(self, other):\n         if self._wrapped is empty:\n-            result = SimpleLazyObject(self._setupfunc)\n-            memo[id(self)] = result\n-            return result\n-        return copy.deepcopy(self._wrapped, memo)\n+            self._setup()\n+        return other + self._wrapped\n def partition(predicate, values):\n     results = ([], [])\n     for item in values:\n", "normalized_occurrence": 1}
