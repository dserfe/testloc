{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..764f7f5 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,7 +191,11 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs[0].__class__\n+            if model in self.fast_deletes:\n+                self.fast_deletes[model].extend(objs)\n+            else:\n+                self.fast_deletes[model] = objs\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n@@ -225,7 +229,11 @@ class Collector:\n                 for batch in batches:\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n+                        related_model = sub_objs[0].__class__\n+                        if related_model in self.fast_deletes:\n+                            self.fast_deletes[related_model].extend(sub_objs)\n+                        else:\n+                            self.fast_deletes[related_model] = sub_objs\n                     else:\n                         related_model = related.related_model\n                         # Non-referenced fields can be deferred if no signal\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..84d0dcd 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -80,7 +80,11 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs[0].__class__\n+            if model in self.fast_deletes:\n+                self.fast_deletes[model].extend(objs)\n+            else:\n+                self.fast_deletes[model] = objs\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n@@ -105,7 +109,11 @@ class Collector:\n                 for batch in batches:\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n+                        related_model = sub_objs[0].__class__\n+                        if related_model in self.fast_deletes:\n+                            self.fast_deletes[related_model].extend(sub_objs)\n+                        else:\n+                            self.fast_deletes[related_model] = sub_objs\n                     else:\n                         related_model = related.related_model\n                         if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n", "normalized_occurrence": 1}
