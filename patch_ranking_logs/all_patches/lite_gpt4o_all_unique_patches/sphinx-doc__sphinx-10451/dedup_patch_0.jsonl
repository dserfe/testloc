{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..0771aa3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,12 +121,25 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ['*args', '**kwargs']:\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n+    # Handle *args and **kwargs specially\n+    if '*args' in annotations and '*args' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'param *args')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['*args']))\n+        node += field\n+\n+    if '**kwargs' in annotations and '**kwargs' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'param **kwargs')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['**kwargs']))\n+        node += field\n+\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n         if annotation == 'None' and suppress_rtype:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..d7103df 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -91,11 +91,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ['*args', '**kwargs']:\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n+    if '*args' in annotations and '*args' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'param *args')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['*args']))\n+        node += field\n+    if '**kwargs' in annotations and '**kwargs' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'param **kwargs')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['**kwargs']))\n+        node += field\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n         if annotation == 'None' and suppress_rtype:\n", "normalized_occurrence": 1}
