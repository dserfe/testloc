{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 440e6fe..a4280bb 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -601,10 +601,12 @@ class PyLinter(\n                         root,\n                         self.config.ignore,\n                         self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n+                        self.config.ignore_paths\n                     ):\n                         skip_subtrees.append(root)\n                         continue\n+                        skip_subtrees.append(root)\n+                        continue\n \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n@@ -619,6 +621,9 @@ class PyLinter(\n                 yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n+        self.config.ignore_paths = [\n+            path for path in self.config.ignore_paths\n+        ]\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n \n         files_or_modules is either a string or list of strings presenting modules to check.\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex afb1178..fcf391b 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -233,6 +233,8 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                     if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n                         skip_subtrees.append(root)\n                         continue\n+                        skip_subtrees.append(root)\n+                        continue\n                     if '__init__.py' in files:\n                         skip_subtrees.append(root)\n                         yield root\n@@ -241,6 +243,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n+        self.config.ignore_paths = [path for path in self.config.ignore_paths]\n         self.initialize()\n         if not isinstance(files_or_modules, (list, tuple)):\n             warnings.warn('In pylint 3.0, the checkers check function will only accept sequence of string', DeprecationWarning)\n", "normalized_occurrence": 1}
