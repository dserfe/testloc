{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..2078e55 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -336,8 +336,18 @@ class sin(TrigonometricFunction):\n                     return cls(pi_coeff*S.Pi)\n                 return None\n \n+        from sympy import Abs\n+\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m)*cos(x) - sin(m)*sin(x)\n+\n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and arg.args[0].exp == 2:\n+            base = arg.args[0].base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m)*cos(x) + cos(m)*sin(x)\n \n@@ -653,11 +663,21 @@ class cos(TrigonometricFunction):\n                     return sign_cos*sqrt( (1 + nval)/2 )\n             return None\n \n+        from sympy import Abs\n+\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n \n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and arg.args[0].exp == 2:\n+            base = arg.args[0].base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m)*cos(x) - sin(m)*sin(x)\n+\n         if arg.is_zero:\n             return S.One\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..6aaa09b 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -187,8 +187,16 @@ class sin(TrigonometricFunction):\n                 if pi_coeff * S.Pi != arg:\n                     return cls(pi_coeff * S.Pi)\n                 return None\n+        from sympy import Abs\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m) * cos(x) - sin(m) * sin(x)\n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and (arg.args[0].exp == 2):\n+            base = arg.args[0].base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n         if arg.is_zero:\n@@ -379,10 +387,18 @@ class cos(TrigonometricFunction):\n                     sign_cos = (-1) ** ((-1 if x < 0 else 1) * int(abs(x)))\n                     return sign_cos * sqrt((1 + nval) / 2)\n             return None\n+        from sympy import Abs\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and (arg.args[0].exp == 2):\n+            base = arg.args[0].base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m) * cos(x) - sin(m) * sin(x)\n         if arg.is_zero:\n             return S.One\n         if isinstance(arg, acos):\n", "normalized_occurrence": 1}
