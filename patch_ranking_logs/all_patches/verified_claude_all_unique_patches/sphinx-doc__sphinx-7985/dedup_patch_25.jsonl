{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..9058661 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,39 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if it's a local reference\n+                if uri.startswith('#'):\n+                    # It's a reference to a section within the same document\n+                    anchor = uri[1:]\n+                    doctree = self.env.get_doctree(docname)\n+                    if any(node['ids'][0] == anchor for node in doctree.traverse() if 'ids' in node):\n+                        return 'working', '', 0\n+                    return 'broken', 'Anchor not found', 0\n+                else:\n+                    # It's a reference to another document or its section\n+                    doc = uri\n+                    if '#' in uri:\n+                        doc, anchor = uri.split('#', 1)\n+                    else:\n+                        anchor = ''\n+                    \n+                    # Handle relative paths\n+                    if doc.endswith('.rst'):\n+                        doc = doc[:-4]\n+                    if doc.endswith('/index'):\n+                        doc = doc[:-6]\n+                    \n+                    # Check if document exists\n+                    if doc not in self.env.found_docs:\n+                        return 'broken', 'Document not found', 0\n+                    \n+                    # If there's an anchor, check it exists in the target document\n+                    if anchor:\n+                        target_doctree = self.env.get_doctree(doc)\n+                        if not any(node['ids'][0] == anchor for node in target_doctree.traverse() if 'ids' in node):\n+                            return 'broken', 'Anchor not found', 0\n+                    \n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..f0daeb2 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,29 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    anchor = uri[1:]\n+                    doctree = self.env.get_doctree(docname)\n+                    if any((node['ids'][0] == anchor for node in doctree.traverse() if 'ids' in node)):\n+                        return ('working', '', 0)\n+                    return ('broken', 'Anchor not found', 0)\n+                else:\n+                    doc = uri\n+                    if '#' in uri:\n+                        doc, anchor = uri.split('#', 1)\n+                    else:\n+                        anchor = ''\n+                    if doc.endswith('.rst'):\n+                        doc = doc[:-4]\n+                    if doc.endswith('/index'):\n+                        doc = doc[:-6]\n+                    if doc not in self.env.found_docs:\n+                        return ('broken', 'Document not found', 0)\n+                    if anchor:\n+                        target_doctree = self.env.get_doctree(doc)\n+                        if not any((node['ids'][0] == anchor for node in target_doctree.traverse() if 'ids' in node)):\n+                            return ('broken', 'Anchor not found', 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
