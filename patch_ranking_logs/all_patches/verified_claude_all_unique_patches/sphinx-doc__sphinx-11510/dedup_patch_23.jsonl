{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 2cbe59f..9512d9b 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -101,7 +101,12 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         if not self.parser:\n             self.parser = parser\n         self.settings = settings\n-        self.input = self.read_source(settings.env)\n+        content = source.read_text()\n+        # Check if we have processed this content before (for includes)\n+        if hasattr(settings.env, '_processed_sources') and content in settings.env._processed_sources:\n+            self.input = settings.env._processed_sources[content]\n+        else:\n+            self.input = self.read_source(settings.env)\n         self.parse()\n         return self.document\n \n@@ -112,6 +117,10 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        # Store processed content in environment for includes\n+        if not hasattr(env, '_processed_sources'):\n+            env._processed_sources = {}\n+        env._processed_sources[self.source.read_text()] = arg[0]\n         return arg[0]\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 93c5794..854df82 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -57,13 +57,20 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         if not self.parser:\n             self.parser = parser\n         self.settings = settings\n-        self.input = self.read_source(settings.env)\n+        content = source.read_text()\n+        if hasattr(settings.env, '_processed_sources') and content in settings.env._processed_sources:\n+            self.input = settings.env._processed_sources[content]\n+        else:\n+            self.input = self.read_source(settings.env)\n         self.parse()\n         return self.document\n     def read_source(self, env: BuildEnvironment) -> str:\n         content = self.source.read()\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        if not hasattr(env, '_processed_sources'):\n+            env._processed_sources = {}\n+        env._processed_sources[self.source.read_text()] = arg[0]\n         return arg[0]\n class SphinxI18nReader(SphinxBaseReader):\n     def setup(self, app: Sphinx) -> None:\n", "normalized_occurrence": 1}
