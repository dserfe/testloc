{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..a96bae0 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -423,10 +423,7 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     # TODO: make this function dask-compatible?\n     # Set offset to minimum if not given\n     if offset is None:\n-        if array.dtype.kind in \"Mm\":\n-            offset = _datetime_nanmin(array)\n-        else:\n-            offset = min(array)\n+        offset = _datetime_nanmin(array) if array.dtype.kind in \"Mm\" else min(array)\n \n     # Compute timedelta object.\n     # For np.datetime64, this can silently yield garbage due to overflow.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..833e3dd 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -227,10 +227,7 @@ def _datetime_nanmin(array):\n     return array.astype(dtype)\n def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     if offset is None:\n-        if array.dtype.kind in 'Mm':\n-            offset = _datetime_nanmin(array)\n-        else:\n-            offset = min(array)\n+        offset = _datetime_nanmin(array) if array.dtype.kind in 'Mm' else min(array)\n     array = array - offset\n     if not hasattr(array, 'dtype'):\n         array = np.array(array)\n", "normalized_occurrence": 1}
