{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..3d47120 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1738,7 +1738,12 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n                 pass\n             raise RuntimeError(\"matplotlib does not support generators \"\n                                \"as input\")\n-        return next(iter(obj))\n+        try:\n+            # When not skipping non-finite values, return the first element\n+            # regardless of whether it's finite or not\n+            return next(iter(obj))\n+        except StopIteration:\n+            raise ValueError(\"Input array is empty\")\n     elif isinstance(obj, np.flatiter):\n         # TODO do the finite filtering on this\n         return obj[0]\n@@ -1746,7 +1751,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        try:\n+            return next(val for val in obj if safe_isfinite(val))\n+        except StopIteration:\n+            raise ValueError(\"No finite values found in array\")\n \n \n def sanitize_sequence(data):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..c82d742 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -744,13 +744,19 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             except TypeError:\n                 pass\n             raise RuntimeError('matplotlib does not support generators as input')\n-        return next(iter(obj))\n+        try:\n+            return next(iter(obj))\n+        except StopIteration:\n+            raise ValueError('Input array is empty')\n     elif isinstance(obj, np.flatiter):\n         return obj[0]\n     elif isinstance(obj, collections.abc.Iterator):\n         raise RuntimeError('matplotlib does not support generators as input')\n     else:\n-        return next((val for val in obj if safe_isfinite(val)))\n+        try:\n+            return next((val for val in obj if safe_isfinite(val)))\n+        except StopIteration:\n+            raise ValueError('No finite values found in array')\n def sanitize_sequence(data):\n     return list(data) if isinstance(data, collections.abc.MappingView) else data\n def normalize_kwargs(kw, alias_mapping=None):\n", "normalized_occurrence": 1}
