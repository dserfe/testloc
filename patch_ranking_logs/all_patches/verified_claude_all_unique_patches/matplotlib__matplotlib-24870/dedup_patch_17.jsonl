{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..92f7e9c 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1123,7 +1123,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                if getattr(self, '_input_is_boolean', False):\n+                    levels_arg = [0.5]  # Single level for boolean input\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -1458,6 +1461,7 @@ class QuadContourSet(ContourSet):\n         z = ma.masked_invalid(z, copy=False)\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n+        self._input_is_boolean = z.dtype == np.bool_\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..288ba12 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -483,7 +483,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n     def _process_contour_level_args(self, args):\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7\n+                if getattr(self, '_input_is_boolean', False):\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -674,6 +677,7 @@ class QuadContourSet(ContourSet):\n         z = ma.masked_invalid(z, copy=False)\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n+        self._input_is_boolean = z.dtype == np.bool_\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n", "normalized_occurrence": 1}
