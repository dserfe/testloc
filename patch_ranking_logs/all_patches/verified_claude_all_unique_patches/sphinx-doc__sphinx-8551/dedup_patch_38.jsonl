{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..f95239a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,13 +1260,20 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n+                    # First try the full module path\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n+                        # In searchmode 1 (type references), prefer exact module match\n+                        if searchmode == 1:\n+                            matches = [(newname, self.objects[newname])]\n+                            return matches\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n+                    \n+                    if not newname or searchmode != 1:\n+                        # \"fuzzy\" searching mode - only use for non-type references\n+                        # or when no exact match found\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..00f5dfd 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,9 +761,12 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n+                        if searchmode == 1:\n+                            matches = [(newname, self.objects[newname])]\n+                            return matches\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n-                    else:\n+                    if not newname or searchmode != 1:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n", "normalized_occurrence": 1}
