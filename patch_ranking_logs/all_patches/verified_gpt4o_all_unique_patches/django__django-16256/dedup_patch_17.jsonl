{"model_name_or_path": "agentless", "instance_id": "django__django-16256", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a01cd24..fc8b772 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -785,27 +785,27 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         add.alters_data = True\n \n-        def create(self, **kwargs):\n+        async def acreate(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n \n-        create.alters_data = True\n+        acreate.alters_data = True\n \n-        def get_or_create(self, **kwargs):\n+        async def aget_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n \n-        get_or_create.alters_data = True\n+        aget_or_create.alters_data = True\n \n-        def update_or_create(self, **kwargs):\n+        async def aupdate_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n \n         update_or_create.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex be1830e..e1fc44a 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -299,23 +299,23 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                         check_and_update_obj(obj)\n                         obj.save()\n         add.alters_data = True\n-        def create(self, **kwargs):\n+        async def acreate(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n-        create.alters_data = True\n-        def get_or_create(self, **kwargs):\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n+        acreate.alters_data = True\n+        async def aget_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n-        get_or_create.alters_data = True\n-        def update_or_create(self, **kwargs):\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+        aget_or_create.alters_data = True\n+        async def aupdate_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n         update_or_create.alters_data = True\n         if rel.field.null:\n             def remove(self, *objs, bulk=True):\n", "normalized_occurrence": 1}
