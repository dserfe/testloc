{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..66c7438 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -881,6 +881,9 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         negation = ast.UnaryOp(ast.Not(), top_condition)\n \n+        # Store the assertion's line number to limit error output\n+        assertion_lineno = assert_.lineno\n+\n         if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n             msg = self.pop_format_context(ast.Str(explanation))\n \n@@ -898,7 +901,8 @@ class AssertionRewriter(ast.NodeVisitor):\n             exc = ast.Call(err_name, [fmt], [])\n             raise_ = ast.Raise(exc, None)\n             statements_fail = []\n-            statements_fail.extend(self.expl_stmts)\n+            # Only include statements from the actual assertion line\n+            statements_fail.extend([stmt for stmt in self.expl_stmts if getattr(stmt, 'lineno', assertion_lineno) == assertion_lineno])\n             statements_fail.append(raise_)\n \n             # Passed\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..5508328 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -464,6 +464,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.push_format_context()\n         top_condition, explanation = self.visit(assert_.test)\n         negation = ast.UnaryOp(ast.Not(), top_condition)\n+        assertion_lineno = assert_.lineno\n         if self.enable_assertion_pass_hook:\n             msg = self.pop_format_context(ast.Str(explanation))\n             if assert_.msg:\n@@ -479,7 +480,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             exc = ast.Call(err_name, [fmt], [])\n             raise_ = ast.Raise(exc, None)\n             statements_fail = []\n-            statements_fail.extend(self.expl_stmts)\n+            statements_fail.extend([stmt for stmt in self.expl_stmts if getattr(stmt, 'lineno', assertion_lineno) == assertion_lineno])\n             statements_fail.append(raise_)\n             fmt_pass = self.helper('_format_explanation', msg)\n             orig = _get_assertion_exprs(self.source)[assert_.lineno]\n", "normalized_occurrence": 1}
