{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..9d6e89f 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -150,4 +150,22 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n+\n+    def check(self, model):\n+        errors = []\n+        for field_name in self.fields:\n+            if not any(\n+                field_name == field.name or field_name == field.attname\n+                for field in model._meta.get_fields()\n+            ):\n+                errors.append(\n+                    Error(\n+                        \"The field '%s' referenced by unique constraint %s was not found in model '%s'.\" % (\n+                            field_name, self.name, model._meta.label,\n+                        ),\n+                        obj=model,\n+                        id='models.E012',\n+                    )\n+                )\n+        return errors\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n-        return (path, args, kwargs)\n+        return (path, args, kwargs)\n+    def check(self, model):\n+        errors = []\n+        for field_name in self.fields:\n+            if not any((field_name == field.name or field_name == field.attname for field in model._meta.get_fields())):\n+                errors.append(Error(\"The field '%s' referenced by unique constraint %s was not found in model '%s'.\" % (field_name, self.name, model._meta.label), obj=model, id='models.E012'))\n+        return errors", "normalized_occurrence": 1}
