{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..e1d3b8e 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,54 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n+    \n+    This is an improved version that replaces the original Mignotte bound.\n+    The Knuth-Cohen bound is generally tighter than Mignotte's bound.\n+    \"\"\"\n     n = dup_degree(f)\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    lc = abs(dup_LC(f, K))\n+    \n+    if n <= 0:\n+        return lc\n+        \n+    coeffs = [ abs(c) for c in f[1:] ]  # Skip leading coefficient\n+    if not coeffs:\n+        return lc\n+        \n+    norm = max(coeffs)\n+    return 2 * min(\n+        lc * sum(norm * 2**(n-i-1) for i in range(n)),\n+        norm * sum(lc * 2**(i) for i in range(n))\n+    )\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This is an improved version that replaces the original Mignotte bound.\n+    For multivariate polynomials, we apply the Knuth-Cohen bound considering\n+    the total degree.\n+    \"\"\"\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n+        \n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    \n+    if n <= 0:\n+        return lc\n+        \n+    # Get all coefficients except the leading one\n+    coeffs = dmp_coeffs(f, u)[1:]  # Skip leading coefficient\n+    if not coeffs:\n+        return lc\n+        \n+    norm = max(abs(c) for c in coeffs)\n+    return 2 * min(\n+        lc * sum(norm * 2**(n-i-1) for i in range(n)),\n+        norm * sum(lc * 2**(i) for i in range(n))\n+    )\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..34cb77d 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,27 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dup_LC(f, K))\n+    if n <= 0:\n+        return lc\n+    coeffs = [abs(c) for c in f[1:]]\n+    if not coeffs:\n+        return lc\n+    norm = max(coeffs)\n+    return 2 * min(lc * sum((norm * 2 ** (n - i - 1) for i in range(n))), norm * sum((lc * 2 ** i for i in range(n))))\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    if n <= 0:\n+        return lc\n+    coeffs = dmp_coeffs(f, u)[1:]\n+    if not coeffs:\n+        return lc\n+    norm = max((abs(c) for c in coeffs))\n+    return 2 * min(lc * sum((norm * 2 ** (n - i - 1) for i in range(n))), norm * sum((lc * 2 ** i for i in range(n))))\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
