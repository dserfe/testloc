{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..7869089 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -226,18 +226,24 @@ class HashedFilesMixin:\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n \n-        paths = {path: paths[path] for path in adjustable_paths}\n+        # Process non-adjustable files only once\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n+            if processed:\n+                yield name, hashed_name, processed\n+\n+        # Process adjustable files\n+        adjustable_paths = {path: paths[path] for path in adjustable_paths}\n+        seen_files = set()\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+            for name, hashed_name, processed, subst in self._post_process(adjustable_paths, adjustable_paths.keys(), hashed_files):\n                 substitutions = substitutions or subst\n+                if processed and name not in seen_files:\n+                    yield name, hashed_name, processed\n+                    seen_files.add(name)\n \n             if not substitutions:\n                 break\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..e9fc09c 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -126,14 +126,19 @@ class HashedFilesMixin:\n             return\n         hashed_files = {}\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield (name, hashed_name, processed)\n-        paths = {path: paths[path] for path in adjustable_paths}\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n+            if processed:\n+                yield (name, hashed_name, processed)\n+        adjustable_paths = {path: paths[path] for path in adjustable_paths}\n+        seen_files = set()\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n+            for name, hashed_name, processed, subst in self._post_process(adjustable_paths, adjustable_paths.keys(), hashed_files):\n                 substitutions = substitutions or subst\n+                if processed and name not in seen_files:\n+                    yield (name, hashed_name, processed)\n+                    seen_files.add(name)\n             if not substitutions:\n                 break\n         if substitutions:\n", "normalized_occurrence": 1}
