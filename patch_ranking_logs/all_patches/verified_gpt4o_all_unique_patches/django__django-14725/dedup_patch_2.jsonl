{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..0544751 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,16 +573,20 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n+        self.allow_new_objects = allow_new_objects\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n-        if not self.is_bound:\n+        if self.allow_new_objects:\n+            if not self.is_bound:\n+                return len(self.get_queryset())\n+            return super().initial_form_count()\n+        else:\n             return len(self.get_queryset())\n-        return super().initial_form_count()\n \n     def _existing_object(self, pk):\n         if not hasattr(self, '_object_dict'):\n@@ -676,7 +680,10 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        else:\n+            return self.save_existing_objects(commit)\n \n     save.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..7406d71 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -273,14 +273,18 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n+        self.allow_new_objects = allow_new_objects\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n     def initial_form_count(self):\n-        if not self.is_bound:\n+        if self.allow_new_objects:\n+            if not self.is_bound:\n+                return len(self.get_queryset())\n+            return super().initial_form_count()\n+        else:\n             return len(self.get_queryset())\n-        return super().initial_form_count()\n     def _existing_object(self, pk):\n         if not hasattr(self, '_object_dict'):\n             self._object_dict = {o.pk: o for o in self.get_queryset()}\n@@ -341,7 +345,10 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        else:\n+            return self.save_existing_objects(commit)\n     save.alters_data = True\n     def clean(self):\n         self.validate_unique()\n", "normalized_occurrence": 1}
