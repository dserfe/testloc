{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..962f996 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,17 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        factors = []\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and sum(monom) > 0:\n+                factors.append(self._print_monom(monom, poly.gens))\n+            else:\n+                if coeff == -1 and sum(monom) > 0:\n+                    factors.append(\"-\" + self._print_monom(monom, poly.gens))\n+                else:\n+                    factors.append(self._print(coeff) + \"*\" + self._print_monom(monom, poly.gens))\n+        expr = \" + \".join(factors) if factors else \"0\"\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n@@ -1866,6 +1876,18 @@ class LatexPrinter(Printer):\n \n         return tex\n \n+    def _print_monom(self, monom, gens):\n+        \"\"\"Helper method for _print_Poly to print a monomial\"\"\"\n+        parts = []\n+        for m, g in zip(monom, gens):\n+            if m == 0:\n+                continue\n+            elif m == 1:\n+                parts.append(self._print(g))\n+            else:\n+                parts.append(self._print(g) + \"^{\" + self._print(m) + \"}\")\n+        return \"*\".join(parts) if parts else \"1\"\n+\n     def _print_ComplexRootOf(self, root):\n         cls = root.__class__.__name__\n         if cls == \"ComplexRootOf\":\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..7d837fc 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,16 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        factors = []\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and sum(monom) > 0:\n+                factors.append(self._print_monom(monom, poly.gens))\n+            elif coeff == -1 and sum(monom) > 0:\n+                factors.append('-' + self._print_monom(monom, poly.gens))\n+            else:\n+                factors.append(self._print(coeff) + '*' + self._print_monom(monom, poly.gens))\n+        expr = ' + '.join(factors) if factors else '0'\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n@@ -1250,6 +1259,16 @@ class LatexPrinter(Printer):\n         else:\n             tex = '\\\\operatorname{%s}{\\\\left( %s \\\\right)}' % (cls, args)\n         return tex\n+    def _print_monom(self, monom, gens):\n+        parts = []\n+        for m, g in zip(monom, gens):\n+            if m == 0:\n+                continue\n+            elif m == 1:\n+                parts.append(self._print(g))\n+            else:\n+                parts.append(self._print(g) + '^{' + self._print(m) + '}')\n+        return '*'.join(parts) if parts else '1'\n     def _print_ComplexRootOf(self, root):\n         cls = root.__class__.__name__\n         if cls == 'ComplexRootOf':\n", "normalized_occurrence": 1}
