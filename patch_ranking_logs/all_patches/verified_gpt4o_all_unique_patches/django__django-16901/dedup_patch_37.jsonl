{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..faf4b1d 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -60,9 +60,17 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n \n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            obj = self.create(connector=self.OR)\n+            obj.add(self, self.OR)\n+            obj.add(other, self.OR)\n+            # Ensure only an odd number of conditions are true.\n+            if len(obj.children) % 2 == 0:\n+                obj.negated = True\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..cdb8271 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,9 +27,16 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            obj = self.create(connector=self.OR)\n+            obj.add(self, self.OR)\n+            obj.add(other, self.OR)\n+            if len(obj.children) % 2 == 0:\n+                obj.negated = True\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
