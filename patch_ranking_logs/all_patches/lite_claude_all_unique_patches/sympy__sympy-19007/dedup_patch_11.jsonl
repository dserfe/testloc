{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..3debb25 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,22 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        row_accumulator = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_accumulator += numrows\n+            if row_block + 1 == len(self.rowblocksizes) or i < row_accumulator:\n+                i_block = i - (row_accumulator - numrows)\n                 break\n-            else:\n-                i -= numrows\n+\n+        # Find column entry\n+        col_accumulator = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_accumulator += numcols\n+            if col_block + 1 == len(self.colblocksizes) or j < col_accumulator:\n+                j_block = j - (col_accumulator - numcols)\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+\n+        return self.blocks[row_block, col_block][i_block, j_block]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..ee3c542 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,19 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        row_accumulator = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_accumulator += numrows\n+            if row_block + 1 == len(self.rowblocksizes) or i < row_accumulator:\n+                i_block = i - (row_accumulator - numrows)\n                 break\n-            else:\n-                i -= numrows\n+        col_accumulator = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_accumulator += numcols\n+            if col_block + 1 == len(self.colblocksizes) or j < col_accumulator:\n+                j_block = j - (col_accumulator - numcols)\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        return self.blocks[row_block, col_block][i_block, j_block]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
