{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..43941c4 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -857,19 +857,35 @@ class Permutation(Basic):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            perm = list(range(size or 0))\n+            obj = Basic.__new__(cls, perm)\n+            obj._array_form = perm\n+            obj._size = len(perm)\n+            return obj\n         elif len(args) > 1:  # c\n-            return _af_new(Cycle(*args).list(size))\n+            perm = Cycle(*args).list(size)\n+            obj = Basic.__new__(cls, perm)\n+            obj._array_form = perm\n+            obj._size = len(perm)\n+            return obj\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):  # g\n                 if size is None or size == a.size:\n                     return a\n-                return Perm(a.array_form, size=size)\n+                return cls(a.array_form, size=size)\n             if isinstance(a, Cycle):  # f\n-                return _af_new(a.list(size))\n+                perm = a.list(size)\n+                obj = Basic.__new__(cls, perm)\n+                obj._array_form = perm\n+                obj._size = len(perm)\n+                return obj\n             if not is_sequence(a):  # b\n-                return _af_new(list(range(a + 1)))\n+                perm = list(range(a + 1))\n+                obj = Basic.__new__(cls, perm)\n+                obj._array_form = perm\n+                obj._size = len(perm)\n+                return obj\n             if has_variety(is_sequence(ai) for ai in a):\n                 ok = False\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..e7c1ecd 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -168,19 +168,35 @@ class Permutation(Basic):\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            perm = list(range(size or 0))\n+            obj = Basic.__new__(cls, perm)\n+            obj._array_form = perm\n+            obj._size = len(perm)\n+            return obj\n         elif len(args) > 1:\n-            return _af_new(Cycle(*args).list(size))\n+            perm = Cycle(*args).list(size)\n+            obj = Basic.__new__(cls, perm)\n+            obj._array_form = perm\n+            obj._size = len(perm)\n+            return obj\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):\n                 if size is None or size == a.size:\n                     return a\n-                return Perm(a.array_form, size=size)\n+                return cls(a.array_form, size=size)\n             if isinstance(a, Cycle):\n-                return _af_new(a.list(size))\n+                perm = a.list(size)\n+                obj = Basic.__new__(cls, perm)\n+                obj._array_form = perm\n+                obj._size = len(perm)\n+                return obj\n             if not is_sequence(a):\n-                return _af_new(list(range(a + 1)))\n+                perm = list(range(a + 1))\n+                obj = Basic.__new__(cls, perm)\n+                obj._array_form = perm\n+                obj._size = len(perm)\n+                return obj\n             if has_variety((is_sequence(ai) for ai in a)):\n                 ok = False\n         else:\n", "normalized_occurrence": 1}
