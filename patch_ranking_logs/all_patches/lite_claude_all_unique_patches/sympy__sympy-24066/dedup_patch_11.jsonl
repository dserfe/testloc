{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..66cb681 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -395,6 +395,13 @@ class DimensionSystem(Basic, _QuantityMapper):\n                 raise TypeError(\"The exponent for the power operator must be a Symbol or dimensionless.\")\n \n         if dimension.name.is_Function:\n+            if dimension.name.func == exp:\n+                # For exponential function, argument must be dimensionless\n+                arg_dims = get_for_name(dimension.name.args[0])\n+                if arg_dims != {}:\n+                    raise TypeError(\"The argument of exp() must be dimensionless\")\n+                return {}\n+\n             args = (Dimension._from_dimensional_dependencies(\n                 get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..0ee77fb 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -225,6 +225,11 @@ class DimensionSystem(Basic, _QuantityMapper):\n             else:\n                 raise TypeError('The exponent for the power operator must be a Symbol or dimensionless.')\n         if dimension.name.is_Function:\n+            if dimension.name.func == exp:\n+                arg_dims = get_for_name(dimension.name.args[0])\n+                if arg_dims != {}:\n+                    raise TypeError('The argument of exp() must be dimensionless')\n+                return {}\n             args = (Dimension._from_dimensional_dependencies(get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n             dicts = [get_for_name(i) for i in dimension.name.args]\n", "normalized_occurrence": 1}
