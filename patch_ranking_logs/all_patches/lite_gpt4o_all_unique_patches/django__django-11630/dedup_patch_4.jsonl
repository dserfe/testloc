{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c5f3683..09f35d1 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -205,6 +205,8 @@ class Options:\n         # If the db_table wasn't provided, use the app_label + model_name.\n         if not self.db_table:\n             self.db_table = \"%s_%s\" % (self.app_label, self.model_name)\n+            if self.app_label and self.model_name:\n+                self.db_table = f\"{self.app_label}_{self.model_name}\"\n             self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n \n     def _format_names_with_class(self, cls, objs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbc5560..e6d4748 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -127,6 +127,8 @@ class Options:\n         del self.meta\n         if not self.db_table:\n             self.db_table = '%s_%s' % (self.app_label, self.model_name)\n+            if self.app_label and self.model_name:\n+                self.db_table = f'{self.app_label}_{self.model_name}'\n             self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n     def _format_names_with_class(self, cls, objs):\n         new_objs = []\n", "normalized_occurrence": 1}
