{"model_name_or_path": "agentless", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 4b9cb31..a95bdd6 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -35,6 +35,8 @@ class CheckConstraint(BaseConstraint):\n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model)\n         where = query.build_where(self.check)\n+        # Ensure that fully qualified field names are not used in the check SQL\n+        query.get_initial_alias = lambda: ''\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex cc6f0d3..f6a17e2 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -24,6 +24,7 @@ class CheckConstraint(BaseConstraint):\n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model)\n         where = query.build_where(self.check)\n+        query.get_initial_alias = lambda: ''\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n         return sql % tuple((schema_editor.quote_value(p) for p in params))\n", "normalized_occurrence": 1}
