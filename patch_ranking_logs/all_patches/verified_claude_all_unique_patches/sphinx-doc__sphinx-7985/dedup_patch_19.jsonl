{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..6804705 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,33 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if this is an internal reference\n+                if uri.startswith('#'):\n+                    # Fragment-only reference - check in current document\n+                    target = uri[1:]\n+                    if target in self.env.docname_unique_ids.get(docname, {}):\n+                        return 'working', '', 0\n+                    return 'broken', 'Missing target for internal reference', 0\n+                else:\n+                    # Cross-document reference - check if target document exists\n+                    if '#' in uri:\n+                        docname, target = uri.split('#', 1)\n+                    else:\n+                        docname, target = uri, ''\n+                    \n+                    # Clean up docname (remove .html, etc)\n+                    docname = docname.replace('.html', '')\n+                    docname = docname.strip('/')\n+                    \n+                    # Check if document exists\n+                    if docname not in self.env.all_docs:\n+                        return 'broken', 'Document not found', 0\n+                    \n+                    # If there's a target, check if it exists in that document\n+                    if target and target not in self.env.docname_unique_ids.get(docname, {}):\n+                        return 'broken', 'Target not found in document', 0\n+                        \n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..e21e60f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,23 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    target = uri[1:]\n+                    if target in self.env.docname_unique_ids.get(docname, {}):\n+                        return ('working', '', 0)\n+                    return ('broken', 'Missing target for internal reference', 0)\n+                else:\n+                    if '#' in uri:\n+                        docname, target = uri.split('#', 1)\n+                    else:\n+                        docname, target = (uri, '')\n+                    docname = docname.replace('.html', '')\n+                    docname = docname.strip('/')\n+                    if docname not in self.env.all_docs:\n+                        return ('broken', 'Document not found', 0)\n+                    if target and target not in self.env.docname_unique_ids.get(docname, {}):\n+                        return ('broken', 'Target not found in document', 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
