{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..1349a31 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -126,6 +126,11 @@ def apart(f, x=None, full=False, **options):\n             \"multivariate partial fraction decomposition\")\n \n     common, P, Q = P.cancel(Q)\n+    \n+    # Simplify the fraction before proceeding\n+    simplified_expr = (common * (P.as_expr() / Q.as_expr())).cancel()\n+    if simplified_expr != common * (P.as_expr() / Q.as_expr()):\n+        return apart(simplified_expr, x=x, full=full, **_options)\n \n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..f6aadae 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -60,6 +60,9 @@ def apart(f, x=None, full=False, **options):\n             return apart(fc, x=x, full=full, **_options)\n         raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n+    simplified_expr = (common * (P.as_expr() / Q.as_expr())).cancel()\n+    if simplified_expr != common * (P.as_expr() / Q.as_expr()):\n+        return apart(simplified_expr, x=x, full=full, **_options)\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n", "normalized_occurrence": 1}
