{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..fb915c5 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -625,6 +625,9 @@ def start_django(reloader, main_func, *args, **kwargs):\n     django_main_thread.start()\n \n     while not reloader.should_stop:\n+        # Ensure BASE_DIR and its subdirectories are watched\n+        base_dir = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+        reloader.watch_dir(base_dir, \"**/*\")\n         try:\n             reloader.run(django_main_thread)\n         except WatchmanUnavailable as ex:\n@@ -633,6 +636,7 @@ def start_django(reloader, main_func, *args, **kwargs):\n             reloader = StatReloader()\n             logger.error('Error connecting to Watchman: %s', ex)\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n+            reloader.watch_dir(base_dir, \"**/*\")\n \n \n def run_with_reloader(main_func, *args, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..c7f9ca8 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -406,12 +406,15 @@ def start_django(reloader, main_func, *args, **kwargs):\n     django_main_thread.daemon = True\n     django_main_thread.start()\n     while not reloader.should_stop:\n+        base_dir = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+        reloader.watch_dir(base_dir, '**/*')\n         try:\n             reloader.run(django_main_thread)\n         except WatchmanUnavailable as ex:\n             reloader = StatReloader()\n             logger.error('Error connecting to Watchman: %s', ex)\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n+            reloader.watch_dir(base_dir, '**/*')\n def run_with_reloader(main_func, *args, **kwargs):\n     signal.signal(signal.SIGTERM, lambda *args: sys.exit(0))\n     try:\n", "normalized_occurrence": 1}
