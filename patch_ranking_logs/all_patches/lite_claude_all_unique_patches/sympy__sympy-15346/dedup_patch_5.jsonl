{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex d9ef12f..7a810ca 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -636,9 +636,16 @@ class cos(TrigonometricFunction):\n             return None\n \n         if arg.is_Add:\n+            # First try peeling off pi terms\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n+            \n+            # Handle difference of rationals using the angle addition formula\n+            terms = arg.args\n+            if len(terms) == 2 and -terms[1] == terms[0].neg():\n+                # This is a difference a - b\n+                return cos(terms[0])*cos(terms[1]) + sin(terms[0])*sin(terms[1])\n \n         if isinstance(arg, acos):\n             return arg.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 9f9dff8..8776c93 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -377,6 +377,9 @@ class cos(TrigonometricFunction):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n+            terms = arg.args\n+            if len(terms) == 2 and -terms[1] == terms[0].neg():\n+                return cos(terms[0]) * cos(terms[1]) + sin(terms[0]) * sin(terms[1])\n         if isinstance(arg, acos):\n             return arg.args[0]\n         if isinstance(arg, atan):\n", "normalized_occurrence": 1}
