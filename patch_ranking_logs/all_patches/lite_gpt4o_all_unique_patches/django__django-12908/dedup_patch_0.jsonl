{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex ccac780..0098c4d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1001,7 +1001,10 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n-        return self._combinator_query('union', *other_qs, all=all)\n+        combined_qs = self._combinator_query('union', *other_qs, all=all)\n+        if self.query.distinct:\n+            combined_qs = combined_qs.distinct(*self.query.distinct_fields)\n+        return combined_qs\n \n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 23baba9..220c92d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -590,7 +590,10 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n-        return self._combinator_query('union', *other_qs, all=all)\n+        combined_qs = self._combinator_query('union', *other_qs, all=all)\n+        if self.query.distinct:\n+            combined_qs = combined_qs.distinct(*self.query.distinct_fields)\n+        return combined_qs\n     def intersection(self, *other_qs):\n         if isinstance(self, EmptyQuerySet):\n             return self\n", "normalized_occurrence": 1}
