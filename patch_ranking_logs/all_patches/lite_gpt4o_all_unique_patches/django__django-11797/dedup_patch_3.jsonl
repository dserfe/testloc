{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..2c8ef78 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -109,8 +109,13 @@ class SQLCompiler:\n         # having into the select in any case.\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            if self.query.group_by is True:\n+                for col in cols:\n+                    expressions.append(col)\n+            else:\n+                for col in cols:\n+                    if col not in expressions:\n+                        expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..d0ce8d1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -47,8 +47,13 @@ class SQLCompiler:\n                     expressions.append(expr)\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            if self.query.group_by is True:\n+                for col in cols:\n+                    expressions.append(col)\n+            else:\n+                for col in cols:\n+                    if col not in expressions:\n+                        expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             if not expr.contains_aggregate and (not is_ref):\n                 expressions.extend(expr.get_source_expressions())\n", "normalized_occurrence": 1}
