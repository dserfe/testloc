{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d7bf75e..e2210ba 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -528,6 +528,24 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def migration_name_fragment(self):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, self.__class__) and\n+            self.name_lower == operation.name_lower and\n+            self.option_name == operation.option_name\n+        ):\n+            # If first operation removes all constraints (empty set)\n+            # and second operation sets new constraints, combine them\n+            if self.option_value == set() and operation.option_value:\n+                return [\n+                    self.__class__(\n+                        name=self.name,\n+                        **{self.option_name: operation.option_value}\n+                    )\n+                ]\n+            return None\n+        return super().reduce(operation, app_label)\n+\n \n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower and (self.option_name == operation.option_name):\n+            if self.option_value == set() and operation.option_value:\n+                return [self.__class__(name=self.name, **{self.option_name: operation.option_value})]\n+            return None\n+        return super().reduce(operation, app_label)", "normalized_occurrence": 1}
