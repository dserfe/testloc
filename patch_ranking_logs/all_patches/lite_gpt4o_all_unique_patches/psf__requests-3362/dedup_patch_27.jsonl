{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..e8f04a5 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -651,6 +651,7 @@ class Response(object):\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n+        import codecs  # Importing codecs module to use incremental decoder\n         \"\"\"Iterates over the response data.  When stream=True is set on the\n         request, this avoids reading the content at once into memory for\n         large responses.  The chunk size is the number of bytes it should\n@@ -695,7 +696,7 @@ class Response(object):\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+            chunks = (chunk.decode(self.encoding or 'utf-8') for chunk in chunks)\n \n         return chunks\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..0c8128d 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -334,6 +334,7 @@ class Response(object):\n     def apparent_encoding(self):\n         return chardet.detect(self.content)['encoding']\n     def iter_content(self, chunk_size=1, decode_unicode=False):\n+        import codecs\n         def generate():\n             if hasattr(self.raw, 'stream'):\n                 try:\n@@ -360,7 +361,7 @@ class Response(object):\n         stream_chunks = generate()\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+            chunks = (chunk.decode(self.encoding or 'utf-8') for chunk in chunks)\n         return chunks\n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         pending = None\n", "normalized_occurrence": 1}
