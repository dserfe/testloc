{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ac042d4..099c951 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -235,6 +235,11 @@ class BaseExpression:\n           Where `sql` is a string containing ordered sql parameters to be\n           replaced with the elements of the list `params`.\n         \"\"\"\n+        if self.contains_over_clause and any(expr.contains_aggregate for expr in self.get_source_expressions()):\n+            raise NotImplementedError(\n+                \"PostgreSQL does not allow aggregate functions to contain window function calls. \"\n+                \"Modify your query to avoid using window functions within aggregates.\"\n+            )\n         raise NotImplementedError(\"Subclasses must implement as_sql()\")\n \n     @cached_property\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex bd0f587..ac4f37b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -120,6 +120,8 @@ class BaseExpression:\n     def _parse_expressions(self, *expressions):\n         return [arg if hasattr(arg, 'resolve_expression') else F(arg) if isinstance(arg, str) else Value(arg) for arg in expressions]\n     def as_sql(self, compiler, connection):\n+        if self.contains_over_clause and any((expr.contains_aggregate for expr in self.get_source_expressions())):\n+            raise NotImplementedError('PostgreSQL does not allow aggregate functions to contain window function calls. Modify your query to avoid using window functions within aggregates.')\n         raise NotImplementedError('Subclasses must implement as_sql()')\n     @cached_property\n     def contains_aggregate(self):\n", "normalized_occurrence": 1}
