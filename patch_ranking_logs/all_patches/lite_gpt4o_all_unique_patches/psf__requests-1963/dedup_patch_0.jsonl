{"model_name_or_path": "agentless", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..081a7eb 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -99,7 +99,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n+            method = prepared_request.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..34321e9 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -36,13 +36,13 @@ class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n             resp.close()\n             url = resp.headers['location']\n-            method = req.method\n+            method = prepared_request.method\n             if url.startswith('//'):\n                 parsed_rurl = urlparse(resp.url)\n                 url = '%s:%s' % (parsed_rurl.scheme, url)\n", "normalized_occurrence": 2}
