{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..54a8fd9 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1545,11 +1545,30 @@ class LogNorm(Normalize):\n \n     def autoscale(self, A):\n         # docstring inherited.\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            # If everything is masked out, make vmin and vmax 1\n+            self.vmin = self.vmax = 1\n+        else:\n+            super().autoscale(A)\n \n     def autoscale_None(self, A):\n         # docstring inherited.\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask is not np.ma.nomask and A.mask.all():\n+            # If everything is masked out, make vmin and vmax 1\n+            self.vmin = self.vmax = 1\n+        else:\n+            super().autoscale_None(A)\n+\n+    def __call__(self, value, clip=None):\n+        if self.vmin is not None and self.vmax is not None:\n+            if self.vmin <= 0 or self.vmax <= 0:\n+                raise ValueError(\n+                    \"LogNorm cannot handle values less than or equal to 0; \"\n+                    \"vmin and vmax must be positive\"\n+                )\n+        return super().__call__(value, clip)\n \n \n @_make_norm_from_scale(\n", "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..1078b19 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1330,10 +1330,24 @@ class LogNorm(Normalize):\n     \"\"\"Normalize a given value to the 0-1 range on a log scale.\"\"\"\n \n     def autoscale(self, A):\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            self.vmin = self.vmax = 1\n+        else:\n+            super().autoscale(A)\n \n     def autoscale_None(self, A):\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask is not np.ma.nomask and A.mask.all():\n+            self.vmin = self.vmax = 1\n+        else:\n+            super().autoscale_None(A)\n+\n+    def __call__(self, value, clip=None):\n+        if self.vmin is not None and self.vmax is not None:\n+            if self.vmin <= 0 or self.vmax <= 0:\n+                raise ValueError('LogNorm cannot handle values less than or equal to 0; vmin and vmax must be positive')\n+        return super().__call__(value, clip)\n \n @_make_norm_from_scale(scale.SymmetricalLogScale, init=lambda linthresh, linscale=1.0, vmin=None, vmax=None, clip=False, *, base=10: None)\n class SymLogNorm(Normalize):\n", "normalized_occurrence": 1}
