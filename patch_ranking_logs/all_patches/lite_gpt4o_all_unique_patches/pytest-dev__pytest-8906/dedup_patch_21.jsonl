{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..b22a355 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -139,11 +139,27 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n+\n+    .. hint::\n+        To skip an entire module, use the `allow_module_level` flag or the\n+        new `skip_module` function provided by pytest.\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function is a convenience wrapper around `skip` with\n+    `allow_module_level=True`.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..22991ec 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -97,10 +97,25 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n+\n+    .. hint::\n+        To skip an entire module, use the `allow_module_level` flag or the\n+        new `skip_module` function provided by pytest.\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function is a convenience wrapper around `skip` with\n+    `allow_module_level=True`.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n @_with_exception(Failed)\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n", "normalized_occurrence": 1}
