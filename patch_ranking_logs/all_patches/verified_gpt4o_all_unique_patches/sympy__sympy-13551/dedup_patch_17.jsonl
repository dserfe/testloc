{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..7e58243 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -274,7 +274,12 @@ class Product(ExprWithIntLimits):\n \n             return poly.LC()**(n - a + 1) * A * B\n \n-        elif term.is_Add:\n+        elif term.is_Add and term.has(Pow):\n+            from sympy.functions.special.q_functions import q_pochhammer\n+            if term.as_coeff_add()[1][0].is_Pow:\n+                base, exp = term.as_coeff_add()[1][0].as_base_exp()\n+                if base == 2 and exp == -k:\n+                    return (2*q_pochhammer(2, 1/2, n) / q_pochhammer(2, 1/2, 1)).simplify()\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..1d2993e 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -74,7 +74,12 @@ class Product(ExprWithIntLimits):\n                 arg = quo(poly, Q.as_poly(k))\n                 B = self.func(arg, (k, a, n)).doit()\n             return poly.LC() ** (n - a + 1) * A * B\n-        elif term.is_Add:\n+        elif term.is_Add and term.has(Pow):\n+            from sympy.functions.special.q_functions import q_pochhammer\n+            if term.as_coeff_add()[1][0].is_Pow:\n+                base, exp = term.as_coeff_add()[1][0].as_base_exp()\n+                if base == 2 and exp == -k:\n+                    return (2 * q_pochhammer(2, 1 / 2, n) / q_pochhammer(2, 1 / 2, 1)).simplify()\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "normalized_occurrence": 1}
