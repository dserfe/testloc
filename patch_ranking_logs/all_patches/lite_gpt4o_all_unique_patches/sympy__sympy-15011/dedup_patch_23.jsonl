{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..d410c2b 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -695,6 +695,11 @@ class _EvaluatorPrinter(object):\n     else:\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n \n+        @classmethod\n+        def _is_safe_ident(cls, ident):\n+            return isinstance(ident, str) and cls._safe_ident_re.match(ident) \\\n+                and not (keyword.iskeyword(ident) or ident == 'None' or '{' in ident or '}' in ident)\n+\n         @classmethod\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) \\\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..a21b356 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -279,6 +279,9 @@ class _EvaluatorPrinter(object):\n     else:\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n         @classmethod\n+        def _is_safe_ident(cls, ident):\n+            return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None' or '{' in ident or ('}' in ident)))\n+        @classmethod\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n", "normalized_occurrence": 1}
