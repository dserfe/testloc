{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..dffa810 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -277,7 +277,7 @@ class BaseReloader:\n         path = Path(path)\n         try:\n             path = path.absolute()\n-        except FileNotFoundError:\n+        except (FileNotFoundError, NotADirectoryError):\n             logger.debug(\n                 'Unable to watch directory %s as it cannot be resolved.',\n                 path,\n@@ -293,7 +293,11 @@ class BaseReloader:\n         files within globs.\n         \"\"\"\n         yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        for dir_path in self.extra_files:\n+            if os.path.isdir(dir_path):\n+                yield from Path(dir_path).rglob('*')\n+            else:\n+                yield dir_path\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..57dc4d7 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -174,14 +174,18 @@ class BaseReloader:\n         path = Path(path)\n         try:\n             path = path.absolute()\n-        except FileNotFoundError:\n+        except (FileNotFoundError, NotADirectoryError):\n             logger.debug('Unable to watch directory %s as it cannot be resolved.', path, exc_info=True)\n             return\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n         self.directory_globs[path].add(glob)\n     def watched_files(self, include_globs=True):\n         yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        for dir_path in self.extra_files:\n+            if os.path.isdir(dir_path):\n+                yield from Path(dir_path).rglob('*')\n+            else:\n+                yield dir_path\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "normalized_occurrence": 1}
