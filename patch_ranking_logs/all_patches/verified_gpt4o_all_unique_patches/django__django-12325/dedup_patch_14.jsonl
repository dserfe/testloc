{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..7343a0f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -200,11 +200,15 @@ class ModelBase(type):\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n-            for field in base._meta.local_fields:\n+            # Locate OneToOneField instances and prioritize parent_link=True fields.\n+            for field in sorted(base._meta.local_fields, key=lambda f: isinstance(f, OneToOneField) and not f.parent_link):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    if field.parent_link:\n+                        # Ensure parent_link fields are processed first\n+                        parent_links[make_model_tuple(related)] = field\n+                    elif make_model_tuple(related) not in parent_links:\n+                        parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..0bf99ef 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -104,10 +104,13 @@ class ModelBase(type):\n                 continue\n             if base != new_class and (not base._meta.abstract):\n                 continue\n-            for field in base._meta.local_fields:\n+            for field in sorted(base._meta.local_fields, key=lambda f: isinstance(f, OneToOneField) and (not f.parent_link)):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    if field.parent_link:\n+                        parent_links[make_model_tuple(related)] = field\n+                    elif make_model_tuple(related) not in parent_links:\n+                        parent_links[make_model_tuple(related)] = field\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n", "normalized_occurrence": 1}
