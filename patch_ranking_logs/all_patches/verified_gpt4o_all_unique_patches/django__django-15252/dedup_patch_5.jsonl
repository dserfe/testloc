{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..2259696 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -62,8 +62,12 @@ class MigrationRecorder:\n         # in the codebase.\n         if self.has_table():\n             return\n-        # Make the table\n+        # Check if migration is allowed for this connection\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         try:\n+            # Make the table\n             with self.connection.schema_editor() as editor:\n                 editor.create_model(self.Migration)\n         except DatabaseError as exc:\n@@ -84,13 +88,19 @@ class MigrationRecorder:\n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n         self.ensure_schema()\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n         self.ensure_schema()\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..c74fb3c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -32,6 +32,9 @@ class MigrationRecorder:\n     def ensure_schema(self):\n         if self.has_table():\n             return\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         try:\n             with self.connection.schema_editor() as editor:\n                 editor.create_model(self.Migration)\n@@ -44,9 +47,15 @@ class MigrationRecorder:\n             return {}\n     def record_applied(self, app, name):\n         self.ensure_schema()\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         self.migration_qs.create(app=app, name=name)\n     def record_unapplied(self, app, name):\n         self.ensure_schema()\n+        for db_router in settings.DATABASE_ROUTERS:\n+            if not db_router.allow_migrate(self.connection.alias, self.Migration):\n+                return\n         self.migration_qs.filter(app=app, name=name).delete()\n     def flush(self):\n         self.migration_qs.all().delete()\n\\ No newline at end of file\n", "normalized_occurrence": 1}
