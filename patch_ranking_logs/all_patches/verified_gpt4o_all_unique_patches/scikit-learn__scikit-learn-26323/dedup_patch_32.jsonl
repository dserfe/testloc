{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..d0c8d8a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -296,7 +296,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         transformers = (\n             trans\n             for _, trans, _ in chain(\n-                self.transformers, getattr(self, \"transformers_\", [])\n+                self.transformers, getattr(self, \"transformers_\", []), [self._remainder]\n             )\n             if trans not in {\"passthrough\", \"drop\"}\n         )\n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..adbd095 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -44,7 +44,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             self.transformers = value\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n-        transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n+        transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', []), [self._remainder]) if trans not in {'passthrough', 'drop'})\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n         return self\n", "normalized_occurrence": 2}
