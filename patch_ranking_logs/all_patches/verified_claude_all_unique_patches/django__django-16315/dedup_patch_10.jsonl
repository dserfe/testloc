{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16315", "model_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 7b1b714..54d30b6 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,16 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            # Get the actual column names from the fields\n+            field_map = {f.name: f.column for f in fields}\n+            quoted_unique = [self.quote_name(field_map.get(f, f)) for f in unique_fields]\n+            quoted_update = [self.quote_name(field_map.get(f, f)) for f in update_fields]\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(quoted_unique),\n                 \", \".join(\n                     [\n                         f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        for field in quoted_update\n                     ]\n                 ),\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 75da682..649e063 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -186,5 +186,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return 'ON CONFLICT DO NOTHING'\n         if on_conflict == OnConflict.UPDATE:\n-            return 'ON CONFLICT(%s) DO UPDATE SET %s' % (', '.join(map(self.quote_name, unique_fields)), ', '.join([f'{field} = EXCLUDED.{field}' for field in map(self.quote_name, update_fields)]))\n+            field_map = {f.name: f.column for f in fields}\n+            quoted_unique = [self.quote_name(field_map.get(f, f)) for f in unique_fields]\n+            quoted_update = [self.quote_name(field_map.get(f, f)) for f in update_fields]\n+            return 'ON CONFLICT(%s) DO UPDATE SET %s' % (', '.join(quoted_unique), ', '.join([f'{field} = EXCLUDED.{field}' for field in quoted_update]))\n         return super().on_conflict_suffix_sql(fields, on_conflict, update_fields, unique_fields)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
