{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..7f555d7 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,25 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set locators and formatters as before\n+                axis.set_major_locator(mpl.category.StrCategoryLocator({}))\n+                axis.set_major_formatter(mpl.category.StrCategoryFormatter({}))\n+                \n+                # Disable grid\n+                if axis.axis_name == \"x\":\n+                    axis.axes.xaxis.grid(False)\n+                else:\n+                    axis.axes.yaxis.grid(False)\n+                \n+                # Set limits to +/- 0.5 from data range\n+                if isinstance(axis, PseudoAxis):\n+                    return\n+                \n+                if axis.axis_name == \"x\":\n+                    axis.axes.set_xlim(-0.5, len(units_seed) - 0.5)\n+                else:\n+                    # For y-axis, set inverted limits\n+                    axis.axes.set_ylim(len(units_seed) - 0.5, -0.5)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..e29b794 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,7 +90,18 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                axis.set_major_locator(mpl.category.StrCategoryLocator({}))\n+                axis.set_major_formatter(mpl.category.StrCategoryFormatter({}))\n+                if axis.axis_name == 'x':\n+                    axis.axes.xaxis.grid(False)\n+                else:\n+                    axis.axes.yaxis.grid(False)\n+                if isinstance(axis, PseudoAxis):\n+                    return\n+                if axis.axis_name == 'x':\n+                    axis.axes.set_xlim(-0.5, len(units_seed) - 0.5)\n+                else:\n+                    axis.axes.set_ylim(len(units_seed) - 0.5, -0.5)\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n", "normalized_occurrence": 1}
