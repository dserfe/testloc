{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..13f2b6a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,14 +100,27 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n-            imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+        module_path = path\n+        # Find the first occurrence of models.py in the path\n+        model_module = None\n+        parts = path.split('.')\n+        for i, part in enumerate(parts):\n+            if 'models' in part:\n+                model_module = '.'.join(parts[:i+1])\n+                name = '.'.join(parts[i+1:])\n+                break\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n-        return name, imports\n+            module, name = path.rsplit(\".\", 1)\n+            if module == \"django.db.models\":\n+                imports = {\"from django.db import models\"}\n+                name = \"models.%s\" % name\n+                return name, imports\n+            else:\n+                imports = {\"import %s\" % module}\n+                return path, imports\n+\n+        imports = {\"import %s\" % model_module}\n+        return module_path, imports\n \n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..613d27a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,14 +70,25 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n-            imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+        module_path = path\n+        model_module = None\n+        parts = path.split('.')\n+        for i, part in enumerate(parts):\n+            if 'models' in part:\n+                model_module = '.'.join(parts[:i + 1])\n+                name = '.'.join(parts[i + 1:])\n+                break\n         else:\n-            imports = {'import %s' % module}\n-            name = path\n-        return (name, imports)\n+            module, name = path.rsplit('.', 1)\n+            if module == 'django.db.models':\n+                imports = {'from django.db import models'}\n+                name = 'models.%s' % name\n+                return (name, imports)\n+            else:\n+                imports = {'import %s' % module}\n+                return (path, imports)\n+        imports = {'import %s' % model_module}\n+        return (module_path, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n class DictionarySerializer(BaseSerializer):\n", "normalized_occurrence": 1}
