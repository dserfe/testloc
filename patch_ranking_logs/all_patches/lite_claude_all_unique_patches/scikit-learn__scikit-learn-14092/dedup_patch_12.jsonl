{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..37cd926 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,7 +972,21 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n+    if isinstance(target_type, tuple):\n+        type_check = any(isinstance(x, t) for t in target_type)\n+    else:\n+        type_check = isinstance(x, target_type)\n+\n+    if not type_check:\n+        # Special handling for float and int parameters\n+        if target_type == float and isinstance(x, (int, float, np.number)):\n+            x = float(x)\n+            type_check = True\n+        elif target_type == int and isinstance(x, (int, np.integer)):\n+            x = int(x)\n+            type_check = True\n+            \n+    if not type_check:\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n                         .format(name, target_type, type(x)))\n \n@@ -980,4 +994,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..36cc1ca 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,18 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    if isinstance(target_type, tuple):\n+        type_check = any((isinstance(x, t) for t in target_type))\n+    else:\n+        type_check = isinstance(x, target_type)\n+    if not type_check:\n+        if target_type == float and isinstance(x, (int, float, np.number)):\n+            x = float(x)\n+            type_check = True\n+        elif target_type == int and isinstance(x, (int, np.integer)):\n+            x = int(x)\n+            type_check = True\n+    if not type_check:\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
