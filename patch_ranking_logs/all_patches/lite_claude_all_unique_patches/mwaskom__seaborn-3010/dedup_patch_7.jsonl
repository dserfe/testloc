{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3010", "model_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex a346227..69faeb3 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -23,12 +23,18 @@ class PolyFit(Stat):\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n-        if x.nunique() <= self.order:\n+        \n+        # Filter out missing values\n+        mask = pd.notna(x) & pd.notna(y)\n+        x_clean = x[mask]\n+        y_clean = y[mask]\n+        \n+        if x_clean.nunique() <= self.order:\n             # TODO warn?\n             xx = yy = []\n         else:\n-            p = np.polyfit(x, y, self.order)\n-            xx = np.linspace(x.min(), x.max(), self.gridsize)\n+            p = np.polyfit(x_clean, y_clean, self.order)\n+            xx = np.linspace(x_clean.min(), x_clean.max(), self.gridsize)\n             yy = np.polyval(p, xx)\n \n         return pd.DataFrame(dict(x=xx, y=yy))\n", "occurrence": 8, "normalized_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex c25e7bb..6b99384 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -10,11 +10,14 @@ class PolyFit(Stat):\n     def _fit_predict(self, data):\n         x = data['x']\n         y = data['y']\n-        if x.nunique() <= self.order:\n+        mask = pd.notna(x) & pd.notna(y)\n+        x_clean = x[mask]\n+        y_clean = y[mask]\n+        if x_clean.nunique() <= self.order:\n             xx = yy = []\n         else:\n-            p = np.polyfit(x, y, self.order)\n-            xx = np.linspace(x.min(), x.max(), self.gridsize)\n+            p = np.polyfit(x_clean, y_clean, self.order)\n+            xx = np.linspace(x_clean.min(), x_clean.max(), self.gridsize)\n             yy = np.polyval(p, xx)\n         return pd.DataFrame(dict(x=xx, y=yy))\n     def __call__(self, data, groupby, orient, scales):\n", "normalized_occurrence": 8}
