{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13142", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a853e4a..5a5f6f0 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n \n-        # Always do a final e-step to guarantee that the labels returned by\n-        # fit_predict(X) are always consistent with fit(X).predict(X)\n-        # for any value of max_iter and tol (and any random_state).\n-        _, log_resp = self._e_step(X)\n-\n         if not self.converged_:\n             warnings.warn('Initialization %d did not converge. '\n                           'Try different init parameters, '\n@@ -273,7 +268,8 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n \n-        return log_resp.argmax(axis=1)\n+        # Use the same method as predict() to ensure consistency\n+        return self._estimate_weighted_log_prob(X).argmax(axis=1)\n \n     def _e_step(self, X):\n         \"\"\"E step.\n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 9518b16..70e7e42 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -93,13 +93,12 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                 max_lower_bound = lower_bound\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n-        _, log_resp = self._e_step(X)\n         if not self.converged_:\n             warnings.warn('Initialization %d did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.' % (init + 1), ConvergenceWarning)\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n-        return log_resp.argmax(axis=1)\n+        return self._estimate_weighted_log_prob(X).argmax(axis=1)\n     def _e_step(self, X):\n         log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n         return (np.mean(log_prob_norm), log_resp)\n", "normalized_occurrence": 3}
