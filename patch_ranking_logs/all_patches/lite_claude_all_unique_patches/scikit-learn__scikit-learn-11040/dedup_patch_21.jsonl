{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..e04ecaf 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -106,7 +106,11 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     def __init__(self, n_neighbors=None, radius=None,\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n-\n+        \n+        if n_neighbors is not None and not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\n+                'n_neighbors does not take float values, enter integer value')\n+        \n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -281,6 +285,10 @@ class KNeighborsMixin(object):\n                 or (n_query, n_indexed) if metric == 'precomputed'\n             The query point or points.\n             If not provided, neighbors of each indexed point are returned.\n+            \n+        n_neighbors : int\n+            Number of neighbors to get. If not provided, the value passed\n+            to the constructor is used.\n             In this case, the query point is not considered its own neighbor.\n \n         n_neighbors : int\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..7828ec4 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,6 +47,8 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n+        if n_neighbors is not None and (not isinstance(n_neighbors, (int, np.integer))):\n+            raise TypeError('n_neighbors does not take float values, enter integer value')\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n", "normalized_occurrence": 5}
