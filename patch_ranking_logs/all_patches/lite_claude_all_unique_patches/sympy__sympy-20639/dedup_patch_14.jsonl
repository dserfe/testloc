{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20639", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex e081a4e..ed833af 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1949,15 +1949,17 @@ class PrettyPrinter(Printer):\n \n     def _print_Pow(self, power):\n         from sympy.simplify.simplify import fraction\n+        from sympy import Rational\n         b, e = power.as_base_exp()\n         if power.is_commutative:\n             if e is S.NegativeOne:\n                 return prettyForm(\"1\")/self._print(b)\n-            n, d = fraction(e)\n-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n-                return self._print_nth_root(b, e)\n-            if e.is_Rational and e < 0:\n-                return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n+            if isinstance(e, Rational):\n+                n, d = fraction(e)\n+                if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n+                    return self._print_nth_root(b, e)\n+                if e < 0:\n+                    return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n \n         if b.is_Relational:\n             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex ae897b9..610af3e 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1403,15 +1403,17 @@ class PrettyPrinter(Printer):\n         return s\n     def _print_Pow(self, power):\n         from sympy.simplify.simplify import fraction\n+        from sympy import Rational\n         b, e = power.as_base_exp()\n         if power.is_commutative:\n             if e is S.NegativeOne:\n                 return prettyForm('1') / self._print(b)\n-            n, d = fraction(e)\n-            if n is S.One and d.is_Atom and (not e.is_Integer) and self._settings['root_notation']:\n-                return self._print_nth_root(b, e)\n-            if e.is_Rational and e < 0:\n-                return prettyForm('1') / self._print(Pow(b, -e, evaluate=False))\n+            if isinstance(e, Rational):\n+                n, d = fraction(e)\n+                if n is S.One and d.is_Atom and (not e.is_Integer) and self._settings['root_notation']:\n+                    return self._print_nth_root(b, e)\n+                if e < 0:\n+                    return prettyForm('1') / self._print(Pow(b, -e, evaluate=False))\n         if b.is_Relational:\n             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))\n         return self._print(b) ** self._print(e)\n", "normalized_occurrence": 1}
