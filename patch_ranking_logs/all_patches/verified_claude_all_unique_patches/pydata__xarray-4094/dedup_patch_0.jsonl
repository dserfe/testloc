{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..0875bb9 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1964,7 +1964,7 @@ class DataArray(AbstractArray, DataWithCoords):\n             data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n \n         # unstacked dataset\n-        return Dataset(data_dict)\n+        return Dataset(data_dict, coords=self.coords.to_dataset().drop_vars([dim]))\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..b9b18c2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -535,7 +535,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         data_dict = {}\n         for k in variables:\n             data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-        return Dataset(data_dict)\n+        return Dataset(data_dict, coords=self.coords.to_dataset().drop_vars([dim]))\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n             dims = tuple(utils.infix_dims(dims, self.dims))\n", "normalized_occurrence": 1}
