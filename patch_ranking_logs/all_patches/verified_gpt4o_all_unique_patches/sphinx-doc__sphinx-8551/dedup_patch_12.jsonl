{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..68f57bd 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,7 +78,7 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n@@ -95,7 +95,7 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n-def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -1298,6 +1298,11 @@ class PythonDomain(Domain):\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n+        # Prioritize exact matches in the current module context\n+        exact_matches = [match for match in matches if match[0] == target]\n+        if exact_matches:\n+            matches = exact_matches\n+\n         if not matches and type == 'attr':\n             # fallback to meth (for property)\n             matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..263c1d1 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -34,7 +34,7 @@ py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n-def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment) -> addnodes.pending_xref:\n     if text == 'None':\n         reftype = 'obj'\n     else:\n@@ -44,7 +44,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         kwargs = {}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n-def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n@@ -784,6 +784,9 @@ class PythonDomain(Domain):\n         clsname = node.get('py:class')\n         searchmode = 1 if node.hasattr('refspecific') else 0\n         matches = self.find_obj(env, modname, clsname, target, type, searchmode)\n+        exact_matches = [match for match in matches if match[0] == target]\n+        if exact_matches:\n+            matches = exact_matches\n         if not matches and type == 'attr':\n             matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n         if not matches:\n", "normalized_occurrence": 1}
