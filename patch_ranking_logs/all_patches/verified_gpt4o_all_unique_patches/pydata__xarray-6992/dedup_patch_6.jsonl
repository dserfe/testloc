{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..515c9f5 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,12 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        data_vars = [\n+            key\n+            for key in self._dataset._variables\n+            if key not in self._dataset._coord_names\n+        ]\n+        return len(data_vars)\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex fa0ec48..1bb0271 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -163,7 +163,8 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     def __iter__(self) -> Iterator[Hashable]:\n         return (key for key in self._dataset._variables if key not in self._dataset._coord_names)\n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        data_vars = [key for key in self._dataset._variables if key not in self._dataset._coord_names]\n+        return len(data_vars)\n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n     def __getitem__(self, key: Hashable) -> DataArray:\n", "normalized_occurrence": 1}
