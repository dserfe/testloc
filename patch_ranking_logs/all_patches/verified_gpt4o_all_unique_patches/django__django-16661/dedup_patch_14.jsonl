{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..980f361 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -491,6 +491,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 valid_lookups.add(filter_item)\n \n         # Is it a valid relational lookup?\n+        # Special case for foreign keys that are also primary keys\n+        if any(f.name == part and f.remote_field and f.primary_key for f in model._meta.get_fields()):\n+            relation_parts.pop()\n         return not {\n             LOOKUP_SEP.join(relation_parts),\n             LOOKUP_SEP.join(relation_parts + [part]),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 061e1b9..1ce3a88 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -221,6 +221,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 valid_lookups.add(filter_item[0])\n             else:\n                 valid_lookups.add(filter_item)\n+        if any((f.name == part and f.remote_field and f.primary_key for f in model._meta.get_fields())):\n+            relation_parts.pop()\n         return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)\n     def to_field_allowed(self, request, to_field):\n         try:\n", "normalized_occurrence": 1}
