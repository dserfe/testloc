{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..f47f82f 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -60,10 +60,27 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n \n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            obj = Q()\n+            clauses = [self, other]\n+            for clause in clauses:\n+                if clause.connector == self.XOR:\n+                    for child in clause.children:\n+                        if child in obj.children:\n+                            obj.children.remove(child)\n+                        else:\n+                            obj.children.append(child)\n+                else:\n+                    if clause in obj.children:\n+                        obj.children.remove(clause)\n+                    else:\n+                        obj.children.append(clause)\n+            return obj\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n \n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..520e601 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,10 +27,26 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            obj = Q()\n+            clauses = [self, other]\n+            for clause in clauses:\n+                if clause.connector == self.XOR:\n+                    for child in clause.children:\n+                        if child in obj.children:\n+                            obj.children.remove(child)\n+                        else:\n+                            obj.children.append(child)\n+                elif clause in obj.children:\n+                    obj.children.remove(clause)\n+                else:\n+                    obj.children.append(clause)\n+            return obj\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n", "normalized_occurrence": 1}
