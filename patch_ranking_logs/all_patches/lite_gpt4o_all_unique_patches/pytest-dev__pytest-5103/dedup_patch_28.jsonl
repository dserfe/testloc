{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..e313035 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,60 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        \n+        def is_builtin_all_any(node):\n+            return isinstance(node, ast.Name) and node.id in {\"all\", \"any\"}\n+\n+        if is_builtin_all_any(call.func):\n+            assert_name = call.func.id\n+            predicate_func = call.args[0]\n+            iterable = call.args[1]\n+\n+            # Create loop to unroll the iterable\n+            loop_body = [\n+                ast.If(\n+                    test=ast.UnaryOp(\n+                        op=ast.Not(),\n+                        operand=predicate_func.func(\n+                            *predicate_func.args,\n+                            **{kw.arg: kw.value for kw in predicate_func.keywords}\n+                        ),\n+                    ),\n+                    body=[\n+                        ast.Raise(\n+                            exc=ast.Call(\n+                                func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                                args=[\n+                                    ast.BinOp(\n+                                        left=ast.Str(s=f\"Failed {assert_name}() assertion for item: \"),\n+                                        op=ast.Add(),\n+                                        right=ast.Call(\n+                                            func=ast.Name(id='repr', ctx=ast.Load()),\n+                                            args=[predicate_func.args[0]],\n+                                            keywords=[]\n+                                        )\n+                                    )\n+                                ],\n+                                keywords=[]\n+                            ),\n+                            cause=None\n+                        )\n+                    ],\n+                    orelse=[]\n+                )\n+            ]\n+\n+            loop = ast.For(\n+                target=predicate_func.args[0],\n+                iter=iterable,\n+                body=loop_body,\n+                orelse=[]\n+            )\n+\n+            self.statements.append(loop)\n+            return self.assign(ast.NameConstant(True)), self.explanation_param(ast.Str(f\"{assert_name}()\"))\n+\n+        # If not \"all\" or \"any\", the default behavior\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -1081,4 +1135,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..849791b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,16 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        def is_builtin_all_any(node):\n+            return isinstance(node, ast.Name) and node.id in {'all', 'any'}\n+        if is_builtin_all_any(call.func):\n+            assert_name = call.func.id\n+            predicate_func = call.args[0]\n+            iterable = call.args[1]\n+            loop_body = [ast.If(test=ast.UnaryOp(op=ast.Not(), operand=predicate_func.func(*predicate_func.args, **{kw.arg: kw.value for kw in predicate_func.keywords})), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.BinOp(left=ast.Str(s=f'Failed {assert_name}() assertion for item: '), op=ast.Add(), right=ast.Call(func=ast.Name(id='repr', ctx=ast.Load()), args=[predicate_func.args[0]], keywords=[]))], keywords=[]), cause=None)], orelse=[])]\n+            loop = ast.For(target=predicate_func.args[0], iter=iterable, body=loop_body, orelse=[])\n+            self.statements.append(loop)\n+            return (self.assign(ast.NameConstant(True)), self.explanation_param(ast.Str(f'{assert_name}()')))\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
