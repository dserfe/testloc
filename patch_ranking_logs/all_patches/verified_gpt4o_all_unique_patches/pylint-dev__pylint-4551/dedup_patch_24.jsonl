{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..50f7cbb 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -169,7 +169,31 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n         # resolve implemented interface\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+\n+    def visit_arguments(self, node):\n+        \"\"\"visit an astroid.Arguments node\n+\n+        handle type hints for function arguments\n+        \"\"\"\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+\n+    def _handle_argtype(self, func, argname, argtype):\n+        \"\"\"Handle function argument types.\"\"\"\n+        frame = func\n+        if hasattr(frame, \"locals_type\"):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             node.implements = ()\n \n     def visit_functiondef(self, node):\n@@ -220,7 +244,31 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             current = frame.locals_type[node.name]\n             values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+\n+    def visit_arguments(self, node):\n+        \"\"\"visit an astroid.Arguments node\n+\n+        handle type hints for function arguments\n+        \"\"\"\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+\n+    def _handle_argtype(self, func, argname, argtype):\n+        \"\"\"Handle function argument types.\"\"\"\n+        frame = func\n+        if hasattr(frame, \"locals_type\"):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             pass\n \n     @staticmethod\n@@ -233,7 +281,31 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             values = set(node.infer())\n             current = set(parent.instance_attrs_type[node.attrname])\n             parent.instance_attrs_type[node.attrname] = list(current | values)\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+\n+    def visit_arguments(self, node):\n+        \"\"\"visit an astroid.Arguments node\n+\n+        handle type hints for function arguments\n+        \"\"\"\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+\n+    def _handle_argtype(self, func, argname, argtype):\n+        \"\"\"Handle function argument types.\"\"\"\n+        frame = func\n+        if hasattr(frame, \"locals_type\"):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             pass\n \n     def visit_import(self, node):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..cf07e1a 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -81,7 +81,23 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                     self.handle_assignattr_type(assignattr, node)\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+    def visit_arguments(self, node):\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+    def _handle_argtype(self, func, argname, argtype):\n+        frame = func\n+        if hasattr(frame, 'locals_type'):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             node.implements = ()\n     def visit_functiondef(self, node):\n         if hasattr(node, 'locals_type'):\n@@ -112,7 +128,23 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             current = frame.locals_type[node.name]\n             values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+    def visit_arguments(self, node):\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+    def _handle_argtype(self, func, argname, argtype):\n+        frame = func\n+        if hasattr(frame, 'locals_type'):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             pass\n     @staticmethod\n     def handle_assignattr_type(node, parent):\n@@ -120,7 +152,23 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             values = set(node.infer())\n             current = set(parent.instance_attrs_type[node.attrname])\n             parent.instance_attrs_type[node.attrname] = list(current | values)\n-        except astroid.InferenceError:\n+        except (astroid.InferenceError, AttributeError):\n+            pass\n+    def visit_arguments(self, node):\n+        func = node.parent\n+        if not isinstance(func, astroid.FunctionDef):\n+            return\n+        annotations = func.annotations\n+        if annotations:\n+            for argname, argtype in annotations.items():\n+                if argname in func.args.args:\n+                    self._handle_argtype(func, argname, argtype)\n+    def _handle_argtype(self, func, argname, argtype):\n+        frame = func\n+        if hasattr(frame, 'locals_type'):\n+            current = frame.locals_type[argname]\n+            values = set(argtype.infer() if hasattr(argtype, 'infer') else [argtype])\n+            frame.locals_type[argname] = list(set(current) | values)\n             pass\n     def visit_import(self, node):\n         context_file = node.root().file\n", "normalized_occurrence": 1}
