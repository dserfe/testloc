{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16281", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b70dcf9..b0264cc 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -493,37 +493,37 @@ class PrettyPrinter(Printer):\n             width = (func_height + 2) * 5 // 3 - 2\n             sign_lines = []\n             sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n-                sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n+            for i in range(func_height):\n+                sign_lines.append(vertical_chr + (' ' * width) + vertical_chr)\n \n-            pretty_sign = stringPict('')\n-            pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))\n+        pretty_sign = stringPict('')\n+        pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))\n \n-            pretty_upper = self._print(lim[2])\n-            pretty_lower = self._print(Equality(lim[0], lim[1]))\n+        pretty_upper = self._print(lim[2])\n+        pretty_lower = self._print(Equality(lim[0], lim[1]))\n \n-            max_upper = max(max_upper, pretty_upper.height())\n+        max_upper = max(max_upper, pretty_upper.height())\n \n-            if first:\n-                sign_height = pretty_sign.height()\n+        if first:\n+            sign_height = pretty_sign.height()\n \n-            pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))\n-            pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))\n+        pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))\n+        pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))\n \n-            if first:\n-                pretty_func.baseline = 0\n-                first = False\n+        if first:\n+            pretty_func.baseline = 0\n+            first = False\n \n-            height = pretty_sign.height()\n-            padding = stringPict('')\n-            padding = prettyForm(*padding.stack(*[' ']*(height - 1)))\n-            pretty_sign = prettyForm(*pretty_sign.right(padding))\n+        height = pretty_sign.height()\n+        padding = stringPict('')\n+        padding = prettyForm(*padding.stack(*[' ' for _ in range(height)]))\n+        pretty_sign = prettyForm(*pretty_sign.right(padding))\n \n-            pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n+        pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n \n-        pretty_func.baseline = max_upper + sign_height//2\n-        pretty_func.binding = prettyForm.MUL\n-        return pretty_func\n+    pretty_func.baseline = max_upper + sign_height // 2\n+    pretty_func.binding = prettyForm.MUL\n+    return pretty_func\n \n     def _print_Sum(self, expr):\n         ascii_mode = not self._use_unicode\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0b99bb2..defcd26 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -362,28 +362,28 @@ class PrettyPrinter(Printer):\n             width = (func_height + 2) * 5 // 3 - 2\n             sign_lines = []\n             sign_lines.append(corner_chr + horizontal_chr * width + corner_chr)\n-            for i in range(func_height + 1):\n+            for i in range(func_height):\n                 sign_lines.append(vertical_chr + ' ' * width + vertical_chr)\n-            pretty_sign = stringPict('')\n-            pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))\n-            pretty_upper = self._print(lim[2])\n-            pretty_lower = self._print(Equality(lim[0], lim[1]))\n-            max_upper = max(max_upper, pretty_upper.height())\n-            if first:\n-                sign_height = pretty_sign.height()\n-            pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))\n-            pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))\n-            if first:\n-                pretty_func.baseline = 0\n-                first = False\n-            height = pretty_sign.height()\n-            padding = stringPict('')\n-            padding = prettyForm(*padding.stack(*[' '] * (height - 1)))\n-            pretty_sign = prettyForm(*pretty_sign.right(padding))\n-            pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n-        pretty_func.baseline = max_upper + sign_height // 2\n-        pretty_func.binding = prettyForm.MUL\n-        return pretty_func\n+        pretty_sign = stringPict('')\n+        pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))\n+        pretty_upper = self._print(lim[2])\n+        pretty_lower = self._print(Equality(lim[0], lim[1]))\n+        max_upper = max(max_upper, pretty_upper.height())\n+        if first:\n+            sign_height = pretty_sign.height()\n+        pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))\n+        pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))\n+        if first:\n+            pretty_func.baseline = 0\n+            first = False\n+        height = pretty_sign.height()\n+        padding = stringPict('')\n+        padding = prettyForm(*padding.stack(*[' ' for _ in range(height)]))\n+        pretty_sign = prettyForm(*pretty_sign.right(padding))\n+        pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n+    pretty_func.baseline = max_upper + sign_height // 2\n+    pretty_func.binding = prettyForm.MUL\n+    return pretty_func\n     def _print_Sum(self, expr):\n         ascii_mode = not self._use_unicode\n         def asum(hrequired, lower, upper, use_ascii):\n", "normalized_occurrence": 1}
