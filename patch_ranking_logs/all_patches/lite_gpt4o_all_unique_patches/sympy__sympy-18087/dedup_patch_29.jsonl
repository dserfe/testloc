{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..d5f86e9 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -296,9 +296,14 @@ class sin(TrigonometricFunction):\n         elif isinstance(arg, SetExpr):\n             return arg._eval_func(cls)\n \n-        if arg.could_extract_minus_sign():\n+        if arg.could_extract_minus_sign() and not arg.is_imaginary:\n             return -cls(-arg)\n \n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and arg.args[0].args[1] == 2:\n+            base = arg.args[0].args[0]\n+            if base.func == sin:\n+                return abs(base)\n+\n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n             return S.ImaginaryUnit * sinh(i_coeff)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..a196f95 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -157,8 +157,12 @@ class sin(TrigonometricFunction):\n                 return AccumBounds(Min(sin(min), sin(max)), Max(sin(min), sin(max)))\n         elif isinstance(arg, SetExpr):\n             return arg._eval_func(cls)\n-        if arg.could_extract_minus_sign():\n+        if arg.could_extract_minus_sign() and (not arg.is_imaginary):\n             return -cls(-arg)\n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and (arg.args[0].args[1] == 2):\n+            base = arg.args[0].args[0]\n+            if base.func == sin:\n+                return abs(base)\n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n             return S.ImaginaryUnit * sinh(i_coeff)\n", "normalized_occurrence": 1}
