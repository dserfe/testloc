{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..c803f46 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -115,6 +115,14 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n+        # Skip if the parameter is already fully documented (both type and param)\n+        # This prevents duplicate entries for *args and **kwargs\n+        if name.startswith('*'):\n+            documented = any(field[0].astext().split(' ', 1)[1].strip() == name\n+                           for field in node if field[0].astext().startswith('param '))\n+            if documented:\n+                continue\n+\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..b1cedbf 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -85,6 +85,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        if name.startswith('*'):\n+            documented = any((field[0].astext().split(' ', 1)[1].strip() == name for field in node if field[0].astext().startswith('param ')))\n+            if documented:\n+                continue\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n", "normalized_occurrence": 1}
