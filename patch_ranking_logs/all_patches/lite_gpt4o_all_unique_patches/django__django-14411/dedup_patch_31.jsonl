{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..e049c8d 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -304,10 +304,14 @@ def _get_non_gfk_field(opts, name):\n     if field.is_relation and not field.many_to_many and hasattr(field, 'attname') and field.attname == name:\n         raise FieldIsAForeignKeyColumnName()\n \n-    return field\n+    # Check if the field widget is labelable\n+    if not is_labelable:\n+        return label\n+\n+    return (label, attr) if return_attr else label\n \n \n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, is_labelable=True):\n     \"\"\"\n     Return a sensible label for a field name. The name can be a callable,\n     property (but not created with @property decorator), or the name of an\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..02de721 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -177,8 +177,10 @@ def _get_non_gfk_field(opts, name):\n         raise FieldDoesNotExist()\n     if field.is_relation and (not field.many_to_many) and hasattr(field, 'attname') and (field.attname == name):\n         raise FieldIsAForeignKeyColumnName()\n-    return field\n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+    if not is_labelable:\n+        return label\n+    return (label, attr) if return_attr else label\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, is_labelable=True):\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n", "normalized_occurrence": 1}
