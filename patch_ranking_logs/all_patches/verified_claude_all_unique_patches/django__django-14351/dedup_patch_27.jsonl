{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..4493700 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1084,6 +1084,14 @@ class Query(BaseExpression):\n             if hasattr(type_, '_make'):  # namedtuple\n                 return type_(*values)\n             return type_(values)\n+        elif hasattr(value, 'query') and hasattr(value, 'values_list'):\n+            # Handle QuerySet values by converting them to values_list('pk', flat=True)\n+            # to ensure only one column is returned\n+            try:\n+                value = value.values_list('pk', flat=True)\n+            except Exception:\n+                # If values_list() fails, let the original value pass through\n+                pass\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..8635048 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -601,6 +601,11 @@ class Query(BaseExpression):\n             if hasattr(type_, '_make'):\n                 return type_(*values)\n             return type_(values)\n+        elif hasattr(value, 'query') and hasattr(value, 'values_list'):\n+            try:\n+                value = value.values_list('pk', flat=True)\n+            except Exception:\n+                pass\n         return value\n     def solve_lookup_type(self, lookup):\n         lookup_splitted = lookup.split(LOOKUP_SEP)\n", "normalized_occurrence": 1}
