{"model_name_or_path": "agentless", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..8962d14 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,12 +368,22 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        sql, params = super().as_sql(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            return '(%s IS NULL OR json_extract(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params\n+        elif connection.vendor == 'oracle':\n+            return '(%s IS NULL OR json_value(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params\n+        return sql, params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        sql, params = super().as_sql(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            return '(%s IS NULL OR json_extract(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params\n+        elif connection.vendor == 'oracle':\n+            return '(%s IS NULL OR json_value(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params\n+        return sql, params\n \n \n class KeyTransformIn(lookups.In):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..2e2c89a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -241,11 +241,21 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        sql, params = super().as_sql(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            return ('(%s IS NULL OR json_extract(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params)\n+        elif connection.vendor == 'oracle':\n+            return ('(%s IS NULL OR json_value(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params)\n+        return (sql, params)\n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        sql, params = super().as_sql(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            return ('(%s IS NULL OR json_extract(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params)\n+        elif connection.vendor == 'oracle':\n+            return ('(%s IS NULL OR json_value(%s, %s) IS NULL)' % (self.lhs.lhs, self.lhs.lhs, self.lhs.key_name), params)\n+        return (sql, params)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n         sql, params = super().resolve_expression_parameter(compiler, connection, sql, param)\n", "normalized_occurrence": 1}
