{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..963788d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1551,21 +1551,25 @@ class PairGrid(Grid):\n         else:\n             axes_vars = [x_var, y_var]\n \n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n+        hue = kwargs.pop(\"hue\", None)\n+        if hue is not None:\n+            data = self.data.copy()\n+            data['__hue__'] = hue\n+            hue = data['__hue__']\n+        else:\n+            if self._hue_var is not None and self._hue_var not in axes_vars:\n+                axes_vars.append(self._hue_var)\n+\n+            data = self.data[axes_vars]\n+            if self._dropna:\n+                data = data.dropna()\n \n-        data = self.data[axes_vars]\n-        if self._dropna:\n-            data = data.dropna()\n+            hue = data.get(self._hue_var)\n \n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n+        if hue is not None or \"hue\" not in kwargs:\n             kwargs.update({\n                 \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n             })\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..619add3 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -736,18 +736,21 @@ class PairGrid(Grid):\n             axes_vars = [x_var]\n         else:\n             axes_vars = [x_var, y_var]\n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n-        data = self.data[axes_vars]\n-        if self._dropna:\n-            data = data.dropna()\n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n+        hue = kwargs.pop('hue', None)\n+        if hue is not None:\n+            data = self.data.copy()\n+            data['__hue__'] = hue\n+            hue = data['__hue__']\n         else:\n+            if self._hue_var is not None and self._hue_var not in axes_vars:\n+                axes_vars.append(self._hue_var)\n+            data = self.data[axes_vars]\n+            if self._dropna:\n+                data = data.dropna()\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n+        x = data[x_var]\n+        y = data[y_var]\n+        if hue is not None or 'hue' not in kwargs:\n             kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n", "normalized_occurrence": 1}
