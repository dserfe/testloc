{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..7a65e4b 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -340,9 +340,16 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n-        # [obj_1] and not [\"label_1\"]\n-        return \"unknown\"\n+    if not issparse(y) and y.dtype == object:\n+        if isinstance(y.flat[0], str):\n+            return \"unknown\"  # Keep existing behavior for strings\n+        # Handle pandas nullable types\n+        import pandas as pd\n+        if hasattr(y.flat[0], 'dtype') and isinstance(y.flat[0].dtype, pd.core.dtypes.base.ExtensionDtype):\n+            # This is a pandas nullable type, don't return unknown\n+            pass\n+        elif not isinstance(y.flat[0], (int, float, bool, np.number, type(None))):\n+            return \"unknown\"\n \n     # Check if multioutput\n     if y.ndim == 2 and y.shape[1] > 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..21f10c8 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -91,8 +91,14 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n-        return 'unknown'\n+    if not issparse(y) and y.dtype == object:\n+        if isinstance(y.flat[0], str):\n+            return 'unknown'\n+        import pandas as pd\n+        if hasattr(y.flat[0], 'dtype') and isinstance(y.flat[0].dtype, pd.core.dtypes.base.ExtensionDtype):\n+            pass\n+        elif not isinstance(y.flat[0], (int, float, bool, np.number, type(None))):\n+            return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n     else:\n", "normalized_occurrence": 1}
