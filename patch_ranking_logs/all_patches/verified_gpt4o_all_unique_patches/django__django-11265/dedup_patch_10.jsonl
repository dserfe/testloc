{"model_name_or_path": "agentless", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 1309ca5..6b95172 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,7 +1666,12 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n-        query.add_filter(filter_expr)\n+        if filter_lhs in self.annotation_select:\n+            # If the filter is on an annotation, use its expression.\n+            annotation = self.annotation_select[filter_lhs]\n+            query.add_filter((annotation, filter_rhs))\n+        else:\n+            query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n         # the subquery.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 60a9579..6c5431b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -889,7 +889,11 @@ class Query(BaseExpression):\n         if isinstance(filter_rhs, F):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         query = Query(self.model)\n-        query.add_filter(filter_expr)\n+        if filter_lhs in self.annotation_select:\n+            annotation = self.annotation_select[filter_lhs]\n+            query.add_filter((annotation, filter_rhs))\n+        else:\n+            query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n         col = query.select[0]\n", "normalized_occurrence": 1}
