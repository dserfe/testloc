{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13398", "model_patch": "diff --git a/astropy/coordinates/builtin_frames/itrs.py b/astropy/coordinates/builtin_frames/itrs.py\nindex c4e677a..36ce3b9 100644\n--- a/astropy/coordinates/builtin_frames/itrs.py\n+++ b/astropy/coordinates/builtin_frames/itrs.py\n@@ -34,5 +34,9 @@ class ITRS(BaseCoordinateFrame):\n         cart = self.represent_as(CartesianRepresentation)\n         return EarthLocation(x=cart.x, y=cart.y, z=cart.z)\n \n-# Self-transform is in intermediate_rotation_transforms.py with all the other\n-# ITRS transforms\n+    def transform_to(self, new_frame):\n+        if isinstance(new_frame, ITRS):\n+            # Ensure that the obstime is properly handled for ITRS transformations\n+            if self.obstime != new_frame.obstime:\n+                raise ValueError(\"Transforming ITRS with differing obstime is undefined.\")\n+        return super().transform_to(new_frame)\n", "occurrence": 1, "normalized_patch": "--- a/astropy/coordinates/builtin_frames/itrs.py\n+++ b/astropy/coordinates/builtin_frames/itrs.py\n-        return EarthLocation(x=cart.x, y=cart.y, z=cart.z)\n+        return EarthLocation(x=cart.x, y=cart.y, z=cart.z)\n+    def transform_to(self, new_frame):\n+        if isinstance(new_frame, ITRS):\n+            if self.obstime != new_frame.obstime:\n+                raise ValueError('Transforming ITRS with differing obstime is undefined.')\n+        return super().transform_to(new_frame)", "normalized_occurrence": 1}
