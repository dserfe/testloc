{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..1ef8315 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,9 +112,30 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    Commas can be escaped with backslash to include them in patterns.\"\"\"\n+    # Split on unescaped commas\n+    parts = []\n+    current = []\n+    i = 0\n+    while i < len(value):\n+        if value[i] == '\\\\' and i + 1 < len(value):\n+            current.append(value[i:i+2])\n+            i += 2\n+        elif value[i] == ',':\n+            parts.append(''.join(current))\n+            current = []\n+            i += 1\n+        else:\n+            current.append(value[i])\n+            i += 1\n+    if current:\n+        parts.append(''.join(current))\n+    \n+    # Replace escaped commas with actual commas and compile patterns\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in parts:\n+        pattern = pattern.strip().replace(r'\\,', ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..5c61f79 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -54,8 +54,25 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         msg = f'Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}'\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    parts = []\n+    current = []\n+    i = 0\n+    while i < len(value):\n+        if value[i] == '\\\\' and i + 1 < len(value):\n+            current.append(value[i:i + 2])\n+            i += 2\n+        elif value[i] == ',':\n+            parts.append(''.join(current))\n+            current = []\n+            i += 1\n+        else:\n+            current.append(value[i])\n+            i += 1\n+    if current:\n+        parts.append(''.join(current))\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in parts:\n+        pattern = pattern.strip().replace('\\\\,', ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
