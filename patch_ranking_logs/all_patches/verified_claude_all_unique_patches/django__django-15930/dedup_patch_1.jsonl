{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15930", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 47df1a9..1615cbe 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1298,7 +1298,16 @@ class When(Expression):\n         connection.ops.check_expression_support(self)\n         template_params = extra_context\n         sql_params = []\n-        condition_sql, condition_params = compiler.compile(self.condition)\n+        \n+        # Handle Q objects specially to ensure they generate valid boolean conditions\n+        if isinstance(self.condition, Q):\n+            condition_sql = \"1 = 1\" if self.condition else \"1 = 0\"\n+            if hasattr(self.condition, 'negated') and self.condition.negated:\n+                condition_sql = \"NOT (\" + condition_sql + \")\"\n+            condition_params = []\n+        else:\n+            condition_sql, condition_params = compiler.compile(self.condition)\n+            \n         template_params[\"condition\"] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 1b947ba..47a6130 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -659,7 +659,13 @@ class When(Expression):\n         connection.ops.check_expression_support(self)\n         template_params = extra_context\n         sql_params = []\n-        condition_sql, condition_params = compiler.compile(self.condition)\n+        if isinstance(self.condition, Q):\n+            condition_sql = '1 = 1' if self.condition else '1 = 0'\n+            if hasattr(self.condition, 'negated') and self.condition.negated:\n+                condition_sql = 'NOT (' + condition_sql + ')'\n+            condition_params = []\n+        else:\n+            condition_sql, condition_params = compiler.compile(self.condition)\n         template_params['condition'] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n", "normalized_occurrence": 1}
