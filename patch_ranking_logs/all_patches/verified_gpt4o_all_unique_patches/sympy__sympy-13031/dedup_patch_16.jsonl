{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..8df04f0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -59,7 +59,8 @@ class BlockMatrix(MatrixExpr):\n         for i in range(M.shape[0]):\n             numrows += M[i, 0].shape[0]\n         for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+            if M.rows > 0:\n+                numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..15153d9 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -29,7 +29,8 @@ class BlockMatrix(MatrixExpr):\n         for i in range(M.shape[0]):\n             numrows += M[i, 0].shape[0]\n         for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+            if M.rows > 0:\n+                numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n     @property\n     def blockshape(self):\n", "normalized_occurrence": 1}
