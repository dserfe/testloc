{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e880705..fc198d8 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -153,6 +153,16 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+class ArcsinDistribution(SingleContinuousDistribution):\n+    _argnames = ('a', 'b')\n+\n+    def pdf(self, x):\n+        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n+\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return (asin((2*x - a - b) / (b - a)) + pi/2)/pi\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -670,6 +680,9 @@ class DagumDistribution(SingleContinuousDistribution):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x/b)**(-a))**(-p)\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -722,6 +735,17 @@ def Dagum(name, p, a, b):\n #-------------------------------------------------------------------------------\n # Erlang distribution ----------------------------------------------------------\n \n+class ErlangDistribution(SingleContinuousDistribution):\n+    _argnames = ('k', 'l')\n+\n+    def pdf(self, x):\n+        k, l = self.k, self.l\n+        return l**k * x**(k-1) * exp(-l*x) / factorial(k-1)\n+\n+    def _cdf(self, x):\n+        k, l = self.k, self.l\n+        return lowergamma(k, l*x) / gamma(k)\n+\n def Erlang(name, k, l):\n     r\"\"\"\n     Create a continuous random variable with an Erlang distribution.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+class ArcsinDistribution(SingleContinuousDistribution):\n+    _argnames = ('a', 'b')\n+    def pdf(self, x):\n+        return 1 / (pi * sqrt((x - self.a) * (self.b - x)))\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return (asin((2 * x - a - b) / (b - a)) + pi / 2) / pi\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return 1 - (1 + (x / b) ** (-a)) ** (-p)\n+class ErlangDistribution(SingleContinuousDistribution):\n+    _argnames = ('k', 'l')\n+    def pdf(self, x):\n+        k, l = (self.k, self.l)\n+        return l ** k * x ** (k - 1) * exp(-l * x) / factorial(k - 1)\n+    def _cdf(self, x):\n+        k, l = (self.k, self.l)\n+        return lowergamma(k, l * x) / gamma(k)", "normalized_occurrence": 1}
