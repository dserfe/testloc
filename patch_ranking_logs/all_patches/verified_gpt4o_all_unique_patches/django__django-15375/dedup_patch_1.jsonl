{"model_name_or_path": "agentless", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 80dc7eb..83d90ba 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -60,12 +60,11 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n-            return c\n-        if hasattr(default, 'resolve_expression'):\n-            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n-        c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        if c.default is not None:\n+            if hasattr(c.default, 'resolve_expression'):\n+                c.default = c.default.resolve_expression(query, allow_joins, reuse, summarize)\n+            c.set_source_expressions([Coalesce(c.get_source_expressions()[0], c.default)] + c.get_source_expressions()[1:])\n+            c.default = None  # Reset the default argument before wrapping.\n \n     @property\n     def default_alias(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex fa98951..6329d11 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -41,12 +41,11 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n-            return c\n-        if hasattr(default, 'resolve_expression'):\n-            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n-        c.default = None\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        if c.default is not None:\n+            if hasattr(c.default, 'resolve_expression'):\n+                c.default = c.default.resolve_expression(query, allow_joins, reuse, summarize)\n+            c.set_source_expressions([Coalesce(c.get_source_expressions()[0], c.default)] + c.get_source_expressions()[1:])\n+            c.default = None\n     @property\n     def default_alias(self):\n         expressions = self.get_source_expressions()\n", "normalized_occurrence": 1}
