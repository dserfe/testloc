{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..0cd7362 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,7 +239,20 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+\n+            # Check that max_length is sufficient for the longest choice value\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max(len(str(value)) for value, _ in self.choices)\n+                if self.max_length < max_choice_length:\n+                    errors.append(\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    )\n+            return errors\n \n     def _check_choices(self):\n         if not self.choices:\n@@ -280,7 +293,20 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+\n+            # Check that max_length is sufficient for the longest choice value\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max(len(str(value)) for value, _ in self.choices)\n+                if self.max_length < max_choice_length:\n+                    errors.append(\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    )\n+            return errors\n \n         return [\n             checks.Error(\n@@ -976,7 +1002,20 @@ class CharField(Field):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+\n+            # Check that max_length is sufficient for the longest choice value\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max(len(str(value)) for value, _ in self.choices)\n+                if self.max_length < max_choice_length:\n+                    errors.append(\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    )\n+            return errors\n \n     def cast_db_type(self, connection):\n         if self.max_length is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..adcacae 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -116,7 +116,12 @@ class Field(RegisterLookupMixin):\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max((len(str(value)) for value, _ in self.choices))\n+                if self.max_length < max_choice_length:\n+                    errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E122'))\n+            return errors\n     def _check_choices(self):\n         if not self.choices:\n             return []\n@@ -139,7 +144,12 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max((len(str(value)) for value, _ in self.choices))\n+                if self.max_length < max_choice_length:\n+                    errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E122'))\n+            return errors\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n@@ -468,7 +478,12 @@ class CharField(Field):\n         elif not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or self.max_length <= 0:\n             return [checks.Error(\"'max_length' must be a positive integer.\", obj=self, id='fields.E121')]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None and self.choices:\n+                max_choice_length = max((len(str(value)) for value, _ in self.choices))\n+                if self.max_length < max_choice_length:\n+                    errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E122'))\n+            return errors\n     def cast_db_type(self, connection):\n         if self.max_length is None:\n             return connection.ops.cast_char_field_without_max_length\n", "normalized_occurrence": 1}
