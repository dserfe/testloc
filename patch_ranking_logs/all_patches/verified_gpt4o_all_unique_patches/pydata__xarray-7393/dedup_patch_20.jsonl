{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex d49b2c1..cbfee2f 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -706,7 +706,8 @@ class PandasMultiIndex(PandasIndex):\n                     f\"from variable {name!r} that wraps a multi-index\"\n                 )\n \n-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n+        split_labels, levels = zip(*[(lev.factorize(), lev.dtype) for lev in level_indexes])\n+        levels = [pd.Index(lev, dtype=dtype) for lev, dtype in levels]\n         labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n         labels = [x.ravel() for x in labels_mesh]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 6be2e3c..130f098 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -371,7 +371,8 @@ class PandasMultiIndex(PandasIndex):\n         for name, idx in zip(variables, level_indexes):\n             if isinstance(idx, pd.MultiIndex):\n                 raise ValueError(f'cannot create a multi-index along stacked dimension {dim!r} from variable {name!r} that wraps a multi-index')\n-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n+        split_labels, levels = zip(*[(lev.factorize(), lev.dtype) for lev in level_indexes])\n+        levels = [pd.Index(lev, dtype=dtype) for lev, dtype in levels]\n         labels_mesh = np.meshgrid(*split_labels, indexing='ij')\n         labels = [x.ravel() for x in labels_mesh]\n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n", "normalized_occurrence": 1}
