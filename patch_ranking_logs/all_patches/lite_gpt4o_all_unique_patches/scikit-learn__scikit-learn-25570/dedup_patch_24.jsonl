{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..b124b8a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -757,6 +757,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n \n+        # Filter out empty transformers to avoid errors in subsequent steps\n+        Xs = [X for X in Xs if X.shape[1] > 0]\n+\n         return self._hstack(list(Xs))\n \n     def transform(self, X):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..cd26a2a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -222,6 +222,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._update_fitted_transformers(transformers)\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n+        Xs = [X for X in Xs if X.shape[1] > 0]\n         return self._hstack(list(Xs))\n     def transform(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
