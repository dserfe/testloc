{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..d99fd0f 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -910,8 +910,12 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n-    expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+    if evaluate:\n+        expr = eval(\n+            code, global_dict, local_dict)  # take local objects in preference\n+    else:\n+        expr = eval(\n+            compile(evaluateFalse(code), '<string>', 'eval'), global_dict, local_dict)\n     return expr\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex e068f1d..53c0d42 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -476,7 +476,10 @@ def stringify_expr(s, local_dict, global_dict, transformations):\n         tokens = transform(tokens, local_dict, global_dict)\n     return untokenize(tokens)\n def eval_expr(code, local_dict, global_dict):\n-    expr = eval(code, global_dict, local_dict)\n+    if evaluate:\n+        expr = eval(code, global_dict, local_dict)\n+    else:\n+        expr = eval(compile(evaluateFalse(code), '<string>', 'eval'), global_dict, local_dict)\n     return expr\n def parse_expr(s, local_dict=None, transformations=standard_transformations, global_dict=None, evaluate=True):\n     if local_dict is None:\n", "normalized_occurrence": 2}
