{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..2ef1015 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -248,6 +248,15 @@ class Product(ExprWithIntLimits):\n         if a == n:\n             return term.subs(k, a)\n \n+        # Handle terms of form n + 1/2**k\n+        from sympy import Wild, exp\n+        r = Wild('r')\n+        s = Wild('s')\n+        match = term.match(r + 1/2**(s))\n+        if match and not match[r].has(k) and match[s] == k:\n+            from sympy import qproduct\n+            return qproduct(1 + match[r]*2**(-k), (k, a, n - 1))\n+\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..8136263 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -56,6 +56,13 @@ class Product(ExprWithIntLimits):\n             return term ** (n - a + 1)\n         if a == n:\n             return term.subs(k, a)\n+        from sympy import Wild, exp\n+        r = Wild('r')\n+        s = Wild('s')\n+        match = term.match(r + 1 / 2 ** s)\n+        if match and (not match[r].has(k)) and (match[s] == k):\n+            from sympy import qproduct\n+            return qproduct(1 + match[r] * 2 ** (-k), (k, a, n - 1))\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n         dif = n - a\n", "normalized_occurrence": 1}
