{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 14f12ce..7118bd1 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -263,8 +263,13 @@ class TestReport(BaseReport):\n         self.__dict__.update(extra)\n \n     def __repr__(self):\n-        return \"<{} {!r} when={!r} outcome={!r}>\".format(\n-            self.__class__.__name__, self.nodeid, self.when, self.outcome\n+        from _pytest._io.saferepr import _format_repr_exception\n+        try:\n+            nodeid_repr = repr(self.nodeid)\n+        except Exception as exc:\n+            nodeid_repr = _format_repr_exception(exc, self.nodeid)\n+        return \"<{} {} when={!r} outcome={!r}>\".format(\n+            self.__class__.__name__, nodeid_repr, self.when, self.outcome\n         )\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3cefcbc..ad9fcbb 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -121,7 +121,12 @@ class TestReport(BaseReport):\n         self.duration = duration\n         self.__dict__.update(extra)\n     def __repr__(self):\n-        return '<{} {!r} when={!r} outcome={!r}>'.format(self.__class__.__name__, self.nodeid, self.when, self.outcome)\n+        from _pytest._io.saferepr import _format_repr_exception\n+        try:\n+            nodeid_repr = repr(self.nodeid)\n+        except Exception as exc:\n+            nodeid_repr = _format_repr_exception(exc, self.nodeid)\n+        return '<{} {} when={!r} outcome={!r}>'.format(self.__class__.__name__, nodeid_repr, self.when, self.outcome)\n     @classmethod\n     def from_item_and_call(cls, item, call) -> 'TestReport':\n         when = call.when\n", "normalized_occurrence": 1}
