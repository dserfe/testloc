{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex a09f791..a317721 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1012,6 +1012,7 @@ class OneToOneField(ForeignKey):\n     description = _(\"One-to-one relationship\")\n \n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n+        self._is_parent_link = kwargs.get('parent_link', False)\n         kwargs['unique'] = True\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n \n@@ -1039,6 +1040,17 @@ class OneToOneField(ForeignKey):\n     def _check_unique(self, **kwargs):\n         # Override ForeignKey since check isn't applicable here.\n         return []\n+        \n+    def contribute_to_class(self, cls, name, private_only=False):\n+        # If this is a parent link, process it before other OneToOneFields\n+        # to ensure proper handling regardless of declaration order\n+        if self._is_parent_link:\n+            super().contribute_to_class(cls, name, private_only=private_only)\n+        else:\n+            # For non-parent links, delay the processing until after parent links\n+            def _contribute():\n+                super(OneToOneField, self).contribute_to_class(cls, name, private_only=private_only)\n+            cls._meta.add_field(self, private=private_only, contribute=_contribute)\n \n \n def create_many_to_many_intermediary_model(field, klass):\n", "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f0a0935..d28464e 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -464,6 +464,7 @@ class OneToOneField(ForeignKey):\n     rel_class = OneToOneRel\n     description = _('One-to-one relationship')\n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n+        self._is_parent_link = kwargs.get('parent_link', False)\n         kwargs['unique'] = True\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n     def deconstruct(self):\n@@ -484,6 +485,13 @@ class OneToOneField(ForeignKey):\n                 setattr(instance, self.name, data)\n     def _check_unique(self, **kwargs):\n         return []\n+    def contribute_to_class(self, cls, name, private_only=False):\n+        if self._is_parent_link:\n+            super().contribute_to_class(cls, name, private_only=private_only)\n+        else:\n+            def _contribute():\n+                super(OneToOneField, self).contribute_to_class(cls, name, private_only=private_only)\n+            cls._meta.add_field(self, private=private_only, contribute=_contribute)\n def create_many_to_many_intermediary_model(field, klass):\n     from django.db import models\n     def set_managed(model, related, through):\n", "normalized_occurrence": 1}
