{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16450", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9a1c686..a80d444 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -219,19 +219,17 @@ class Symbol(AtomicExpr, Boolean):\n         obj = Expr.__new__(cls)\n         obj.name = name\n \n-        # TODO: Issue #8873: Forcing the commutative assumption here means\n-        # later code such as ``srepr()`` cannot tell whether the user\n-        # specified ``commutative=True`` or omitted it.  To workaround this,\n-        # we keep a copy of the assumptions dict, then create the StdFactKB,\n-        # and finally overwrite its ``._generator`` with the dict copy.  This\n-        # is a bit of a hack because we assume StdFactKB merely copies the\n-        # given dict as ``._generator``, but future modification might, e.g.,\n-        # compute a minimal equivalent assumption set.\n-        tmp_asm_copy = assumptions.copy()\n+        # Ensure that assumptions like 'finite' are preserved\n+        if 'finite' in assumptions:\n+            assumptions['finite'] = assumptions['finite']\n \n         # be strict about commutativity\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n-        assumptions['commutative'] = is_commutative\n+        # Preserve other important assumptions\n+        preserved_assumptions = ['finite', 'integer', 'rational', 'prime', 'even', 'odd']\n+        for asm in preserved_assumptions:\n+            if asm in assumptions:\n+                assumptions[asm] = assumptions[asm]\n         obj._assumptions = StdFactKB(assumptions)\n         obj._assumptions._generator = tmp_asm_copy  # Issue #8873\n         return obj\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9bc1e52..04a0825 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -75,9 +75,13 @@ class Symbol(AtomicExpr, Boolean):\n             raise TypeError('name should be a string, not %s' % repr(type(name)))\n         obj = Expr.__new__(cls)\n         obj.name = name\n-        tmp_asm_copy = assumptions.copy()\n+        if 'finite' in assumptions:\n+            assumptions['finite'] = assumptions['finite']\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n-        assumptions['commutative'] = is_commutative\n+        preserved_assumptions = ['finite', 'integer', 'rational', 'prime', 'even', 'odd']\n+        for asm in preserved_assumptions:\n+            if asm in assumptions:\n+                assumptions[asm] = assumptions[asm]\n         obj._assumptions = StdFactKB(assumptions)\n         obj._assumptions._generator = tmp_asm_copy\n         return obj\n", "normalized_occurrence": 1}
