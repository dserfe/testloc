{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..a7475a5 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -310,9 +310,28 @@ class Collector:\n                     )\n \n             # fast deletes\n+            # Group fast deletes by model\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                fast_deletes_by_model.setdefault(qs.model, []).append(qs)\n+            \n+            # Combine and execute fast deletes for each model\n+            for model, querysets in fast_deletes_by_model.items():\n+                combined_where = None\n+                params = []\n+                for qs in querysets:\n+                    # Combine the where nodes\n+                    if combined_where is None:\n+                        combined_where = qs.query.where\n+                    else:\n+                        combined_where = WhereNode(connector='OR')\n+                        combined_where.add(qs.query.where, 'OR')\n+                \n+                # Create and execute combined delete query\n+                query = sql.DeleteQuery(model)\n+                query.where = combined_where\n+                count = query.delete_batch([], self.using)\n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -346,4 +365,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..27045c8 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -156,9 +156,22 @@ class Collector:\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n                     signals.pre_delete.send(sender=model, instance=obj, using=self.using)\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                fast_deletes_by_model.setdefault(qs.model, []).append(qs)\n+            for model, querysets in fast_deletes_by_model.items():\n+                combined_where = None\n+                params = []\n+                for qs in querysets:\n+                    if combined_where is None:\n+                        combined_where = qs.query.where\n+                    else:\n+                        combined_where = WhereNode(connector='OR')\n+                        combined_where.add(qs.query.where, 'OR')\n+                query = sql.DeleteQuery(model)\n+                query.where = combined_where\n+                count = query.delete_batch([], self.using)\n+                deleted_counter[model._meta.label] += count\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n", "normalized_occurrence": 1}
