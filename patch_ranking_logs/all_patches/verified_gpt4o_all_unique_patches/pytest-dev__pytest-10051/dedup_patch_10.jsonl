{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10051", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 9234395..cbaf7fd 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -396,7 +396,9 @@ class LogCaptureFixture:\n \n         .. versionadded:: 3.4\n         \"\"\"\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        if when == \"call\":\n+            return self.records\n+        return []\n \n     @property\n     def text(self) -> str:\n@@ -440,6 +442,7 @@ class LogCaptureFixture:\n \n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n+        self._item.stash[caplog_records_key][\"call\"] = []\n         self.handler.reset()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex d320659..4f63da0 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -183,7 +183,9 @@ class LogCaptureFixture:\n     def handler(self) -> LogCaptureHandler:\n         return self._item.stash[caplog_handler_key]\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        if when == 'call':\n+            return self.records\n+        return []\n     @property\n     def text(self) -> str:\n         return _remove_ansi_escape_sequences(self.handler.stream.getvalue())\n@@ -197,6 +199,7 @@ class LogCaptureFixture:\n     def messages(self) -> List[str]:\n         return [r.getMessage() for r in self.records]\n     def clear(self) -> None:\n+        self._item.stash[caplog_records_key]['call'] = []\n         self.handler.reset()\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n", "normalized_occurrence": 1}
