{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8900d1c..1a94c76 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2914,6 +2914,15 @@ class _AxesBase(martist.Artist):\n             if not (scale and axis._get_autoscale_on()):\n                 return  # nothing to do...\n \n+            # Ensure that we include the density values in the autoscaling\n+            if name == 'y' and any(isinstance(artist, mpatches.Polygon) for artist in self.get_children()):\n+                values = [val for artist in self.get_children() if isinstance(artist, mpatches.Polygon)\n+                          for val in artist.get_path().vertices[:, 1]]\n+                if values:\n+                    x0, x1 = min(values), max(values)\n+                    set_bound(x0, x1)\n+                    return\n+\n             shared = shared_axes.get_siblings(self)\n             # Base autoscaling on finite data limits when there is at least one\n             # finite data limit among all the shared_axes and intervals.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eafcc46..6df40c2 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1185,6 +1185,12 @@ class _AxesBase(martist.Artist):\n         def handle_single_axis(scale, shared_axes, name, axis, margin, stickies, set_bound):\n             if not (scale and axis._get_autoscale_on()):\n                 return\n+            if name == 'y' and any((isinstance(artist, mpatches.Polygon) for artist in self.get_children())):\n+                values = [val for artist in self.get_children() if isinstance(artist, mpatches.Polygon) for val in artist.get_path().vertices[:, 1]]\n+                if values:\n+                    x0, x1 = (min(values), max(values))\n+                    set_bound(x0, x1)\n+                    return\n             shared = shared_axes.get_siblings(self)\n             values = [val for ax in shared for val in getattr(ax.dataLim, f'interval{name}') if np.isfinite(val)]\n             if values:\n", "normalized_occurrence": 1}
