{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..e117bc0 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1041,12 +1041,9 @@ class MultiValueField(Field):\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    # If a required field is empty, raise ValidationError immediately\n+                    raise ValidationError(field.error_messages['incomplete'])\n+                    \n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n@@ -1054,6 +1051,7 @@ class MultiValueField(Field):\n                 # raise at the end of clean(), rather than raising a single\n                 # exception for the first error we encounter. Skip duplicates.\n                 errors.extend(m for m in e.error_list if m not in errors)\n+        # Raise any collected errors, whether from cleaning or required fields\n         if errors:\n             raise ValidationError(errors)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..e1ed070 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -606,9 +606,7 @@ class MultiValueField(Field):\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    raise ValidationError(field.error_messages['incomplete'])\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "normalized_occurrence": 1}
