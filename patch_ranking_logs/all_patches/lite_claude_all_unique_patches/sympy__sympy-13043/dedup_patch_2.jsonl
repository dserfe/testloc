{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13043", "model_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 1e4efa0..306279d 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -559,8 +559,22 @@ def decompose(expr, separate=False):\n     [x, y, x**2, y**5, x*y, x**3*y**2]\n     \"\"\"\n     expr = S(expr)\n+    if separate:\n+        terms = []\n+        if isinstance(expr, Expr) and not expr.is_number:\n+            if expr.is_Symbol:\n+                terms.append(expr)\n+            elif expr.is_Add:\n+                symbols = expr.atoms(Symbol)\n+                terms.extend(monom for monom in expr.args)\n+            elif expr.is_Pow or expr.is_Mul:  # Handle both Pow and Mul cases\n+                terms.append(expr)\n+        else:\n+            terms.append(expr)\n+        return terms\n+    \n+    # Original behavior for separate=False\n     poly_dict = {}\n-\n     if isinstance(expr, Expr) and not expr.is_number:\n         if expr.is_Symbol:\n             poly_dict[1] = expr\n@@ -568,15 +582,12 @@ def decompose(expr, separate=False):\n             symbols = expr.atoms(Symbol)\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n-            if separate:\n-                return [monom[1] for monom in degrees]\n-            else:\n-                for monom in degrees:\n-                    degree, term = monom\n-                    if poly_dict.get(degree):\n-                        poly_dict[degree] += term\n-                    else:\n-                        poly_dict[degree] = term\n+            for monom in degrees:\n+                degree, term = monom\n+                if poly_dict.get(degree):\n+                    poly_dict[degree] += term\n+                else:\n+                    poly_dict[degree] = term\n         elif expr.is_Pow:\n             _, degree = expr.args\n             poly_dict[degree] = expr\n@@ -591,9 +602,6 @@ def decompose(expr, separate=False):\n             poly_dict[degree] = expr\n     else:\n         poly_dict[0] = expr\n-\n-    if separate:\n-        return list(poly_dict.values())\n     return poly_dict\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 5b23da9..bafab4f 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -227,6 +227,19 @@ def best_origin(a, b, lineseg, expr):\n     return x0\n def decompose(expr, separate=False):\n     expr = S(expr)\n+    if separate:\n+        terms = []\n+        if isinstance(expr, Expr) and (not expr.is_number):\n+            if expr.is_Symbol:\n+                terms.append(expr)\n+            elif expr.is_Add:\n+                symbols = expr.atoms(Symbol)\n+                terms.extend((monom for monom in expr.args))\n+            elif expr.is_Pow or expr.is_Mul:\n+                terms.append(expr)\n+        else:\n+            terms.append(expr)\n+        return terms\n     poly_dict = {}\n     if isinstance(expr, Expr) and (not expr.is_number):\n         if expr.is_Symbol:\n@@ -234,15 +247,12 @@ def decompose(expr, separate=False):\n         elif expr.is_Add:\n             symbols = expr.atoms(Symbol)\n             degrees = [(sum(degree_list(monom, *symbols)), monom) for monom in expr.args]\n-            if separate:\n-                return [monom[1] for monom in degrees]\n-            else:\n-                for monom in degrees:\n-                    degree, term = monom\n-                    if poly_dict.get(degree):\n-                        poly_dict[degree] += term\n-                    else:\n-                        poly_dict[degree] = term\n+            for monom in degrees:\n+                degree, term = monom\n+                if poly_dict.get(degree):\n+                    poly_dict[degree] += term\n+                else:\n+                    poly_dict[degree] = term\n         elif expr.is_Pow:\n             _, degree = expr.args\n             poly_dict[degree] = expr\n@@ -257,8 +267,6 @@ def decompose(expr, separate=False):\n             poly_dict[degree] = expr\n     else:\n         poly_dict[0] = expr\n-    if separate:\n-        return list(poly_dict.values())\n     return poly_dict\n def clockwise_sort(poly):\n     n = len(poly.vertices)\n", "normalized_occurrence": 1}
