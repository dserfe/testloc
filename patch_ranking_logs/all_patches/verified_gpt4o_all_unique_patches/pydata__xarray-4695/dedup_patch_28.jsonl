{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..6a06c70 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -132,7 +132,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                 \"unsorted or non-unique\"\n             )\n \n-    elif is_dict_like(label):\n+    elif is_dict_like(label) and index_name != \"method\":\n         is_nested_vals = _is_nested_tuple(tuple(label.values()))\n         if not isinstance(index, pd.MultiIndex):\n             raise ValueError(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..8d1eb3a 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -65,7 +65,7 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n         indexer = index.slice_indexer(_sanitize_slice_element(label.start), _sanitize_slice_element(label.stop), _sanitize_slice_element(label.step))\n         if not isinstance(indexer, slice):\n             raise KeyError(f'cannot represent labeled-based slice indexer for dimension {index_name!r} with a slice over integer positions; the index is unsorted or non-unique')\n-    elif is_dict_like(label):\n+    elif is_dict_like(label) and index_name != 'method':\n         is_nested_vals = _is_nested_tuple(tuple(label.values()))\n         if not isinstance(index, pd.MultiIndex):\n             raise ValueError('cannot use a dict-like object for selection on a dimension that does not have a MultiIndex')\n", "normalized_occurrence": 1}
