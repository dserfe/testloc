+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
+ git show
+ git -c core.fileMode=false diff c0e85160406f9bf2bcaa2992138587668a1cd0bc
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/polys/polyclasses.py

no changes added to commit (use "git add" and/or "git commit -a")
commit eef221519ef4a8546cbb0d751884ff7dc9ca6ed9
Author: SWE-bench <setup@swebench.config>
Date:   Wed Sep 10 16:41:23 2025 +0000

    SWE-bench
diff --git a/sympy/polys/polyclasses.py b/sympy/polys/polyclasses.py
index 238a0f0b25..6c30019913 100644
--- a/sympy/polys/polyclasses.py
+++ b/sympy/polys/polyclasses.py
@@ -155,6 +155,9 @@ def __init__(self, rep, dom, lev=None, ring=None):
         else:
             rep, lev = dmp_validate(rep)
 
+        # Normalize the representation to handle zero polynomials correctly
+        rep = dmp_normal(rep, lev, dom)
+        
         self.rep = rep
         self.lev = lev
         self.dom = dom
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.8.dev0
    Uninstalling sympy-1.8.dev0:
      Successfully uninstalled sympy-1.8.dev0
  DEPRECATION: Legacy editable install of sympy==1.8.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
Successfully installed sympy
+ git checkout c0e85160406f9bf2bcaa2992138587668a1cd0bc sympy/polys/tests/test_polytools.py
Updated 0 paths from 1fe8a6f595
+ git apply -v -
Checking patch sympy/polys/tests/test_polytools.py...
Applied patch sympy/polys/tests/test_polytools.py cleanly.
+ : '>>>>> Start Test Output'
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/polys/tests/test_polytools.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        57847658
hash randomization: on (PYTHONHASHSEED=3538957681)

sympy/polys/tests/test_polytools.py[156] 
test_Poly_mixed_operations ok
test_Poly_from_dict ok
test_Poly_from_list ok
test_Poly_from_poly ok
test_Poly_from_expr ok
test_poly_from_domain_element E
test_Poly__new__ E
test_Poly__args ok
test_Poly__gens ok
test_Poly_zero ok
test_Poly_one ok
test_Poly__unify E
test_Poly_free_symbols ok
test_PurePoly_free_symbols ok
test_Poly__eq__ ok
test_PurePoly__eq__ ok
test_PurePoly_Poly ok
test_Poly_get_domain ok
test_Poly_set_domain E
test_Poly_get_modulus ok
test_Poly_set_modulus ok
test_Poly_add_ground ok
test_Poly_sub_ground ok
test_Poly_mul_ground ok
test_Poly_quo_ground ok
test_Poly_exquo_ground ok
test_Poly_abs ok
test_Poly_neg ok
test_Poly_add ok
test_Poly_sub ok
test_Poly_mul ok
test_issue_13079 ok
test_Poly_sqr ok
test_Poly_pow ok
test_Poly_divmod E
test_Poly_eq_ne ok
test_Poly_nonzero ok
test_Poly_properties ok
test_Poly_is_irreducible ok
test_Poly_subs ok
test_Poly_replace ok
test_Poly_reorder ok
test_Poly_ltrim ok
test_Poly_has_only_gens ok
test_Poly_to_ring E
test_Poly_to_field ok
test_Poly_to_exact ok
test_Poly_retract ok
test_Poly_slice ok
test_Poly_coeffs ok
test_Poly_monoms ok
test_Poly_terms ok
test_Poly_all_coeffs ok
test_Poly_all_monoms ok
test_Poly_all_terms ok
test_Poly_termwise ok
test_Poly_length ok
test_Poly_as_dict ok
test_Poly_as_expr ok
test_Poly_lift E
test_Poly_deflate ok
test_Poly_inject ok
test_Poly_eject ok
test_Poly_exclude ok
test_Poly__gen_to_level ok
test_Poly_degree ok
test_Poly_degree_list ok
test_Poly_total_degree ok
test_Poly_homogenize ok
test_Poly_homogeneous_order ok
test_Poly_LC ok
test_Poly_TC ok
test_Poly_EC ok
test_Poly_coeff ok
test_Poly_nth ok
test_Poly_LM ok
test_Poly_LM_custom_order ok
test_Poly_EM ok
test_Poly_LT ok
test_Poly_ET ok
test_Poly_max_norm ok
test_Poly_l1_norm ok
test_Poly_clear_denoms F
test_Poly_rat_clear_denoms E
test_issue_20427 F
test_Poly_integrate E
test_Poly_diff ok
test_issue_9585 ok
test_Poly_eval E
test_Poly___call__ ok
test_parallel_poly_from_expr ok
test_pdiv ok
test_div E
test_issue_7864 ok
test_gcdex E
test_revert E
test_subresultants ok
test_resultant ok
test_discriminant ok
test_dispersion ok
test_gcd_list ok
test_lcm_list ok
test_gcd E
test_gcd_numbers_vs_polys E
test_terms_gcd E
test_trunc ok
test_monic E
test_content ok
test_primitive E
test_compose ok
test_shift ok
test_transform E
test_sturm E
test_gff ok
test_norm E
test_sqf_norm E
test_sqf ok
test_factor E
test_factor_large E
test_factor_noeval ok
test_intervals E
test_refine_root ok
test_count_roots ok
test_Poly_root ok
test_real_roots ok
test_all_roots ok
test_nroots E
test_ground_roots ok
test_nth_power_roots_poly ok
test_torational_factor_list ok
test_cancel E
test_reduced E
test_groebner E
test_fglm E
test_is_zero_dimensional ok
test_GroebnerBasis ok
test_poly ok
test_keep_coeff ok
test_poly_matching_consistency E
test_issue_5786 E
test_noncommutative ok
test_to_rational_coeffs ok
test_factor_terms ok
test_as_list ok
test_issue_11198 ok
test_Poly_precision ok
test_issue_12400 ok
test_issue_14364 ok
test_issue_15669 ok
test_issue_17988 ok
test_issue_18205 ok
test_issue_8695 ok
test_issue_19113 ok
test_issue_19360 E
test_poly_copy_equals_original ok
test_deserialized_poly_equals_original ok                                 [FAIL]


________________________________________________________________________________
______ sympy/polys/tests/test_polytools.py:test_poly_from_domain_element _______
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 297, in test_poly_from_domain_element
    assert Poly(dom([1, 1]), y, domain=dom).rep == DMP([dom([1, 1])], dom)
  File "/testbed/sympy/polys/polytools.py", line 150, in __new__
    return cls._from_domain_element(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 302, in _from_domain_element
    return cls.new(DMP.from_list(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 231, in from_list
    return cls(dmp_convert(rep, lev, None, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
TypeError: __init__() missing 1 required positional argument: 'dom'
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_Poly__new__ _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 378, in test_Poly__new__
    assert Poly(x**2 + 1, extension=I).get_domain() == QQ.algebraic_field(I)
  File "/testbed/sympy/polys/polytools.py", line 144, in __new__
    opt = options.build_options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 746, in build_options
    return Options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 182, in __init__
    self.__options__[option].postprocess(self)
  File "/testbed/sympy/polys/polyoptions.py", line 571, in postprocess
    options['domain'] = sympy.polys.domains.QQ.algebraic_field(
  File "/testbed/sympy/polys/domains/rationalfield.py", line 24, in algebraic_field
    return AlgebraicField(self, *extension)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 32, in __init__
    self.ext = to_number_field(ext)
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 850, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 671, in minimal_polynomial
    result = _minpoly_compose(ex, x, domain)
  File "/testbed/sympy/polys/numberfields.py", line 518, in _minpoly_compose
    _, factors = factor_list(x**2 + 1, x, domain=dom)
  File "/testbed/sympy/polys/polytools.py", line 6275, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6005, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5947, in _symbolic_factor_list
    _coeff, _factors = func()
  File "/testbed/sympy/polys/polytools.py", line 3316, in factor_list
    coeff, factors = f.rep.factor_list()
  File "/testbed/sympy/polys/polyclasses.py", line 798, in factor_list
    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/factortools.py", line 1381, in dmp_factor_list
    return dup_factor_list(f, K0)
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 602, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_Poly__unify _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 486, in test_Poly__unify
    assert Poly(x**2 + I, x, domain=ZZ_I).unify(Poly(x**2 + sqrt(2), x, extension=True)) == \
  File "/testbed/sympy/polys/polytools.py", line 162, in __new__
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 292, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonIntegerRing' object has no attribute 'from_GaussianIntegerRing'
________________________________________________________________________________
___________ sympy/polys/tests/test_polytools.py:test_Poly_set_domain ___________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 618, in test_Poly_set_domain
    assert Poly(Rational(2, 10)*x + Rational(1, 10)).set_domain('RR') == Poly(0.2*x + 0.1)
  File "/testbed/sympy/polys/polytools.py", line 516, in set_domain
    return f.per(f.rep.convert(opt.domain))
  File "/testbed/sympy/polys/polyclasses.py", line 302, in convert
    return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)
  File "/testbed/sympy/polys/densebasic.py", line 561, in dmp_convert
    return dup_convert(f, K0, K1)
  File "/testbed/sympy/polys/densebasic.py", line 538, in dup_convert
    return dup_strip([ K1.convert(c, K0) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 538, in <listcomp>
    return dup_strip([ K1.convert(c, K0) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 112, in convert
    return self.convert_from(element, base)
  File "/testbed/sympy/polys/domains/domain.py", line 99, in convert_from
    result = _convert(element, base)
  File "/testbed/sympy/polys/domains/realfield.py", line 79, in from_QQ_python
    return self.dtype(element.numerator) / element.denominator
  File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/mpmath/ctx_mp_python.py", line 79, in __new__
    v._mpf_ = mpf_pos(cls.mpf_convert_arg(val, prec, rounding), prec, rounding)
  File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/mpmath/ctx_mp_python.py", line 98, in mpf_convert_arg
    raise TypeError("cannot create mpf from " + repr(x))
TypeError: cannot create mpf from 1/5
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_Poly_divmod _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 751, in test_Poly_divmod
    assert divmod(f, g) == (q, r)
  File "/testbed/sympy/polys/polytools.py", line 65, in wrapper
    return func(f, g)
  File "/testbed/sympy/polys/polytools.py", line 4107, in __divmod__
    return f.div(g)
  File "/testbed/sympy/polys/polytools.py", line 1680, in div
    q, r = F.div(G)
  File "/testbed/sympy/polys/polyclasses.py", line 494, in div
    q, r = dmp_div(F, G, lev, dom)
  File "/testbed/sympy/polys/densearith.py", line 1627, in dmp_div
    return dmp_ff_div(f, g, u, K)
  File "/testbed/sympy/polys/densearith.py", line 1477, in dmp_ff_div
    return dup_ff_div(f, g, K)
  File "/testbed/sympy/polys/densearith.py", line 1439, in dup_ff_div
    c = K.exquo(lc_r, lc_g)
  File "/testbed/sympy/polys/domains/field.py", line 25, in exquo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
____________ sympy/polys/tests/test_polytools.py:test_Poly_to_ring _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 922, in test_Poly_to_ring
    raises(CoercionFailed, lambda: Poly(x/2 + 1).to_ring())
  File "/testbed/sympy/testing/pytest.py", line 105, in raises
    raise Failed("DID NOT RAISE")
sympy.testing.pytest.Failed: DID NOT RAISE
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_Poly_lift ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1109, in test_Poly_lift
    assert Poly(x**4 - I*x + 17*I, x, gaussian=True).lift() == \
  File "/testbed/sympy/polys/polytools.py", line 162, in __new__
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 292, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonRationalField' object has no attribute 'from_GaussianRationalField'
________________________________________________________________________________
________ sympy/polys/tests/test_polytools.py:test_Poly_rat_clear_denoms ________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1452, in test_Poly_rat_clear_denoms
    assert f.rat_clear_denoms(g) == \
  File "/testbed/sympy/polys/polytools.py", line 2289, in rat_clear_denoms
    a, f = f.clear_denoms(convert=True)
  File "/testbed/sympy/polys/polytools.py", line 2256, in clear_denoms
    return coeff, f.to_ring()
  File "/testbed/sympy/polys/polytools.py", line 746, in to_ring
    result = f.rep.to_ring()
  File "/testbed/sympy/polys/polyclasses.py", line 287, in to_ring
    return f.convert(f.dom.get_ring())
  File "/testbed/sympy/polys/polyclasses.py", line 302, in convert
    return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)
  File "/testbed/sympy/polys/densebasic.py", line 561, in dmp_convert
    return dup_convert(f, K0, K1)
  File "/testbed/sympy/polys/densebasic.py", line 538, in dup_convert
    return dup_strip([ K1.convert(c, K0) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 538, in <listcomp>
    return dup_strip([ K1.convert(c, K0) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 112, in convert
    return self.convert_from(element, base)
  File "/testbed/sympy/polys/domains/domain.py", line 99, in convert_from
    result = _convert(element, base)
  File "/testbed/sympy/polys/domains/polynomialring.py", line 120, in from_FractionField
    q, r = K0.numer(a).div(K0.denom(a))
AttributeError: 'FracElement' object has no attribute 'div'
________________________________________________________________________________
___________ sympy/polys/tests/test_polytools.py:test_Poly_integrate ____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1476, in test_Poly_integrate
    assert Poly(x + 1).integrate() == Poly(x**2/2 + x)
  File "/testbed/sympy/polys/polytools.py", line 2321, in integrate
    return f.per(f.rep.integrate(m=1))
  File "/testbed/sympy/polys/polyclasses.py", line 602, in integrate
    return f.per(dmp_integrate_in(f.rep, m, j, f.lev, f.dom))
  File "/testbed/sympy/polys/densetools.py", line 135, in dmp_integrate_in
    return _rec_integrate_in(f, m, u, 0, j, K)
  File "/testbed/sympy/polys/densetools.py", line 109, in _rec_integrate_in
    return dmp_integrate(g, m, v, K)
  File "/testbed/sympy/polys/densetools.py", line 88, in dmp_integrate
    return dup_integrate(f, m, K)
  File "/testbed/sympy/polys/densetools.py", line 66, in dup_integrate
    g.insert(0, K.exquo(c, K(n)))
  File "/testbed/sympy/polys/domains/field.py", line 25, in exquo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_Poly_eval ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/polytools.py", line 2437, in eval
    result = f.rep.eval(a, j)
  File "/testbed/sympy/polys/polyclasses.py", line 620, in eval
    f.dom.convert(a), j, f.lev, f.dom), kill=True)
  File "/testbed/sympy/polys/domains/domain.py", line 148, in convert
    return self.from_sympy(element)
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 35, in from_sympy
    raise CoercionFailed("expected an integer, got %s" % a)
sympy.polys.polyerrors.CoercionFailed: expected an integer, got 1/2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1560, in test_Poly_eval
    assert Poly(x + 1, domain='ZZ').eval(S.Half) == Rational(3, 2)
  File "/testbed/sympy/polys/polytools.py", line 2448, in eval
    result = f.rep.eval(a, j)
  File "/testbed/sympy/polys/polyclasses.py", line 619, in eval
    return f.per(dmp_eval_in(f.rep,
  File "/testbed/sympy/polys/densetools.py", line 348, in dmp_eval_in
    return _rec_eval_in(f, a, u, 0, j, K)
  File "/testbed/sympy/polys/densetools.py", line 320, in _rec_eval_in
    return dmp_eval(g, a, v, K)
  File "/testbed/sympy/polys/densetools.py", line 303, in dmp_eval
    return dup_eval(f, a, K)
  File "/testbed/sympy/polys/densetools.py", line 282, in dup_eval
    result *= a
  File "/testbed/sympy/polys/domains/pythonrational.py", line 166, in __mul__
    x1 = gcd(ap, bq)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_________________ sympy/polys/tests/test_polytools.py:test_div _________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1689, in test_div
    assert F.div(G) == (Q, R)
  File "/testbed/sympy/polys/polytools.py", line 1680, in div
    q, r = F.div(G)
  File "/testbed/sympy/polys/polyclasses.py", line 494, in div
    q, r = dmp_div(F, G, lev, dom)
  File "/testbed/sympy/polys/densearith.py", line 1627, in dmp_div
    return dmp_ff_div(f, g, u, K)
  File "/testbed/sympy/polys/densearith.py", line 1494, in dmp_ff_div
    c, R = dmp_ff_div(lc_r, lc_g, v, K)
  File "/testbed/sympy/polys/densearith.py", line 1477, in dmp_ff_div
    return dup_ff_div(f, g, K)
  File "/testbed/sympy/polys/densearith.py", line 1439, in dup_ff_div
    c = K.exquo(lc_r, lc_g)
  File "/testbed/sympy/polys/domains/field.py", line 25, in exquo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
________________ sympy/polys/tests/test_polytools.py:test_gcdex ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1812, in test_gcdex
    assert F.half_gcdex(G) == (S, H)
  File "/testbed/sympy/polys/polytools.py", line 2499, in half_gcdex
    s, h = F.half_gcdex(G)
  File "/testbed/sympy/polys/polyclasses.py", line 627, in half_gcdex
    s, h = dup_half_gcdex(F, G, dom)
  File "/testbed/sympy/polys/euclidtools.py", line 76, in dup_half_gcdex
    q, r = dup_div(f, g, K)
  File "/testbed/sympy/polys/densearith.py", line 1534, in dup_div
    return dup_ff_div(f, g, K)
  File "/testbed/sympy/polys/densearith.py", line 1439, in dup_ff_div
    c = K.exquo(lc_r, lc_g)
  File "/testbed/sympy/polys/domains/field.py", line 25, in exquo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_revert ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1853, in test_revert
    assert f.revert(8) == g
  File "/testbed/sympy/polys/polytools.py", line 2597, in revert
    result = f.rep.revert(int(n))
  File "/testbed/sympy/polys/polyclasses.py", line 654, in revert
    return f.per(dup_revert(f.rep, n, f.dom))
  File "/testbed/sympy/polys/densetools.py", line 1281, in dup_revert
    g = [K.revert(dup_TC(f, K))]
  File "/testbed/sympy/polys/domains/field.py", line 98, in revert
    return 1/a
  File "/testbed/sympy/polys/domains/pythonrational.py", line 210, in __rtruediv__
    x = gcd(self.p, other)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_________________ sympy/polys/tests/test_polytools.py:test_gcd _________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2055, in test_gcd
    assert gcd(a, b) in (a, b)
  File "/testbed/sympy/polys/polytools.py", line 5286, in gcd
    (F, G), opt = parallel_poly_from_expr((f, g), *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 4320, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polytools.py", line 4409, in _parallel_poly_from_expr
    poly = Poly._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonIntegerRing' object has no attribute 'from_GaussianIntegerRing'
________________________________________________________________________________
________ sympy/polys/tests/test_polytools.py:test_gcd_numbers_vs_polys _________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2069, in test_gcd_numbers_vs_polys
    assert isinstance(gcd(Rational(3, 2)*x, Rational(9, 4)), Rational)
  File "/testbed/sympy/polys/polytools.py", line 5304, in gcd
    result = F.gcd(G)
  File "/testbed/sympy/polys/polytools.py", line 2882, in gcd
    result = F.gcd(G)
  File "/testbed/sympy/polys/polyclasses.py", line 685, in gcd
    return per(dmp_gcd(F, G, lev, dom))
  File "/testbed/sympy/polys/euclidtools.py", line 1625, in dmp_gcd
    return dmp_inner_gcd(f, g, u, K)[0]
  File "/testbed/sympy/polys/euclidtools.py", line 1581, in dmp_inner_gcd
    return dup_inner_gcd(f, g, K)
  File "/testbed/sympy/polys/euclidtools.py", line 1509, in dup_inner_gcd
    return dup_qq_heu_gcd(f, g, K)
  File "/testbed/sympy/polys/euclidtools.py", line 1408, in dup_qq_heu_gcd
    h, cff, cfg = dup_zz_heu_gcd(f, g, K1)
  File "/testbed/sympy/polys/euclidtools.py", line 1188, in dup_zz_heu_gcd
    gcd, f, g = dup_extract(f, g, K)
  File "/testbed/sympy/polys/densetools.py", line 741, in dup_extract
    fc = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 605, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_terms_gcd ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2093, in test_terms_gcd
    assert terms_gcd(x**3*y/2 + x*y**3/2) == x*y/2*(x**2 + y**2)
  File "/testbed/sympy/polys/polytools.py", line 5537, in terms_gcd
    denom, f = f.clear_denoms(convert=True)
  File "/testbed/sympy/polys/polytools.py", line 2256, in clear_denoms
    return coeff, f.to_ring()
  File "/testbed/sympy/polys/polytools.py", line 746, in to_ring
    result = f.rep.to_ring()
  File "/testbed/sympy/polys/polyclasses.py", line 287, in to_ring
    return f.convert(f.dom.get_ring())
  File "/testbed/sympy/polys/polyclasses.py", line 302, in convert
    return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 513, in dmp_normal
    return dmp_strip([ dmp_normal(c, v, K) for c in f ], u)
  File "/testbed/sympy/polys/densebasic.py", line 513, in <listcomp>
    return dmp_strip([ dmp_normal(c, v, K) for c in f ], u)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/pythonrational.py", line 88, in __int__
    return p//q
TypeError: unsupported operand type(s) for //: 'PythonRational' and 'int'
________________________________________________________________________________
________________ sympy/polys/tests/test_polytools.py:test_monic ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2148, in test_monic
    assert F.monic() == G
  File "/testbed/sympy/polys/polytools.py", line 2957, in monic
    result = f.rep.monic()
  File "/testbed/sympy/polys/polyclasses.py", line 714, in monic
    return f.per(dmp_ground_monic(f.rep, f.lev, f.dom))
  File "/testbed/sympy/polys/densetools.py", line 558, in dmp_ground_monic
    return dup_monic(f, K)
  File "/testbed/sympy/polys/densetools.py", line 532, in dup_monic
    return dup_exquo_ground(f, lc, K)
  File "/testbed/sympy/polys/densearith.py", line 371, in dup_exquo_ground
    return [ K.exquo(cf, c) for cf in f ]
  File "/testbed/sympy/polys/densearith.py", line 371, in <listcomp>
    return [ K.exquo(cf, c) for cf in f ]
  File "/testbed/sympy/polys/domains/field.py", line 25, in exquo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_primitive ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2198, in test_primitive
    assert primitive(S('-3*x/4 + y + 11/8')) == \
  File "/testbed/sympy/polys/polytools.py", line 5684, in primitive
    cont, result = F.primitive()
  File "/testbed/sympy/polys/polytools.py", line 2999, in primitive
    cont, result = f.rep.primitive()
  File "/testbed/sympy/polys/polyclasses.py", line 722, in primitive
    cont, F = dmp_ground_primitive(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/densetools.py", line 719, in dmp_ground_primitive
    cont = dmp_ground_content(f, u, K)
  File "/testbed/sympy/polys/densetools.py", line 647, in dmp_ground_content
    cont = K.gcd(cont, dmp_ground_content(c, v, K))
  File "/testbed/sympy/polys/densetools.py", line 638, in dmp_ground_content
    return dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 602, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_transform ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2241, in test_transform
    assert Poly(x**2 - x/2 + 1, x).transform(Poly(x + 1), Poly(x - 1)) == \
  File "/testbed/sympy/polys/polytools.py", line 3090, in transform
    result = F.rep.transform(P.rep, Q.rep)
  File "/testbed/sympy/polys/polyclasses.py", line 754, in transform
    return per(dup_transform(F, P, Q, dom))
  File "/testbed/sympy/polys/densetools.py", line 914, in dup_transform
    Q.append(dup_mul(Q[-1], q, K))
  File "/testbed/sympy/polys/densearith.py", line 767, in dup_mul
    coeff += f[j]*g[i - j]
  File "/testbed/sympy/polys/domains/pythonrational.py", line 167, in __mul__
    x2 = gcd(bp, aq)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
________________ sympy/polys/tests/test_polytools.py:test_sturm ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2269, in test_sturm
    assert F.sturm() == [F, G]
  File "/testbed/sympy/polys/polytools.py", line 3119, in sturm
    result = f.rep.sturm()
  File "/testbed/sympy/polys/polyclasses.py", line 761, in sturm
    return list(map(f.per, dup_sturm(f.rep, f.dom)))
  File "/testbed/sympy/polys/rootisolation.py", line 56, in dup_sturm
    f = dup_sqf_part(f, K)
  File "/testbed/sympy/polys/sqfreetools.py", line 219, in dup_sqf_part
    gcd = dup_gcd(f, dup_diff(f, 1, K), K)
  File "/testbed/sympy/polys/densetools.py", line 166, in dup_diff
    deriv.append(K(n)*coeff)
  File "/testbed/sympy/polys/domains/pythonrational.py", line 167, in __mul__
    x2 = gcd(bp, aq)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
________________ sympy/polys/tests/test_polytools.py:test_norm _________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2313, in test_norm
    f = Poly(a*x + b*y, x, y, extension=(a, b))
  File "/testbed/sympy/polys/polytools.py", line 144, in __new__
    opt = options.build_options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 746, in build_options
    return Options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 182, in __init__
    self.__options__[option].postprocess(self)
  File "/testbed/sympy/polys/polyoptions.py", line 571, in postprocess
    options['domain'] = sympy.polys.domains.QQ.algebraic_field(
  File "/testbed/sympy/polys/domains/rationalfield.py", line 24, in algebraic_field
    return AlgebraicField(self, *extension)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 32, in __init__
    self.ext = to_number_field(ext)
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 852, in primitive_element
    _, factors = factor_list(g, extension=ext)
  File "/testbed/sympy/polys/polytools.py", line 6275, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6005, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5941, in _symbolic_factor_list
    poly, _ = _poly_from_expr(base, opt)
  File "/testbed/sympy/polys/polytools.py", line 4283, in _poly_from_expr
    poly = expr.__class__._from_poly(expr, opt)
  File "/testbed/sympy/polys/polytools.py", line 282, in _from_poly
    rep = rep.set_domain(domain)
  File "/testbed/sympy/polys/polytools.py", line 516, in set_domain
    return f.per(f.rep.convert(opt.domain))
  File "/testbed/sympy/polys/polyclasses.py", line 302, in convert
    return DMP(dmp_convert(f.rep, f.lev, f.dom, dom), dom, f.lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
TypeError: __init__() missing 2 required positional arguments: 'mod' and 'dom'
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_sqf_norm _______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2318, in test_sqf_norm
    assert sqf_norm(x**2 - 2, extension=sqrt(3)) == \
  File "/testbed/sympy/polys/polytools.py", line 5856, in sqf_norm
    F, opt = poly_from_expr(f, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 4273, in poly_from_expr
    return _poly_from_expr(expr, opt)
  File "/testbed/sympy/polys/polytools.py", line 4295, in _poly_from_expr
    rep, opt = _dict_from_expr(expr, opt)
  File "/testbed/sympy/polys/polyutils.py", line 369, in _dict_from_expr
    rep, gens = _dict_from_expr_no_gens(expr, opt)
  File "/testbed/sympy/polys/polyutils.py", line 312, in _dict_from_expr_no_gens
    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)
  File "/testbed/sympy/polys/polyutils.py", line 257, in _parallel_dict_from_expr_no_gens
    if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):
  File "/testbed/sympy/polys/polyutils.py", line 234, in _is_coeff
    return factor in opt.domain
  File "/testbed/sympy/polys/domains/domain.py", line 171, in __contains__
    self.convert(a)  # this might raise, too
  File "/testbed/sympy/polys/domains/domain.py", line 148, in convert
    return self.from_sympy(element)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 76, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 850, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 671, in minimal_polynomial
    result = _minpoly_compose(ex, x, domain)
  File "/testbed/sympy/polys/numberfields.py", line 575, in _minpoly_compose
    res = _minpoly_pow(ex.base, ex.exp, x, dom)
  File "/testbed/sympy/polys/numberfields.py", line 353, in _minpoly_pow
    _, factors = res.factor_list()
  File "/testbed/sympy/polys/polytools.py", line 3316, in factor_list
    coeff, factors = f.rep.factor_list()
  File "/testbed/sympy/polys/polyclasses.py", line 798, in factor_list
    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/factortools.py", line 1381, in dmp_factor_list
    return dup_factor_list(f, K0)
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 605, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/polynomialring.py", line 153, in gcd
    return a.gcd(b)
  File "/testbed/sympy/polys/rings.py", line 2113, in gcd
    return f.cofactors(g)[0]
  File "/testbed/sympy/polys/rings.py", line 2120, in cofactors
    h, cff, cfg = f._gcd_zero(g)
  File "/testbed/sympy/polys/rings.py", line 2139, in _gcd_zero
    if g.is_nonnegative:
AttributeError: 'FracElement' object has no attribute 'is_nonnegative'
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_factor ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2474, in test_factor
    assert factor(f, extension=I) == (x**2 - I)*(x**2 + I)
  File "/testbed/sympy/polys/polytools.py", line 6370, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6040, in _generic_factor
    opt = options.build_options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 746, in build_options
    return Options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 182, in __init__
    self.__options__[option].postprocess(self)
  File "/testbed/sympy/polys/polyoptions.py", line 571, in postprocess
    options['domain'] = sympy.polys.domains.QQ.algebraic_field(
  File "/testbed/sympy/polys/domains/rationalfield.py", line 24, in algebraic_field
    return AlgebraicField(self, *extension)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 32, in __init__
    self.ext = to_number_field(ext)
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 850, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 671, in minimal_polynomial
    result = _minpoly_compose(ex, x, domain)
  File "/testbed/sympy/polys/numberfields.py", line 518, in _minpoly_compose
    _, factors = factor_list(x**2 + 1, x, domain=dom)
  File "/testbed/sympy/polys/polytools.py", line 6275, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6005, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5947, in _symbolic_factor_list
    _coeff, _factors = func()
  File "/testbed/sympy/polys/polytools.py", line 3316, in factor_list
    coeff, factors = f.rep.factor_list()
  File "/testbed/sympy/polys/polyclasses.py", line 798, in factor_list
    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/factortools.py", line 1381, in dmp_factor_list
    return dup_factor_list(f, K0)
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 602, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
____________ sympy/polys/tests/test_polytools.py:test_factor_large _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2599, in test_factor_large
    assert factor(g, gaussian=True) == \
  File "/testbed/sympy/polys/polytools.py", line 6370, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6042, in _generic_factor
    return _symbolic_factor(sympify(expr), opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5982, in _symbolic_factor
    coeff, factors = _symbolic_factor_list(together(expr, fraction=opt['fraction']), opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5941, in _symbolic_factor_list
    poly, _ = _poly_from_expr(base, opt)
  File "/testbed/sympy/polys/polytools.py", line 4308, in _poly_from_expr
    poly = Poly._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 513, in dmp_normal
    return dmp_strip([ dmp_normal(c, v, K) for c in f ], u)
  File "/testbed/sympy/polys/densebasic.py", line 513, in <listcomp>
    return dmp_strip([ dmp_normal(c, v, K) for c in f ], u)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonRationalField' object has no attribute 'from_GaussianRationalField'
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_intervals ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2624, in test_intervals
    assert intervals([x**2, x**4]) == [((0, 0), {0: 2, 1: 4})]
  File "/testbed/sympy/polys/polytools.py", line 6423, in intervals
    intervals = dup_isolate_real_roots_list(polys, opt.domain,
  File "/testbed/sympy/polys/rootisolation.py", line 591, in dup_isolate_real_roots_list
    for f, k in dup_factor_list(p, K)[1]:
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 605, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_nroots ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2866, in test_nroots
    assert Poly(x**2 + 2*I, x).nroots() == [-1.0 + 1.0*I, 1.0 - 1.0*I]
  File "/testbed/sympy/polys/polytools.py", line 162, in __new__
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 292, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonIntegerRing' object has no attribute 'from_GaussianIntegerRing'
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_cancel ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3021, in test_cancel
    assert cancel((f, g), extension=True) == (1, x**2 - 2*x - 3, x - sqrt(2))
  File "/testbed/sympy/polys/polytools.py", line 6686, in cancel
    R, (F, G) = sring((p, q), *gens, **args)
  File "/testbed/sympy/polys/rings.py", line 169, in sring
    opt.domain, _ = construct_domain(coeffs, opt=opt)
  File "/testbed/sympy/polys/constructor.py", line 275, in construct_domain
    result = _construct_simple(coeffs, opt)
  File "/testbed/sympy/polys/constructor.py", line 64, in _construct_simple
    domain, result = _construct_algebraic(coeffs, opt)
  File "/testbed/sympy/polys/constructor.py", line 107, in _construct_algebraic
    g, span, H = primitive_element(exts, ex=True, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 883, in primitive_element
    G = groebner(F + [f], Y + [x], order='lex', field=True)
  File "/testbed/sympy/polys/polytools.py", line 6842, in groebner
    return GroebnerBasis(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 6881, in __new__
    G = _groebner(polys, ring, method=opt.method)
  File "/testbed/sympy/polys/groebnertools.py", line 43, in groebner
    G = _groebner(seq, ring)
  File "/testbed/sympy/polys/groebnertools.py", line 204, in _buchberger
    f1.append(r.monic())
  File "/testbed/sympy/polys/rings.py", line 1952, in monic
    return f.quo_ground(f.LC)
  File "/testbed/sympy/polys/rings.py", line 1988, in quo_ground
    terms = [ (monom, quo(coeff, x)) for monom, coeff in f.iterterms() ]
  File "/testbed/sympy/polys/rings.py", line 1988, in <listcomp>
    terms = [ (monom, quo(coeff, x)) for monom, coeff in f.iterterms() ]
  File "/testbed/sympy/polys/domains/field.py", line 29, in quo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_reduced _______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3084, in test_reduced
    assert reduced(f, G) == (Q, r)
  File "/testbed/sympy/polys/polytools.py", line 6772, in reduced
    Q, r = polys[0].div(polys[1:])
  File "/testbed/sympy/polys/rings.py", line 1443, in div
    term = term_div((expv, p[expv]), (expvs[i], fv[i][expvs[i]]))
  File "/testbed/sympy/polys/rings.py", line 1371, in term_div
    return monom, domain_quo(a_lc, b_lc)
  File "/testbed/sympy/polys/domains/field.py", line 29, in quo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______________ sympy/polys/tests/test_polytools.py:test_groebner _______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3154, in test_groebner
    assert groebner(F, order='grevlex', field=True) == \
  File "/testbed/sympy/polys/polytools.py", line 6842, in groebner
    return GroebnerBasis(F, *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 6881, in __new__
    G = _groebner(polys, ring, method=opt.method)
  File "/testbed/sympy/polys/groebnertools.py", line 43, in groebner
    G = _groebner(seq, ring)
  File "/testbed/sympy/polys/groebnertools.py", line 204, in _buchberger
    f1.append(r.monic())
  File "/testbed/sympy/polys/rings.py", line 1952, in monic
    return f.quo_ground(f.LC)
  File "/testbed/sympy/polys/rings.py", line 1988, in quo_ground
    terms = [ (monom, quo(coeff, x)) for monom, coeff in f.iterterms() ]
  File "/testbed/sympy/polys/rings.py", line 1988, in <listcomp>
    terms = [ (monom, quo(coeff, x)) for monom, coeff in f.iterterms() ]
  File "/testbed/sympy/polys/domains/field.py", line 29, in quo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
________________ sympy/polys/tests/test_polytools.py:test_fglm _________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3181, in test_fglm
    assert G.fglm(lex) == B
  File "/testbed/sympy/polys/polytools.py", line 7040, in fglm
    G = matrix_fglm(polys, _ring, dst_order)
  File "/testbed/sympy/polys/fglmtools.py", line 25, in matrix_fglm
    M = _representing_matrices(old_basis, F, ring)
  File "/testbed/sympy/polys/fglmtools.py", line 126, in _representing_matrices
    return [representing_matrix(var(i)) for i in range(u + 1)]
  File "/testbed/sympy/polys/fglmtools.py", line 126, in <listcomp>
    return [representing_matrix(var(i)) for i in range(u + 1)]
  File "/testbed/sympy/polys/fglmtools.py", line 118, in representing_matrix
    r = ring.term_new(monomial_mul(m, v), domain.one).rem(G)
  File "/testbed/sympy/polys/rings.py", line 1482, in rem
    tq = term_div(ltf, g.LT)
  File "/testbed/sympy/polys/rings.py", line 1371, in term_div
    return monom, domain_quo(a_lc, b_lc)
  File "/testbed/sympy/polys/domains/field.py", line 29, in quo
    return a / b
  File "/testbed/sympy/polys/domains/pythonrational.py", line 193, in __truediv__
    x1 = gcd(ap, bp)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
______ sympy/polys/tests/test_polytools.py:test_poly_matching_consistency ______
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3327, in test_poly_matching_consistency
    assert I * Poly(x, x) == Poly(I*x, x)
  File "/testbed/sympy/polys/polytools.py", line 68, in wrapper
    g = f.from_expr(g, *f.gens)
  File "/testbed/sympy/polys/polytools.py", line 221, in from_expr
    return cls._from_expr(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 292, in _from_expr
    return cls._from_dict(rep, opt)
  File "/testbed/sympy/polys/polytools.py", line 241, in _from_dict
    return cls.new(DMP.from_dict(rep, level, domain), *gens)
  File "/testbed/sympy/polys/polyclasses.py", line 279, in from_dict
    return cls(dmp_from_dict(rep, lev, dom), dom, lev)
  File "/testbed/sympy/polys/polyclasses.py", line 159, in __init__
    rep = dmp_normal(rep, lev, dom)
  File "/testbed/sympy/polys/densebasic.py", line 509, in dmp_normal
    return dup_normal(f, K)
  File "/testbed/sympy/polys/densebasic.py", line 491, in dup_normal
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/densebasic.py", line 491, in <listcomp>
    return dup_strip([ K.normal(c) for c in f ])
  File "/testbed/sympy/polys/domains/domain.py", line 87, in normal
    return self.dtype(*args)
  File "/testbed/sympy/polys/domains/gaussiandomains.py", line 22, in __init__
    self.x = conv(x)
  File "/testbed/sympy/polys/domains/domain.py", line 140, in convert
    return self.convert_from(element, element.parent())
  File "/testbed/sympy/polys/domains/domain.py", line 96, in convert_from
    _convert = getattr(self, method)
AttributeError: 'PythonIntegerRing' object has no attribute 'from_GaussianIntegerRing'
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_issue_5786 ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3332, in test_issue_5786
    assert expand(factor(expand(
  File "/testbed/sympy/polys/polytools.py", line 6370, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6040, in _generic_factor
    opt = options.build_options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 746, in build_options
    return Options(gens, args)
  File "/testbed/sympy/polys/polyoptions.py", line 182, in __init__
    self.__options__[option].postprocess(self)
  File "/testbed/sympy/polys/polyoptions.py", line 571, in postprocess
    options['domain'] = sympy.polys.domains.QQ.algebraic_field(
  File "/testbed/sympy/polys/domains/rationalfield.py", line 24, in algebraic_field
    return AlgebraicField(self, *extension)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 32, in __init__
    self.ext = to_number_field(ext)
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 850, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 671, in minimal_polynomial
    result = _minpoly_compose(ex, x, domain)
  File "/testbed/sympy/polys/numberfields.py", line 518, in _minpoly_compose
    _, factors = factor_list(x**2 + 1, x, domain=dom)
  File "/testbed/sympy/polys/polytools.py", line 6275, in factor_list
    return _generic_factor_list(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6005, in _generic_factor_list
    cp, fp = _symbolic_factor_list(numer, opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5947, in _symbolic_factor_list
    _coeff, _factors = func()
  File "/testbed/sympy/polys/polytools.py", line 3316, in factor_list
    coeff, factors = f.rep.factor_list()
  File "/testbed/sympy/polys/polyclasses.py", line 798, in factor_list
    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/factortools.py", line 1381, in dmp_factor_list
    return dup_factor_list(f, K0)
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 602, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/pythonintegerring.py", line 76, in gcd
    return python_gcd(a, b)
TypeError: 'PythonRational' object cannot be interpreted as an integer
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_issue_19360 _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3436, in test_issue_19360
    assert factor(f, extension=sqrt(2)) == 2*(x - (sqrt(2)*y/2))**2
  File "/testbed/sympy/polys/polytools.py", line 6370, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/testbed/sympy/polys/polytools.py", line 6042, in _generic_factor
    return _symbolic_factor(sympify(expr), opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5982, in _symbolic_factor
    coeff, factors = _symbolic_factor_list(together(expr, fraction=opt['fraction']), opt, method)
  File "/testbed/sympy/polys/polytools.py", line 5941, in _symbolic_factor_list
    poly, _ = _poly_from_expr(base, opt)
  File "/testbed/sympy/polys/polytools.py", line 4295, in _poly_from_expr
    rep, opt = _dict_from_expr(expr, opt)
  File "/testbed/sympy/polys/polyutils.py", line 369, in _dict_from_expr
    rep, gens = _dict_from_expr_no_gens(expr, opt)
  File "/testbed/sympy/polys/polyutils.py", line 312, in _dict_from_expr_no_gens
    (poly,), gens = _parallel_dict_from_expr_no_gens((expr,), opt)
  File "/testbed/sympy/polys/polyutils.py", line 257, in _parallel_dict_from_expr_no_gens
    if not _not_a_coeff(factor) and (factor.is_Number or _is_coeff(factor)):
  File "/testbed/sympy/polys/polyutils.py", line 234, in _is_coeff
    return factor in opt.domain
  File "/testbed/sympy/polys/domains/domain.py", line 171, in __contains__
    self.convert(a)  # this might raise, too
  File "/testbed/sympy/polys/domains/domain.py", line 148, in convert
    return self.from_sympy(element)
  File "/testbed/sympy/polys/domains/algebraicfield.py", line 76, in from_sympy
    return self(to_number_field(a, self.ext).native_coeffs())
  File "/testbed/sympy/polys/numberfields.py", line 1060, in to_number_field
    minpoly, coeffs = primitive_element(extension, gen, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 850, in primitive_element
    g = minimal_polynomial(gen, x, polys=True)
  File "/testbed/sympy/polys/numberfields.py", line 671, in minimal_polynomial
    result = _minpoly_compose(ex, x, domain)
  File "/testbed/sympy/polys/numberfields.py", line 575, in _minpoly_compose
    res = _minpoly_pow(ex.base, ex.exp, x, dom)
  File "/testbed/sympy/polys/numberfields.py", line 353, in _minpoly_pow
    _, factors = res.factor_list()
  File "/testbed/sympy/polys/polytools.py", line 3316, in factor_list
    coeff, factors = f.rep.factor_list()
  File "/testbed/sympy/polys/polyclasses.py", line 798, in factor_list
    coeff, factors = dmp_factor_list(f.rep, f.lev, f.dom)
  File "/testbed/sympy/polys/factortools.py", line 1381, in dmp_factor_list
    return dup_factor_list(f, K0)
  File "/testbed/sympy/polys/factortools.py", line 1304, in dup_factor_list
    cont, f = dup_primitive(f, K0)
  File "/testbed/sympy/polys/densetools.py", line 683, in dup_primitive
    cont = dup_content(f, K)
  File "/testbed/sympy/polys/densetools.py", line 605, in dup_content
    cont = K.gcd(cont, c)
  File "/testbed/sympy/polys/domains/field.py", line 66, in gcd
    p = ring.gcd(self.numer(a), self.numer(b))
  File "/testbed/sympy/polys/domains/polynomialring.py", line 153, in gcd
    return a.gcd(b)
  File "/testbed/sympy/polys/rings.py", line 2113, in gcd
    return f.cofactors(g)[0]
  File "/testbed/sympy/polys/rings.py", line 2120, in cofactors
    h, cff, cfg = f._gcd_zero(g)
  File "/testbed/sympy/polys/rings.py", line 2139, in _gcd_zero
    if g.is_nonnegative:
AttributeError: 'FracElement' object has no attribute 'is_nonnegative'

________________________________________________________________________________
__________ sympy/polys/tests/test_polytools.py:test_Poly_clear_denoms __________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1427, in test_Poly_clear_denoms
    assert coeff == 2 and poly == Poly(
AssertionError
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_issue_20427 _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 1472, in test_issue_20427
    assert f == Poly(0, x, domain='EX')
AssertionError

===== tests finished: 121 passed, 2 failed, 33 exceptions, in 9.36 seconds =====
DO *NOT* COMMIT!
+ : '>>>>> End Test Output'
+ git checkout c0e85160406f9bf2bcaa2992138587668a1cd0bc sympy/polys/tests/test_polytools.py
Updated 1 path from 1fe8a6f595
