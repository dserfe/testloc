{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..bc0b4e4 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -894,6 +894,11 @@ class SkyCoord(ShapedLikeNDArray):\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n \n+        # Check for property descriptors in the class before failing\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__ and isinstance(cls.__dict__[attr], property):\n+                return cls.__dict__[attr].__get__(self, type(self))\n+\n         # Fail\n         raise AttributeError(\n             f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..5944e67 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -275,6 +275,9 @@ class SkyCoord(ShapedLikeNDArray):\n             frame_cls = frame_transform_graph.lookup_name(attr)\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__ and isinstance(cls.__dict__[attr], property):\n+                return cls.__dict__[attr].__get__(self, type(self))\n         raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n     def __setattr__(self, attr, val):\n         if '_sky_coord_frame' in self.__dict__:\n", "normalized_occurrence": 1}
