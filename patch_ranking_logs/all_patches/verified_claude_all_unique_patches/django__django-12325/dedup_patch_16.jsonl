{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex a09f791..5a46ee5 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1013,6 +1013,8 @@ class OneToOneField(ForeignKey):\n \n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n         kwargs['unique'] = True\n+        # Store parent_link status before super() call to ensure it's preserved\n+        self.is_parent_link = kwargs.get('parent_link', False)\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n \n     def deconstruct(self):\n@@ -1021,6 +1023,16 @@ class OneToOneField(ForeignKey):\n             del kwargs['unique']\n         return name, path, args, kwargs\n \n+    def contribute_to_class(self, cls, name, **kwargs):\n+        # Handle parent link status before other OneToOne fields are processed\n+        if self.is_parent_link:\n+            # Ensure parent links are processed first\n+            opts = cls._meta\n+            if not opts.parents:\n+                opts.parents = {}\n+            opts.parents[self.remote_field.model] = self\n+        super().contribute_to_class(cls, name, **kwargs)\n+\n     def formfield(self, **kwargs):\n         if self.remote_field.parent_link:\n             return None\n", "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f0a0935..101f5cd 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -465,12 +465,20 @@ class OneToOneField(ForeignKey):\n     description = _('One-to-one relationship')\n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n         kwargs['unique'] = True\n+        self.is_parent_link = kwargs.get('parent_link', False)\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if 'unique' in kwargs:\n             del kwargs['unique']\n         return (name, path, args, kwargs)\n+    def contribute_to_class(self, cls, name, **kwargs):\n+        if self.is_parent_link:\n+            opts = cls._meta\n+            if not opts.parents:\n+                opts.parents = {}\n+            opts.parents[self.remote_field.model] = self\n+        super().contribute_to_class(cls, name, **kwargs)\n     def formfield(self, **kwargs):\n         if self.remote_field.parent_link:\n             return None\n", "normalized_occurrence": 1}
