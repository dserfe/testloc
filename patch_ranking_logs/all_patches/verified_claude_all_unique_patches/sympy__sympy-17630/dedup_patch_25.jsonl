{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..c02c320 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,14 @@ class BlockMatrix(MatrixExpr):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result = BlockMatrix(self.blocks*other.blocks)\n+            # Convert any Zero entries back to ZeroMatrix\n+            rows, cols = self.blocks.shape\n+            for i in range(rows):\n+                for j in range(cols):\n+                    if isinstance(result.blocks[i,j], Zero):\n+                        result.blocks[i,j] = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+            return result\n \n         return self * other\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..9160b29 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -72,7 +72,13 @@ class BlockMatrix(MatrixExpr):\n         return isinstance(other, BlockMatrix) and self.shape == other.shape and (self.blockshape == other.blockshape) and (self.rowblocksizes == other.rowblocksizes) and (self.colblocksizes == other.colblocksizes)\n     def _blockmul(self, other):\n         if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n-            return BlockMatrix(self.blocks * other.blocks)\n+            result = BlockMatrix(self.blocks * other.blocks)\n+            rows, cols = self.blocks.shape\n+            for i in range(rows):\n+                for j in range(cols):\n+                    if isinstance(result.blocks[i, j], Zero):\n+                        result.blocks[i, j] = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+            return result\n         return self * other\n     def _blockadd(self, other):\n         if isinstance(other, BlockMatrix) and self.structurally_equal(other):\n", "normalized_occurrence": 1}
