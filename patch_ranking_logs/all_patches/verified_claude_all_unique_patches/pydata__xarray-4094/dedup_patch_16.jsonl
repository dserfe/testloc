{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..6033bc6 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,14 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Select the variable data without squeezing to preserve dims\n+            data_dict[k] = self.sel({variable_dim: k})\n+            # Only squeeze dims that aren't in the original selection\n+            # to preserve single-dimension variables\n+            squeeze_dims = [d for d in data_dict[k].dims \n+                          if d != variable_dim and d not in self.dims]\n+            if squeeze_dims:\n+                data_dict[k] = data_dict[k].squeeze(dim=squeeze_dims)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..3300b42 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,7 +534,10 @@ class DataArray(AbstractArray, DataWithCoords):\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k})\n+            squeeze_dims = [d for d in data_dict[k].dims if d != variable_dim and d not in self.dims]\n+            if squeeze_dims:\n+                data_dict[k] = data_dict[k].squeeze(dim=squeeze_dims)\n         return Dataset(data_dict)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n", "normalized_occurrence": 1}
