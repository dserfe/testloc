{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 9b658fb..ee20ca6 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -644,7 +644,12 @@ class ForeignObject(RelatedField):\n         return tuple(rhs_field for lhs_field, rhs_field in self.related_fields if rhs_field)\n \n     def get_local_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        # Ensure the related instance's primary key is updated before returning the value\n+        related_instance = instance\n+        for field in self.local_related_fields:\n+            if field.primary_key and related_instance.pk is None:\n+                related_instance.save()\n+        return self.get_instance_value_for_fields(related_instance, self.local_related_fields)\n \n     def get_foreign_related_value(self, instance):\n         return self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 2261016..2373033 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -279,7 +279,11 @@ class ForeignObject(RelatedField):\n     def foreign_related_fields(self):\n         return tuple((rhs_field for lhs_field, rhs_field in self.related_fields if rhs_field))\n     def get_local_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        related_instance = instance\n+        for field in self.local_related_fields:\n+            if field.primary_key and related_instance.pk is None:\n+                related_instance.save()\n+        return self.get_instance_value_for_fields(related_instance, self.local_related_fields)\n     def get_foreign_related_value(self, instance):\n         return self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n     @staticmethod\n", "normalized_occurrence": 1}
