{"model_name_or_path": "agentless", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..5715ddb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -451,12 +451,20 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             rhs_type = self.rhs.output_field.get_internal_type()\n         except FieldError:\n             rhs_type = None\n+        if (\n+            self.connector == self.SUB and\n+            lhs_type in datetime_fields and\n+            rhs_type in datetime_fields\n+        ):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         if (\n             not connection.features.has_native_duration_field and\n-            'DurationField' in {lhs_type, rhs_type} and\n-            lhs_type != rhs_type\n+            ('DurationField' in {lhs_type, rhs_type} or \n+            lhs_type in datetime_fields and rhs_type in datetime_fields)\n         ):\n-            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n+            if 'DurationField' in {lhs_type, rhs_type}:\n+                return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n         if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n             return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..65364ce 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -247,8 +247,12 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             rhs_type = self.rhs.output_field.get_internal_type()\n         except FieldError:\n             rhs_type = None\n-        if not connection.features.has_native_duration_field and 'DurationField' in {lhs_type, rhs_type} and (lhs_type != rhs_type):\n-            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n+        if self.connector == self.SUB and lhs_type in datetime_fields and (rhs_type in datetime_fields):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+        if not connection.features.has_native_duration_field and ('DurationField' in {lhs_type, rhs_type} or (lhs_type in datetime_fields and rhs_type in datetime_fields)):\n+            if 'DurationField' in {lhs_type, rhs_type}:\n+                return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n         if self.connector == self.SUB and lhs_type in datetime_fields and (lhs_type == rhs_type):\n             return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n", "normalized_occurrence": 1}
