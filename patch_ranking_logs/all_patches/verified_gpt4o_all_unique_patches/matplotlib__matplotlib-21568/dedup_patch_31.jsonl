{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..d37c04e 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -631,7 +631,10 @@ class DateFormatter(ticker.Formatter):\n \n     def __call__(self, x, pos=0):\n         result = num2date(x, self.tz).strftime(self.fmt)\n-        return _wrap_in_tex(result) if self._usetex else result\n+        if self._usetex:\n+            result = result.replace(' ', r'\\,')\n+            return _wrap_in_tex(result)\n+        return result\n \n     def set_tzinfo(self, tz):\n         self.tz = tz\n@@ -840,6 +843,7 @@ class ConciseDateFormatter(ticker.Formatter):\n             # set the offset string:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n             if self._usetex:\n+                self.offset_string = self.offset_string.replace(' ', r'\\,')\n                 self.offset_string = _wrap_in_tex(self.offset_string)\n \n         if self._usetex:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 71de92e..c87e197 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -153,7 +153,10 @@ class DateFormatter(ticker.Formatter):\n         self._usetex = usetex if usetex is not None else mpl.rcParams['text.usetex']\n     def __call__(self, x, pos=0):\n         result = num2date(x, self.tz).strftime(self.fmt)\n-        return _wrap_in_tex(result) if self._usetex else result\n+        if self._usetex:\n+            result = result.replace(' ', '\\\\,')\n+            return _wrap_in_tex(result)\n+        return result\n     def set_tzinfo(self, tz):\n         self.tz = tz\n class ConciseDateFormatter(ticker.Formatter):\n@@ -223,6 +226,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         if self.show_offset:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n             if self._usetex:\n+                self.offset_string = self.offset_string.replace(' ', '\\\\,')\n                 self.offset_string = _wrap_in_tex(self.offset_string)\n         if self._usetex:\n             return [_wrap_in_tex(l) for l in labels]\n", "normalized_occurrence": 1}
