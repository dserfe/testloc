{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..bc3028c 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -16,7 +16,13 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    # Get the original function from the partial object\n+    original = getattr(_wrapper, 'func', dummy)\n+    update_wrapper(_wrapper, original)\n+    # Preserve the metadata from the decorator as well\n+    for attr in ('__doc__', '__name__', '__module__'):\n+        if hasattr(dummy, attr):\n+            setattr(_wrapper, attr, getattr(dummy, attr))\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..4a766ed 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -8,7 +8,11 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    original = getattr(_wrapper, 'func', dummy)\n+    update_wrapper(_wrapper, original)\n+    for attr in ('__doc__', '__name__', '__module__'):\n+        if hasattr(dummy, attr):\n+            setattr(_wrapper, attr, getattr(dummy, attr))\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
