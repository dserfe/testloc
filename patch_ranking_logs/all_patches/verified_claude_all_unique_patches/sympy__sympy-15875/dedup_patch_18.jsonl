{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..7ae4783 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,34 +536,19 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n-            return False\n+        if not nz:\n+            return True\n+        # If we can't determine for certain, return None\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..e7bbffa 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,34 +290,18 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n-        if b.is_zero is False:\n-            return False\n+        if not nz:\n+            return True\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 2}
