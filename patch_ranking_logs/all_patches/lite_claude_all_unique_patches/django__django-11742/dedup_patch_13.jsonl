{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..61da910 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -256,6 +256,30 @@ class Field(RegisterLookupMixin):\n                     id='fields.E004',\n                 )\n             ]\n+            \n+        # Check max_length is sufficient for all choices if this is a CharField\n+        if isinstance(self, CharField) and self.max_length is not None:\n+            longest_value = 0\n+            for choices_group in self.choices:\n+                try:\n+                    group_name, group_choices = choices_group\n+                    for value, human_name in group_choices:\n+                        if isinstance(value, str) and len(value) > longest_value:\n+                            longest_value = len(value)\n+                except (TypeError, ValueError):\n+                    value = choices_group[0]\n+                    if isinstance(value, str) and len(value) > longest_value:\n+                        longest_value = len(value)\n+            \n+            if longest_value > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in choices \"\n+                        f\"(longest value is {longest_value} characters).\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                ]\n \n         # Expect [group_name, [value, display]]\n         for choices_group in self.choices:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..b20f14c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -124,6 +124,20 @@ class Field(RegisterLookupMixin):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n             return [checks.Error(\"'choices' must be an iterable (e.g., a list or tuple).\", obj=self, id='fields.E004')]\n+        if isinstance(self, CharField) and self.max_length is not None:\n+            longest_value = 0\n+            for choices_group in self.choices:\n+                try:\n+                    group_name, group_choices = choices_group\n+                    for value, human_name in group_choices:\n+                        if isinstance(value, str) and len(value) > longest_value:\n+                            longest_value = len(value)\n+                except (TypeError, ValueError):\n+                    value = choices_group[0]\n+                    if isinstance(value, str) and len(value) > longest_value:\n+                        longest_value = len(value)\n+            if longest_value > self.max_length:\n+                return [checks.Error(f\"'max_length' is too small to fit the longest value in choices (longest value is {longest_value} characters).\", obj=self, id='fields.E009')]\n         for choices_group in self.choices:\n             try:\n                 group_name, group_choices = choices_group\n", "normalized_occurrence": 1}
