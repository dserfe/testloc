{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..e47a187 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -187,10 +187,22 @@ class Nominal(Scale):\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with 0.5 padding on both ends for categorical-style spacing\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            \n+            # Create invisible artist with sticky edges to enforce the padding\n+            import matplotlib.patches as mpatches\n+            invisible_artist = mpatches.Rectangle((-0.5, 0), len(units_seed), 0, \n+                                               visible=False, transform=axis.get_transform())\n+            invisible_artist.sticky_edges.x = [-0.5, len(units_seed) - 0.5]\n+            axis.get_figure().add_artist(invisible_artist)\n+            \n+            # Disable grid by default for nominal scales\n+            axis.grid(False)\n+            \n+            # If this is a y-axis, invert it\n+            if getattr(axis, 'axis_name', None) == 'y':\n+                axis.invert_axis()\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..dabbe53 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -94,7 +94,14 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            import matplotlib.patches as mpatches\n+            invisible_artist = mpatches.Rectangle((-0.5, 0), len(units_seed), 0, visible=False, transform=axis.get_transform())\n+            invisible_artist.sticky_edges.x = [-0.5, len(units_seed) - 0.5]\n+            axis.get_figure().add_artist(invisible_artist)\n+            axis.grid(False)\n+            if getattr(axis, 'axis_name', None) == 'y':\n+                axis.invert_axis()\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
