{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..9b044c7 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1117,13 +1117,17 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n \n         return lev[i0:i1]\n \n-    def _process_contour_level_args(self, args):\n+    def _process_contour_level_args(self, args, z=None):\n         \"\"\"\n         Determine the contour levels and store in self.levels.\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                # For boolean arrays, use a single level at 0.5\n+                if z is not None and z.dtype == np.bool_:\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -1462,7 +1466,7 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n-        self._process_contour_level_args(args)\n+        self._process_contour_level_args(args, z)\n         return (x, y, z)\n \n     def _check_xyz(self, args, kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..997c8eb 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -480,10 +480,13 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         if i1 - i0 < 3:\n             i0, i1 = (0, len(lev))\n         return lev[i0:i1]\n-    def _process_contour_level_args(self, args):\n+    def _process_contour_level_args(self, args, z=None):\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7\n+                if z is not None and z.dtype == np.bool_:\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -678,7 +681,7 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n-        self._process_contour_level_args(args)\n+        self._process_contour_level_args(args, z)\n         return (x, y, z)\n     def _check_xyz(self, args, kwargs):\n         x, y = args[:2]\n", "normalized_occurrence": 1}
