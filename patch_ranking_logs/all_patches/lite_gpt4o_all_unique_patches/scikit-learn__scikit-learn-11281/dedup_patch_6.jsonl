{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..2ce3b97 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -596,7 +596,25 @@ class GaussianMixture(BaseMixture):\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n \n-    def _check_parameters(self, X):\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and predict the cluster labels for X. \n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            The input data.\n+        \n+        y : Ignored\n+            Not used, present here for API consistency by convention.\n+        \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component memberships for each sample.\n+        \"\"\"\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n         \"\"\"Check the Gaussian mixture parameters are well defined.\"\"\"\n         _, n_features = X.shape\n         if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n@@ -747,4 +765,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..b3e9a1e 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -122,7 +122,10 @@ class GaussianMixture(BaseMixture):\n         self.weights_init = weights_init\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n-    def _check_parameters(self, X):\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n         _, n_features = X.shape\n         if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n             raise ValueError(\"Invalid value for 'covariance_type': %s 'covariance_type' should be in ['spherical', 'tied', 'diag', 'full']\" % self.covariance_type)\n", "normalized_occurrence": 1}
