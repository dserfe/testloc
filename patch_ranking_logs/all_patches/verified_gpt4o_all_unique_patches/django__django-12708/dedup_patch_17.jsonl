{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..7e1dae5 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,15 +407,38 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n+        if len(constraint_names) == 0:\n+            raise ValueError(\"No constraints found for %s(%s)\" % (\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n+        elif len(constraint_names) > 1:\n+            # Filter out constraints that don't match the type we're trying to delete\n+            constraint_names = [\n+                name for name in constraint_names\n+                if self._constraint_matches_type(model, name, constraint_kwargs)\n+            ]\n+            if len(constraint_names) != 1:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n-    def alter_db_table(self, model, old_db_table, new_db_table):\n+    def _constraint_matches_type(self, model, constraint_name, constraint_kwargs):\n+        \"\"\"\n+        Check if the given constraint matches the type specified in constraint_kwargs.\n+        \"\"\"\n+        with self.connection.cursor() as cursor:\n+            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\n+            for constraint in constraints.values():\n+                if constraint['name'] == constraint_name:\n+                    if constraint_kwargs.get('unique') and constraint['unique']:\n+                        return True\n+                    if constraint_kwargs.get('index') and constraint['index']:\n+                        return True\n+        return False\n         \"\"\"Rename the table a model points to.\"\"\"\n         if (old_db_table == new_db_table or\n             (self.connection.features.ignores_table_name_case and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..7cc7454 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,10 +230,23 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+        if len(constraint_names) == 0:\n+            raise ValueError('No constraints found for %s(%s)' % (model._meta.db_table, ', '.join(columns)))\n+        elif len(constraint_names) > 1:\n+            constraint_names = [name for name in constraint_names if self._constraint_matches_type(model, name, constraint_kwargs)]\n+            if len(constraint_names) != 1:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n-    def alter_db_table(self, model, old_db_table, new_db_table):\n+    def _constraint_matches_type(self, model, constraint_name, constraint_kwargs):\n+        with self.connection.cursor() as cursor:\n+            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\n+            for constraint in constraints.values():\n+                if constraint['name'] == constraint_name:\n+                    if constraint_kwargs.get('unique') and constraint['unique']:\n+                        return True\n+                    if constraint_kwargs.get('index') and constraint['index']:\n+                        return True\n+        return False\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n         self.execute(self.sql_rename_table % {'old_table': self.quote_name(old_db_table), 'new_table': self.quote_name(new_db_table)})\n", "normalized_occurrence": 1}
