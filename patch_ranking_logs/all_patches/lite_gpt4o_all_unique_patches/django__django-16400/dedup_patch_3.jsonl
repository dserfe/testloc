{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 485b8be..4eec0e7 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -114,7 +114,7 @@ class Command(BaseCommand):\n         # Hook for backends needing any database preparation\n         connection.prepare_database()\n         # Work out which apps have migrations and which do not\n-        executor = MigrationExecutor(connection, self.migration_progress_callback)\n+        executor = MigrationExecutor(connection, self.migration_progress_callback, database)\n \n         # Raise an error if any migrations are applied before their dependencies.\n         executor.loader.check_consistent_history(connection)\n", "occurrence": 4, "normalized_patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 44b7858..cb38833 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -38,7 +38,7 @@ class Command(BaseCommand):\n                 import_module('.management', app_config.name)\n         connection = connections[database]\n         connection.prepare_database()\n-        executor = MigrationExecutor(connection, self.migration_progress_callback)\n+        executor = MigrationExecutor(connection, self.migration_progress_callback, database)\n         executor.loader.check_consistent_history(connection)\n         conflicts = executor.loader.detect_conflicts()\n         if conflicts:\n", "normalized_occurrence": 4}
