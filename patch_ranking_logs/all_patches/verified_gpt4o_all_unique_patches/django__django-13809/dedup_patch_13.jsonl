{"model_name_or_path": "agentless", "instance_id": "django__django-13809", "model_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 85f7e9c..dfe7f62 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -25,7 +25,7 @@ class Command(BaseCommand):\n     help = \"Starts a lightweight Web server for development.\"\n \n     # Validation is called explicitly each time the server is reloaded.\n-    requires_system_checks = []\n+    requires_system_checks = ALL_CHECKS\n     stealth_options = ('shutdown_message',)\n \n     default_addr = '127.0.0.1'\n@@ -39,18 +39,34 @@ class Command(BaseCommand):\n             'addrport', nargs='?',\n             help='Optional port number, or ipaddr:port'\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--ipv6', '-6', action='store_true', dest='use_ipv6',\n             help='Tells Django to use an IPv6 address.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--nothreading', action='store_false', dest='use_threading',\n             help='Tells Django to NOT use threading.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n@@ -114,11 +130,12 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n-        # Need to check migrations here, so can't use the\n-        # requires_migrations_check attribute.\n-        self.check_migrations()\n+        if not options['skip_checks']:\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            # Need to check migrations here, so can't use the\n+            # requires_migrations_check attribute.\n+            self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write((\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 823b122..c26b358 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -12,7 +12,7 @@ from django.utils.regex_helper import _lazy_re_compile\n naiveip_re = _lazy_re_compile('^(?:\\n(?P<addr>\\n    (?P<ipv4>\\\\d{1,3}(?:\\\\.\\\\d{1,3}){3}) |         # IPv4 address\\n    (?P<ipv6>\\\\[[a-fA-F0-9:]+\\\\]) |               # IPv6 address\\n    (?P<fqdn>[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*) # FQDN\\n):)?(?P<port>\\\\d+)$', re.X)\n class Command(BaseCommand):\n     help = 'Starts a lightweight Web server for development.'\n-    requires_system_checks = []\n+    requires_system_checks = ALL_CHECKS\n     stealth_options = ('shutdown_message',)\n     default_addr = '127.0.0.1'\n     default_addr_ipv6 = '::1'\n@@ -21,9 +21,13 @@ class Command(BaseCommand):\n     server_cls = WSGIServer\n     def add_arguments(self, parser):\n         parser.add_argument('addrport', nargs='?', help='Optional port number, or ipaddr:port')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n         parser.add_argument('--ipv6', '-6', action='store_true', dest='use_ipv6', help='Tells Django to use an IPv6 address.')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n         parser.add_argument('--nothreading', action='store_false', dest='use_threading', help='Tells Django to NOT use threading.')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n         parser.add_argument('--noreload', action='store_false', dest='use_reloader', help='Tells Django to NOT use the auto-reloader.')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n     def execute(self, *args, **options):\n         if options['no_color']:\n             os.environ['DJANGO_COLORS'] = 'nocolor'\n@@ -69,9 +73,10 @@ class Command(BaseCommand):\n         threading = options['use_threading']\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n-        self.stdout.write('Performing system checks...\\n\\n')\n-        self.check(display_num_errors=True)\n-        self.check_migrations()\n+        if not options['skip_checks']:\n+            self.stdout.write('Performing system checks...\\n\\n')\n+            self.check(display_num_errors=True)\n+            self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write('Django version %(version)s, using settings %(settings)r\\nStarting development server at %(protocol)s://%(addr)s:%(port)s/\\nQuit the server with %(quit_command)s.' % {'version': self.get_version(), 'settings': settings.SETTINGS_MODULE, 'protocol': self.protocol, 'addr': '[%s]' % self.addr if self._raw_ipv6 else self.addr, 'port': self.port, 'quit_command': quit_command})\n", "normalized_occurrence": 1}
