{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..e1a13f8 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,16 +37,20 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n+        # Create bound method and preserve original attributes\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)\n+        \n+        # Apply decorators\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n \n-    # Copy any attributes that a decorator adds to the function it decorates.\n+    # Preserve any existing attributes of 'method', including the name first\n+    update_wrapper(_wrapper, method)\n+    # Then copy any attributes that decorators might have added\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n-    # Preserve any existing attributes of 'method', including the name.\n-    update_wrapper(_wrapper, method)\n     return _wrapper\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..12ea6b7 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -16,12 +16,13 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n+    update_wrapper(_wrapper, method)\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n-    update_wrapper(_wrapper, method)\n     return _wrapper\n def method_decorator(decorator, name=''):\n     def _dec(obj):\n", "normalized_occurrence": 1}
