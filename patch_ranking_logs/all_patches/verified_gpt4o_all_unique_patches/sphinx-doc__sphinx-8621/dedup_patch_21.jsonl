{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..b4ce010 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': lambda text: parse_kbd(text),\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -45,6 +45,19 @@ generic_docroles = {\n     'regexp': nodes.literal,\n }\n \n+def parse_kbd(text):\n+    parts = re.split(r'(-|\\+|\\^)', text)\n+    if len(parts) == 1:\n+        return nodes.literal(text, text)\n+    else:\n+        children = []\n+        for part in parts:\n+            if part in ('-', '+', '^'):\n+                children.append(nodes.Text(part))\n+            else:\n+                children.append(nodes.literal(part, part))\n+        return nodes.literal('', '', *children)\n+\n \n # -- generic cross-reference role ----------------------------------------------\n \n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': lambda text: parse_kbd(text), 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+def parse_kbd(text):\n+    parts = re.split('(-|\\\\+|\\\\^)', text)\n+    if len(parts) == 1:\n+        return nodes.literal(text, text)\n+    else:\n+        children = []\n+        for part in parts:\n+            if part in ('-', '+', '^'):\n+                children.append(nodes.Text(part))\n+            else:\n+                children.append(nodes.literal(part, part))\n+        return nodes.literal('', '', *children)", "normalized_occurrence": 1}
