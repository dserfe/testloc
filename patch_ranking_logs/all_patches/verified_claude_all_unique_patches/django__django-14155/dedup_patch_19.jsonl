{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..8e8dd9c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,23 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        # Handle functools.partial\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            # This appears to be a functools.partial\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords or {}\n+            real_func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n+            real_func = func\n+\n+        if not hasattr(real_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = real_func.__class__.__module__ + '.' + real_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = real_func.__module__ + '.' + real_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +70,13 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if self.partial_args or self.partial_kwargs:\n+            func_repr = \"partial(%s, args=%r, kwargs=%r)\" % (\n+                self._func_path, self.partial_args, self.partial_kwargs\n+            )\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..f0fef57 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,16 +29,27 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords or {}\n+            real_func = func.func\n         else:\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n+            real_func = func\n+        if not hasattr(real_func, '__name__'):\n+            self._func_path = real_func.__class__.__module__ + '.' + real_func.__class__.__name__\n+        else:\n+            self._func_path = real_func.__module__ + '.' + real_func.__name__\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_repr = self._func_path\n+        if self.partial_args or self.partial_kwargs:\n+            func_repr = 'partial(%s, args=%r, kwargs=%r)' % (self._func_path, self.partial_args, self.partial_kwargs)\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
