{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..5ba626b 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3442,22 +3442,17 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         \"\"\"\n         stacking_dims = tuple(dim for dim in self.dims if dim not in sample_dims)\n \n-        for variable in self:\n-            dims = self[variable].dims\n-            dims_include_sample_dims = set(sample_dims) <= set(dims)\n-            if not dims_include_sample_dims:\n-                raise ValueError(\n-                    \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n-                )\n+        if not stacking_dims:  # Handle case when there are no dimensions to stack\n+            raise ValueError(\"No dimensions found to stack in the dataset.\")\n \n         def ensure_stackable(val):\n             assign_coords = {variable_dim: val.name}\n             for dim in stacking_dims:\n-                if dim not in val.dims:\n+                if dim not in val.dims and len(val.dims) > 0:\n                     assign_coords[dim] = None\n \n-            expand_dims = set(stacking_dims).difference(set(val.dims))\n+            # Ensure at least one dimension exists for single-dim variables\n+            expand_dims = set(stacking_dims).difference(set(val.dims)) if len(val.dims) > 0 else stacking_dims\n             expand_dims.add(variable_dim)\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..2898101 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1140,17 +1140,14 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         return result\n     def to_stacked_array(self, new_dim: Hashable, sample_dims: Sequence[Hashable], variable_dim: str='variable', name: Hashable=None) -> 'DataArray':\n         stacking_dims = tuple((dim for dim in self.dims if dim not in sample_dims))\n-        for variable in self:\n-            dims = self[variable].dims\n-            dims_include_sample_dims = set(sample_dims) <= set(dims)\n-            if not dims_include_sample_dims:\n-                raise ValueError('All variables in the dataset must contain the dimensions {}.'.format(dims))\n+        if not stacking_dims:\n+            raise ValueError('No dimensions found to stack in the dataset.')\n         def ensure_stackable(val):\n             assign_coords = {variable_dim: val.name}\n             for dim in stacking_dims:\n-                if dim not in val.dims:\n+                if dim not in val.dims and len(val.dims) > 0:\n                     assign_coords[dim] = None\n-            expand_dims = set(stacking_dims).difference(set(val.dims))\n+            expand_dims = set(stacking_dims).difference(set(val.dims)) if len(val.dims) > 0 else stacking_dims\n             expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n             return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n", "normalized_occurrence": 1}
