{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 5562d34..2d47f0e 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -193,6 +193,8 @@ class ProjectState:\n             model_state.options[option_name] = [\n                 obj for obj in objs if tuple(obj) != tuple(value_to_remove)\n             ]\n+            if not model_state.options[option_name]:\n+                del model_state.options[option_name]\n         self.reload_model(app_label, model_name, delay=True)\n \n     def alter_model_managers(self, app_label, model_name, managers):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 18747a4..30cb3be 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -125,6 +125,8 @@ class ProjectState:\n         model_state = self.models[app_label, model_name]\n         if (objs := model_state.options.get(option_name)):\n             model_state.options[option_name] = [obj for obj in objs if tuple(obj) != tuple(value_to_remove)]\n+            if not model_state.options[option_name]:\n+                del model_state.options[option_name]\n         self.reload_model(app_label, model_name, delay=True)\n     def alter_model_managers(self, app_label, model_name, managers):\n         model_state = self.models[app_label, model_name]\n", "normalized_occurrence": 1}
