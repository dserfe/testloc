{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 632624f..4fad39b 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -771,7 +771,11 @@ def nthroot_mod(a, n, p, all_roots=False):\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n-    if not is_nthpow_residue(a, n, p):\n+    if a % p == 0:\n+        if all_roots:\n+            return [0] if n == 1 else [0, *res]\n+        return 0\n+    elif not is_nthpow_residue(a, n, p):\n         return None\n     if not isprime(p):\n         raise NotImplementedError(\"Not implemented for composite p\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex abeb252..c463a18 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -458,7 +458,11 @@ def nthroot_mod(a, n, p, all_roots=False):\n     a, n, p = (as_int(a), as_int(n), as_int(p))\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n-    if not is_nthpow_residue(a, n, p):\n+    if a % p == 0:\n+        if all_roots:\n+            return [0] if n == 1 else [0, *res]\n+        return 0\n+    elif not is_nthpow_residue(a, n, p):\n         return None\n     if not isprime(p):\n         raise NotImplementedError('Not implemented for composite p')\n", "normalized_occurrence": 1}
