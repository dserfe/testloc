{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 0aa71a3..9b39e2c 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -223,11 +223,23 @@ class AlterField(FieldOperation):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n-        state.models[app_label, self.model_name_lower].fields = [\n+        model_state = state.models[app_label, self.model_name_lower]\n+        model_state.fields = [\n             (n, field if n == self.name else f)\n-            for n, f in\n-            state.models[app_label, self.model_name_lower].fields\n+            for n, f in model_state.fields\n         ]\n+        # Fix to_fields to refer to the new field.\n+        for _, related_model_state in state.models.items():\n+            for index, (name, field) in enumerate(related_model_state.fields):\n+                if getattr(field.remote_field, 'model', None) == model_state.model:\n+                    if field.remote_field.field_name == self.old_name:\n+                        field.remote_field.field_name = self.new_name\n+                    to_fields = getattr(field, 'to_fields', None)\n+                    if to_fields:\n+                        field.to_fields = tuple(\n+                            self.new_name if to_field_name == self.old_name else to_field_name\n+                            for to_field_name in to_fields\n+                        )\n         # TODO: investigate if old relational fields must be reloaded or if it's\n         # sufficient if the new field is (#27737).\n         # Delay rendering of relationships if it's not a relational field and\n@@ -399,4 +411,4 @@ class RenameField(FieldOperation):\n         return (\n             super(FieldOperation, self).reduce(operation, app_label=app_label) or\n             not operation.references_field(self.model_name, self.new_name, app_label)\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex b2b87fe..1a0ee76 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -133,7 +133,16 @@ class AlterField(FieldOperation):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n-        state.models[app_label, self.model_name_lower].fields = [(n, field if n == self.name else f) for n, f in state.models[app_label, self.model_name_lower].fields]\n+        model_state = state.models[app_label, self.model_name_lower]\n+        model_state.fields = [(n, field if n == self.name else f) for n, f in model_state.fields]\n+        for _, related_model_state in state.models.items():\n+            for index, (name, field) in enumerate(related_model_state.fields):\n+                if getattr(field.remote_field, 'model', None) == model_state.model:\n+                    if field.remote_field.field_name == self.old_name:\n+                        field.remote_field.field_name = self.new_name\n+                    to_fields = getattr(field, 'to_fields', None)\n+                    if to_fields:\n+                        field.to_fields = tuple((self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields))\n         delay = not field.is_relation and (not is_referenced_by_foreign_key(state, self.model_name_lower, self.field, self.name))\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "normalized_occurrence": 1}
