{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex ee234a8..ef5dd45 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -162,8 +162,8 @@ class ForwardManyToOneDescriptor:\n             False,\n         )\n \n-    def get_object(self, instance):\n-        qs = self.get_queryset(instance=instance)\n+    def get_object(self, instance, db=None):\n+        qs = self.get_queryset(instance=instance).using(db)\n         # Assuming the database enforces foreign keys, this won't fail.\n         return qs.get(self.field.get_reverse_related_filter(instance))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 9a2fbb3..8cb86e1 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -39,8 +39,8 @@ class ForwardManyToOneDescriptor:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n-    def get_object(self, instance):\n-        qs = self.get_queryset(instance=instance)\n+    def get_object(self, instance, db=None):\n+        qs = self.get_queryset(instance=instance).using(db)\n         return qs.get(self.field.get_reverse_related_filter(instance))\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
