{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..ba29dcf 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,8 +114,10 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    # Split only on commas that are not within parentheses to handle comma in regex\n+    regex_parts = re.split(r'(?<!\\\\),', value)\n+    for pattern in regex_parts:\n+        patterns.append(_regex_transformer(pattern.strip()))\n     return patterns\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..a493b8e 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,8 +55,9 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    regex_parts = re.split('(?<!\\\\\\\\),', value)\n+    for pattern in regex_parts:\n+        patterns.append(_regex_transformer(pattern.strip()))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n", "normalized_occurrence": 1}
