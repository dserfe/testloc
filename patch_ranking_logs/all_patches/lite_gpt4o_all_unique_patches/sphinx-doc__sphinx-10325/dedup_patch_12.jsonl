{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..84a0860 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,16 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[Union[str, Tuple[str, ...]]]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg in (None, True):\n-        return 'object'\n+        return {'object'}\n+    elif isinstance(arg, str):\n+        return {arg}\n+    elif isinstance(arg, list):\n+        return set(arg)\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -1710,7 +1714,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, list(members.values())\n+            base_classes = self.options.inherited_members\n+            filtered_members = [m for m in members.values() if m.class_ not in base_classes]\n+            return False, filtered_members\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..93ba81b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -55,11 +55,15 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return EMPTY\n     return {x.strip() for x in arg.split(',') if x.strip()}\n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[Union[str, Tuple[str, ...]]]]:\n     if arg in (None, True):\n-        return 'object'\n+        return {'object'}\n+    elif isinstance(arg, str):\n+        return {arg}\n+    elif isinstance(arg, list):\n+        return set(arg)\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -980,7 +984,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+            base_classes = self.options.inherited_members\n+            filtered_members = [m for m in members.values() if m.class_ not in base_classes]\n+            return (False, filtered_members)\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
