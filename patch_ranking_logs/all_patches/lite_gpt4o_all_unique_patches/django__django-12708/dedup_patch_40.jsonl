{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..ea23b89 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -408,12 +408,21 @@ class BaseDatabaseSchemaEditor:\n             **constraint_kwargs\n         )\n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+            # Check if we have exactly two constraints (unique and index)\n+            if len(constraint_names) == 2 and 'unique' in constraint_kwargs:\n+                # Remove the unique constraint\n+                for name in constraint_names:\n+                    if '_uniq' in name:\n+                        self.execute(self._delete_constraint_sql(sql, model, name))\n+                        return\n+            else:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n+        else:\n+            self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..dcbce15 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -231,8 +231,15 @@ class BaseDatabaseSchemaEditor:\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+            if len(constraint_names) == 2 and 'unique' in constraint_kwargs:\n+                for name in constraint_names:\n+                    if '_uniq' in name:\n+                        self.execute(self._delete_constraint_sql(sql, model, name))\n+                        return\n+            else:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+        else:\n+            self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n", "normalized_occurrence": 1}
