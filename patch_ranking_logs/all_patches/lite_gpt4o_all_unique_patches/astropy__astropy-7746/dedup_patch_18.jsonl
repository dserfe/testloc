{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..6eb5f49 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,11 +1212,14 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n-            try:\n-                axes = np.broadcast_arrays(*axes)\n-            except ValueError:\n-                raise ValueError(\n-                    \"Coordinate arrays are not broadcastable to each other\")\n+            if any(len(ax) == 0 for ax in axes):\n+                return [np.array([]) for _ in range(self.naxis)]\n+            else:\n+                try:\n+                    axes = np.broadcast_arrays(*axes)\n+                except ValueError:\n+                    raise ValueError(\n+                        \"Coordinate arrays are not broadcastable to each other\")\n \n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..b047a6e 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -594,10 +594,13 @@ class WCS(WCSBase):\n             return out\n     def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         def _return_list_of_arrays(axes, origin):\n-            try:\n-                axes = np.broadcast_arrays(*axes)\n-            except ValueError:\n-                raise ValueError('Coordinate arrays are not broadcastable to each other')\n+            if any((len(ax) == 0 for ax in axes)):\n+                return [np.array([]) for _ in range(self.naxis)]\n+            else:\n+                try:\n+                    axes = np.broadcast_arrays(*axes)\n+                except ValueError:\n+                    raise ValueError('Coordinate arrays are not broadcastable to each other')\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n", "normalized_occurrence": 1}
