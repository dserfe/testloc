{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..db3cedd 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,7 +108,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not lckey[0:1].isalpha() and not lckey.startswith('_'):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n@@ -165,7 +165,7 @@ class IndexEntries:\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n+                if letter.isalpha():\n                     return letter\n                 else:\n                     # get all other symbols under one heading\n@@ -173,4 +173,4 @@ class IndexEntries:\n             else:\n                 return v[2]\n         return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                for (key_, group) in groupby(newlist, keyfunc3)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..8e196a7 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -73,7 +73,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\u200f'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not lckey[0:1].isalpha() and (not lckey.startswith('_')):\n                 lckey = chr(127) + lckey\n             return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n@@ -109,7 +109,7 @@ class IndexEntries:\n                 if k.startswith('\\u200f'):\n                     k = k[1:]\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n+                if letter.isalpha():\n                     return letter\n                 else:\n                     return _('Symbols')\n", "normalized_occurrence": 1}
