{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7ba849d..f1c1519 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -312,8 +312,17 @@ class ModelBase(type):\n             new_class.Meta = attr_meta\n             return new_class\n \n-        new_class._prepare()\n-        new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+        try:\n+            new_class._prepare()\n+            new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+        except ValueError:\n+            # Handle the case where the table name is reused by multiple apps/models\n+            if connection.settings_dict['ENGINE'] == 'django.db.backends.sqlite3':\n+                new_class._meta.db_table = '{}_{}'.format(new_class._meta.app_label, new_class._meta.model_name)\n+                new_class._prepare()\n+                new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+            else:\n+                raise\n         return new_class\n \n     def add_to_class(cls, name, value):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex c4aea35..d1e5828 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -156,8 +156,16 @@ class ModelBase(type):\n             attr_meta.abstract = False\n             new_class.Meta = attr_meta\n             return new_class\n-        new_class._prepare()\n-        new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+        try:\n+            new_class._prepare()\n+            new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+        except ValueError:\n+            if connection.settings_dict['ENGINE'] == 'django.db.backends.sqlite3':\n+                new_class._meta.db_table = '{}_{}'.format(new_class._meta.app_label, new_class._meta.model_name)\n+                new_class._prepare()\n+                new_class._meta.apps.register_model(new_class._meta.app_label, new_class)\n+            else:\n+                raise\n         return new_class\n     def add_to_class(cls, name, value):\n         if _has_contribute_to_class(value):\n", "normalized_occurrence": 1}
