{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..6f20fb9 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -150,6 +150,7 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -734,6 +735,7 @@ class Text(Artist):\n                 self._bbox_patch.draw(renderer)\n \n             gc = renderer.new_gc()\n+            gc.set_antialiased(self.get_antialiased())\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n@@ -770,7 +772,20 @@ class Text(Artist):\n         renderer.close_group('text')\n         self.stale = False\n \n-    def get_color(self):\n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiasing for text rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n         \"\"\"Return the color of the text.\"\"\"\n         return self._color\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..273fff4 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -46,6 +46,7 @@ class Text(Artist):\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n@@ -367,6 +368,7 @@ class Text(Artist):\n                 self.update_bbox_position_size(renderer)\n                 self._bbox_patch.draw(renderer)\n             gc = renderer.new_gc()\n+            gc.set_antialiased(self.get_antialiased())\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n@@ -391,7 +393,11 @@ class Text(Artist):\n         gc.restore()\n         renderer.close_group('text')\n         self.stale = False\n-    def get_color(self):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         return self._color\n     def get_fontproperties(self):\n         return self._fontproperties\n", "normalized_occurrence": 1}
