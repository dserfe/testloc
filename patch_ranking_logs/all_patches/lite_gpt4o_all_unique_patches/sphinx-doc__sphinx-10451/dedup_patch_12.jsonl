{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..6cb4049 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -149,16 +149,16 @@ def augment_descriptions_with_types(\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                # :param xxx:\n-                has_description.add(parts[1])\n+        if parts[0] == 'param' or parts[0] == '*args' or parts[0] == '**kwargs':\n+            if len(parts) == 2 or (len(parts) == 3 and (parts[1] == '*' or parts[1] == '**')):\n+                # :param xxx: or :param *args: or :param **kwargs:\n+                has_description.add(parts[-1])\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n                 name = ' '.join(parts[2:])\n                 has_description.add(name)\n                 has_type.add(name)\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' or parts[0] == '*args' or parts[0] == '**kwargs':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..d57b1a1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -111,14 +111,14 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                has_description.add(parts[1])\n+        if parts[0] == 'param' or parts[0] == '*args' or parts[0] == '**kwargs':\n+            if len(parts) == 2 or (len(parts) == 3 and (parts[1] == '*' or parts[1] == '**')):\n+                has_description.add(parts[-1])\n             elif len(parts) > 2:\n                 name = ' '.join(parts[2:])\n                 has_description.add(name)\n                 has_type.add(name)\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' or parts[0] == '*args' or parts[0] == '**kwargs':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n", "normalized_occurrence": 1}
