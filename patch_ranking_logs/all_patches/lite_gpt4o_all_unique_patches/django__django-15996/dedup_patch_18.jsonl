{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..755e0a0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,18 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n+        except AttributeError:\n+            # Decompose combined flags\n+            flag_names = [e.name for e in enum._decompose(enum_class, self.value)]\n+            return (\n+                \"%s.%s(%s)\" % (module, enum_class.__qualname__, \" | \".join(\"%s.%s.%s\" % (module, enum_class.__qualname__, name) for name in flag_names)),\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..27c6f2f 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,11 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        except AttributeError:\n+            flag_names = [e.name for e in enum._decompose(enum_class, self.value)]\n+            return ('%s.%s(%s)' % (module, enum_class.__qualname__, ' | '.join(('%s.%s.%s' % (module, enum_class.__qualname__, name) for name in flag_names))), {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
