{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..6c6802a 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,12 +130,26 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n-    parse_args += [\n-        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n-    ]\n+    # Handle mutually exclusive groups and required arguments\n+    for group in parser._mutually_exclusive_groups:\n+        group_required_options = [\n+            opt for opt in group._group_actions if opt.required or group.required\n+        ]\n+        if group_required_options:\n+            if not any(opt.dest in arg_options for opt in group_required_options):\n+                raise CommandError(\n+                    \"Error: one of the arguments {} is required\".format(\n+                        \" \".join(\n+                            \"--\" + opt.dest.replace('_', '-') for opt in group_required_options\n+                        )\n+                    )\n+                )\n+            for opt in group_required_options:\n+                if opt.dest in arg_options:\n+                    parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))\n+\n+    defaults = parser.parse_args(args=parse_args)\n+    defaults = dict(defaults._get_kwargs(), **arg_options)\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..75a9a99 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,16 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    for group in parser._mutually_exclusive_groups:\n+        group_required_options = [opt for opt in group._group_actions if opt.required or group.required]\n+        if group_required_options:\n+            if not any((opt.dest in arg_options for opt in group_required_options)):\n+                raise CommandError('Error: one of the arguments {} is required'.format(' '.join(('--' + opt.dest.replace('_', '-') for opt in group_required_options))))\n+            for opt in group_required_options:\n+                if opt.dest in arg_options:\n+                    parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))\n+    defaults = parser.parse_args(args=parse_args)\n+    defaults = dict(defaults._get_kwargs(), **arg_options)\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
