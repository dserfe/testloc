{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 3a34bd9..f97a14d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1677,13 +1677,17 @@ class SQLAggregateCompiler(SQLCompiler):\n             sql.append(ann_sql)\n             params.extend(ann_params)\n         self.col_count = len(self.query.annotation_select)\n-        sql = ', '.join(sql)\n-        params = tuple(params)\n+        if sql:\n+            sql = ', '.join(sql)\n+            params = tuple(params)\n+            sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n+        else:\n+            # If there are no annotations left after handling defaults, select all columns\n+            sql = 'SELECT * FROM (%s) subquery' % inner_query_sql\n \n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n             self.using, elide_empty=self.elide_empty,\n         ).as_sql(with_col_aliases=True)\n-        sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n         params = params + inner_query_params\n         return sql, params\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 79108fc..9b54c6b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -944,10 +944,13 @@ class SQLAggregateCompiler(SQLCompiler):\n             sql.append(ann_sql)\n             params.extend(ann_params)\n         self.col_count = len(self.query.annotation_select)\n-        sql = ', '.join(sql)\n-        params = tuple(params)\n+        if sql:\n+            sql = ', '.join(sql)\n+            params = tuple(params)\n+            sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n+        else:\n+            sql = 'SELECT * FROM (%s) subquery' % inner_query_sql\n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(self.using, elide_empty=self.elide_empty).as_sql(with_col_aliases=True)\n-        sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n         params = params + inner_query_params\n         return (sql, params)\n def cursor_iter(cursor, sentinel, col_count, itersize):\n", "normalized_occurrence": 1}
