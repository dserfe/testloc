{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..4b8f54d 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -901,17 +901,17 @@ def stringify_expr(s, local_dict, global_dict, transformations):\n     for transform in transformations:\n         tokens = transform(tokens, local_dict, global_dict)\n \n-    return untokenize(tokens)\n+    return untokenize(tokens), evaluate\n \n \n-def eval_expr(code, local_dict, global_dict):\n+def eval_expr(code, local_dict, global_dict, evaluate=True):\n     \"\"\"\n     Evaluate Python code generated by ``stringify_expr``.\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n     expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+        code, global_dict, local_dict) if evaluate else code  # take local objects in preference and evaluate if required\n     return expr\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex e068f1d..aab03c7 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -474,9 +474,9 @@ def stringify_expr(s, local_dict, global_dict, transformations):\n         tokens.append((toknum, tokval))\n     for transform in transformations:\n         tokens = transform(tokens, local_dict, global_dict)\n-    return untokenize(tokens)\n-def eval_expr(code, local_dict, global_dict):\n-    expr = eval(code, global_dict, local_dict)\n+    return (untokenize(tokens), evaluate)\n+def eval_expr(code, local_dict, global_dict, evaluate=True):\n+    expr = eval(code, global_dict, local_dict) if evaluate else code\n     return expr\n def parse_expr(s, local_dict=None, transformations=standard_transformations, global_dict=None, evaluate=True):\n     if local_dict is None:\n", "normalized_occurrence": 1}
