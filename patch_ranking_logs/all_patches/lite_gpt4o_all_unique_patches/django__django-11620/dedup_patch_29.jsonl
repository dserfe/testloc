{"model_name_or_path": "agentless", "instance_id": "django__django-11620", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex fa06caa..cdb31e2 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -456,7 +456,7 @@ class ExceptionReporter:\n         return frames\n \n \n-def technical_404_response(request, exception):\n+def technical_404_response(request, exception, resolver_match=None):\n     \"\"\"Create a technical 404 error response. `exception` is the Http404.\"\"\"\n     try:\n         error_url = exception.args[0]['path']\n@@ -481,21 +481,23 @@ def technical_404_response(request, exception):\n         urlconf = urlconf.__name__\n \n     caller = ''\n-    try:\n-        resolver_match = resolve(request.path)\n-    except Resolver404:\n-        pass\n-    else:\n+    if resolver_match is None:\n+        try:\n+            resolver_match = resolve(request.path)\n+        except Resolver404:\n+            pass\n+    \n+    if resolver_match:\n         obj = resolver_match.func\n \n         if hasattr(obj, '__name__'):\n             caller = obj.__name__\n-        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n+        elif hasattr(obj.__class__, '__name__'):\n             caller = obj.__class__.__name__\n \n         if hasattr(obj, '__module__'):\n             module = obj.__module__\n-            caller = '%s.%s' % (module, caller)\n+            caller = f'{module}.{caller}'\n \n     with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 9e5f1cd..392be32 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -261,7 +261,7 @@ class ExceptionReporter:\n             else:\n                 tb = tb.tb_next\n         return frames\n-def technical_404_response(request, exception):\n+def technical_404_response(request, exception, resolver_match=None):\n     try:\n         error_url = exception.args[0]['path']\n     except (IndexError, TypeError, KeyError):\n@@ -277,19 +277,20 @@ def technical_404_response(request, exception):\n     if isinstance(urlconf, types.ModuleType):\n         urlconf = urlconf.__name__\n     caller = ''\n-    try:\n-        resolver_match = resolve(request.path)\n-    except Resolver404:\n-        pass\n-    else:\n+    if resolver_match is None:\n+        try:\n+            resolver_match = resolve(request.path)\n+        except Resolver404:\n+            pass\n+    if resolver_match:\n         obj = resolver_match.func\n         if hasattr(obj, '__name__'):\n             caller = obj.__name__\n-        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n+        elif hasattr(obj.__class__, '__name__'):\n             caller = obj.__class__.__name__\n         if hasattr(obj, '__module__'):\n             module = obj.__module__\n-            caller = '%s.%s' % (module, caller)\n+            caller = f'{module}.{caller}'\n     with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     c = Context({'urlconf': urlconf, 'root_urlconf': settings.ROOT_URLCONF, 'request_path': error_url, 'urlpatterns': tried, 'reason': str(exception), 'request': request, 'settings': get_safe_settings(), 'raising_view_name': caller})\n", "normalized_occurrence": 1}
