{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..d233a3a 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -129,6 +129,19 @@ class DjangoHelpFormatter(HelpFormatter):\n \n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n+        \n+    def format_help(self):\n+        help_text = super().format_help()\n+        # Split the help text by newlines and remove common leading whitespace\n+        lines = help_text.splitlines()\n+        if lines:\n+            # Find the minimum indentation of non-empty lines\n+            indents = [len(line) - len(line.lstrip()) for line in lines if line.strip()]\n+            if indents:\n+                min_indent = min(indents)\n+                # Remove the common indentation from each line\n+                lines = [line[min_indent:] if line.strip() else line for line in lines]\n+        return '\\n'.join(lines)\n \n \n class OutputWrapper(TextIOBase):\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def format_help(self):\n+        help_text = super().format_help()\n+        lines = help_text.splitlines()\n+        if lines:\n+            indents = [len(line) - len(line.lstrip()) for line in lines if line.strip()]\n+            if indents:\n+                min_indent = min(indents)\n+                lines = [line[min_indent:] if line.strip() else line for line in lines]\n+        return '\\n'.join(lines)", "normalized_occurrence": 1}
