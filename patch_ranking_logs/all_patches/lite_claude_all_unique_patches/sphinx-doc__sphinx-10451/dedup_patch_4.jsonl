{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..435b1e1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -115,6 +115,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n+        # Handle *args and **kwargs special cases\n+        if name.startswith('*'):\n+            # Skip if we already have a param field for this star argument\n+            has_param = any(field[0].astext().split()[1:] == [name] \n+                          for field in node if field[0].astext().startswith('param'))\n+            if not has_param:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'param ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n+                node += field\n+            continue\n+\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..2c6db8a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -85,6 +85,14 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        if name.startswith('*'):\n+            has_param = any((field[0].astext().split()[1:] == [name] for field in node if field[0].astext().startswith('param')))\n+            if not has_param:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'param ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n+                node += field\n+            continue\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n", "normalized_occurrence": 1}
