{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11333", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex fa86ab6..7ab6a69 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -64,10 +64,13 @@ class ResolverMatch:\n \n \n @functools.lru_cache(maxsize=None)\n+def _get_resolver(urlconf):\n+    return URLResolver(RegexPattern(r'^/'), urlconf)\n+\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n-    return URLResolver(RegexPattern(r'^/'), urlconf)\n+    return _get_resolver(urlconf)\n \n \n @functools.lru_cache(maxsize=None)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 3a1aa93..0d060e7 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -38,10 +38,12 @@ class ResolverMatch:\n     def __repr__(self):\n         return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n @functools.lru_cache(maxsize=None)\n+def _get_resolver(urlconf):\n+    return URLResolver(RegexPattern('^/'), urlconf)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n-    return URLResolver(RegexPattern('^/'), urlconf)\n+    return _get_resolver(urlconf)\n @functools.lru_cache(maxsize=None)\n def get_ns_resolver(ns_pattern, resolver, converters):\n     pattern = RegexPattern(ns_pattern)\n", "normalized_occurrence": 1}
