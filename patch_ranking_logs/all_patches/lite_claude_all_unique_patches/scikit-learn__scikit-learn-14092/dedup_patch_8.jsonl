{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..1b44a08 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,12 +972,25 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+    import numbers\n+    import numpy as np\n+    \n+    if isinstance(target_type, (type, tuple)):\n+        # For non-numeric types, keep strict type checking\n+        if not issubclass(target_type, numbers.Number):\n+            if not isinstance(x, target_type):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'\n+                              .format(name, target_type, type(x)))\n+        # For numeric types, use numpy's issubdtype for more flexible checking\n+        else:\n+            if not isinstance(x, (numbers.Number, np.number)):\n+                raise TypeError('`{}` must be a number, not {}.'\n+                              .format(name, type(x)))\n+            # Convert to the target numeric type if needed\n+            x = target_type(x)\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..ef8494a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,8 +281,16 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    import numbers\n+    import numpy as np\n+    if isinstance(target_type, (type, tuple)):\n+        if not issubclass(target_type, numbers.Number):\n+            if not isinstance(x, target_type):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+        else:\n+            if not isinstance(x, (numbers.Number, np.number)):\n+                raise TypeError('`{}` must be a number, not {}.'.format(name, type(x)))\n+            x = target_type(x)\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n     if max_val is not None and x > max_val:\n", "normalized_occurrence": 1}
