{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 2c937f2..fa2c896 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -37,8 +37,11 @@ def dispatch_hook(key, hooks, hook_data):\n     if key in hooks:\n         hooks = hooks.get(key)\n \n-        if hasattr(hooks, '__call__'):\n-            hooks = [hooks]\n+        if hooks is not None:\n+            if hasattr(hooks, '__call__'):\n+                hooks = [hooks]\n+            elif not isinstance(hooks, (list, tuple)):\n+                raise ValueError('hooks must be a callable or a list/tuple of callables')\n \n         for hook in hooks:\n             _hook_data = hook(hook_data)\n@@ -46,4 +49,4 @@ def dispatch_hook(key, hooks, hook_data):\n                 hook_data = _hook_data\n \n \n-    return hook_data\n+    return hook_data\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 7057710..34774ff 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -3,8 +3,11 @@ def dispatch_hook(key, hooks, hook_data):\n     hooks = hooks or dict()\n     if key in hooks:\n         hooks = hooks.get(key)\n-        if hasattr(hooks, '__call__'):\n-            hooks = [hooks]\n+        if hooks is not None:\n+            if hasattr(hooks, '__call__'):\n+                hooks = [hooks]\n+            elif not isinstance(hooks, (list, tuple)):\n+                raise ValueError('hooks must be a callable or a list/tuple of callables')\n         for hook in hooks:\n             _hook_data = hook(hook_data)\n             if _hook_data is not None:\n", "normalized_occurrence": 1}
