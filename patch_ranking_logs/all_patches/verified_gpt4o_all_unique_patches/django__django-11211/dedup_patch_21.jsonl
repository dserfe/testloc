{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..9966c98 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -191,6 +191,8 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+            if issubclass(ct.model_class()._meta.pk.__class__, UUIDField):\n+                fkeys = [str(fk) for fk in fkeys]\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n \n         # For doing the join in Python, we have to match both the FK val and the\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..d5854fc 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -93,6 +93,8 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+            if issubclass(ct.model_class()._meta.pk.__class__, UUIDField):\n+                fkeys = [str(fk) for fk in fkeys]\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n         def gfk_key(obj):\n             ct_id = getattr(obj, ct_attname)\n", "normalized_occurrence": 1}
