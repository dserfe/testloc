{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13043", "model_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 1e4efa0..843bcfb 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -569,7 +569,9 @@ def decompose(expr, separate=False):\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                # Sort by degree first, then by the string representation of the term for consistency\n+                sorted_degrees = sorted(degrees, key=lambda x: (x[0], str(x[1])))\n+                return [monom[1] for monom in sorted_degrees]\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 5b23da9..c4c8ae5 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -235,7 +235,8 @@ def decompose(expr, separate=False):\n             symbols = expr.atoms(Symbol)\n             degrees = [(sum(degree_list(monom, *symbols)), monom) for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                sorted_degrees = sorted(degrees, key=lambda x: (x[0], str(x[1])))\n+                return [monom[1] for monom in sorted_degrees]\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n", "normalized_occurrence": 1}
