{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..e32f829 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,7 +475,18 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n+        \n+        # Wrap with DISTINCT ON if needed\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields = ', '.join(self.quote_name_unless_alias(field) for field in self.query.distinct_fields)\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(\n+                distinct_fields,\n+                combined_sql,\n+                self.connection.ops.quote_name('subquery')\n+            )\n+            \n+        result = [combined_sql]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..3812efd 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,7 +267,11 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields = ', '.join((self.quote_name_unless_alias(field) for field in self.query.distinct_fields))\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(distinct_fields, combined_sql, self.connection.ops.quote_name('subquery'))\n+        result = [combined_sql]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "normalized_occurrence": 2}
