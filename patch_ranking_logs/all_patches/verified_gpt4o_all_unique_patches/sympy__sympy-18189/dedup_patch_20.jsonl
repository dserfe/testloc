{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..92f0bf5 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -179,10 +179,16 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+            if set(syms) != set(var):\n+                raise ValueError(\"The provided symbols do not match the free symbols in the equation.\")\n+            dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+            solutions = diophantine(eq, param)\n+            if permute:\n+                permuted_solutions = set()\n+                for solution in solutions:\n+                    permuted_solutions.update(itertools.permutations(solution))\n+                solutions = permuted_solutions\n+            return {tuple(solution[dict_sym_index[sym]] for sym in syms) for solution in solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..0aaf443 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,9 +70,16 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+            if set(syms) != set(var):\n+                raise ValueError('The provided symbols do not match the free symbols in the equation.')\n+            dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+            solutions = diophantine(eq, param)\n+            if permute:\n+                permuted_solutions = set()\n+                for solution in solutions:\n+                    permuted_solutions.update(itertools.permutations(solution))\n+                solutions = permuted_solutions\n+            return {tuple((solution[dict_sym_index[sym]] for sym in syms)) for solution in solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
