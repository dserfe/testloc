{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..42d6f9d 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -63,7 +63,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.autodoc_type_aliases)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -79,7 +79,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -111,14 +111,26 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotation, annotation)))\n             node += field\n+\n+    if 'return' in annotations and 'return' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotations['return'], annotations['return'])))\n+        node += field\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n+    if 'return' in annotations and 'return' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotations['return'], annotations['return'])))\n+        node += field\n+\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..e9cb83f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -41,7 +41,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.autodoc_type_aliases)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n@@ -51,7 +51,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -79,13 +79,23 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotation, annotation)))\n             node += field\n+    if 'return' in annotations and 'return' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotations['return'], annotations['return'])))\n+        node += field\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n+    if 'return' in annotations and 'return' not in arguments:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', type_aliases.get(annotations['return'], annotations['return'])))\n+        node += field\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n", "normalized_occurrence": 1}
