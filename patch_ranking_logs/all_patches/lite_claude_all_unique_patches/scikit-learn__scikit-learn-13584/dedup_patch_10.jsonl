{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 73c394e..e306929 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -235,16 +235,31 @@ class BaseEstimator:\n \n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n \n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n \n+        # Convert numpy arrays to lists in a copy of self to avoid array comparisons\n+        class_dict = self.__dict__.copy()\n+        for key, value in class_dict.items():\n+            if isinstance(value, np.ndarray):\n+                class_dict[key] = value.tolist()\n+        \n+        # Create a temporary object with the same class but converted parameters\n+        class _TempEstimator:\n+            def __init__(self, class_dict):\n+                self.__dict__ = class_dict\n+                self.__class__ = self.__class__\n+        \n+        temp_estimator = _TempEstimator(class_dict)\n+\n         # use ellipsis for sequences with a lot of elements\n         pp = _EstimatorPrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n             n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n \n-        repr_ = pp.pformat(self)\n+        repr_ = pp.pformat(temp_estimator)\n \n         # Use bruteforce ellipsis if string is very long\n         if len(''.join(repr_.split())) > N_CHAR_MAX:  # check non-blank chars\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 64d90d3..ea4823b 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -101,10 +101,20 @@ class BaseEstimator:\n         return self\n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n         N_CHAR_MAX = 700\n         N_MAX_ELEMENTS_TO_SHOW = 30\n+        class_dict = self.__dict__.copy()\n+        for key, value in class_dict.items():\n+            if isinstance(value, np.ndarray):\n+                class_dict[key] = value.tolist()\n+        class _TempEstimator:\n+            def __init__(self, class_dict):\n+                self.__dict__ = class_dict\n+                self.__class__ = self.__class__\n+        temp_estimator = _TempEstimator(class_dict)\n         pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n-        repr_ = pp.pformat(self)\n+        repr_ = pp.pformat(temp_estimator)\n         if len(''.join(repr_.split())) > N_CHAR_MAX:\n             lim = N_CHAR_MAX // 2\n             repr_ = repr_[:lim] + '...' + repr_[-lim:]\n", "normalized_occurrence": 1}
