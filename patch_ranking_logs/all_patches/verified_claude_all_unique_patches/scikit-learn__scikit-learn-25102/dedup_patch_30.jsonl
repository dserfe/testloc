{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25102", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..d5e05b0 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -36,6 +38,10 @@ def _wrap_in_pandas_container(\n     index : array-like, default=None\n         Index for data.\n \n+    dtypes : dict or None, default=None\n+        Dictionary mapping column names to dtypes. If provided, the resulting\n+        DataFrame will use these dtypes for the specified columns.\n+\n     Returns\n     -------\n     dataframe : DataFrame\n@@ -57,9 +63,20 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            # Only modify dtypes for columns that are specified\n+            for col, dtype in dtypes.items():\n+                if col in data_to_wrap.columns:\n+                    data_to_wrap[col] = data_to_wrap[col].astype(dtype)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        # Only set dtypes for columns that are specified\n+        for col, dtype in dtypes.items():\n+            if col in df.columns:\n+                df[col] = df[col].astype(dtype)\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,10 +144,19 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    # Get original dtypes if input was a pandas DataFrame\n+    dtypes = None\n+    if hasattr(original_input, \"dtypes\"):\n+        # Only include dtypes for columns that are in the output\n+        selected_cols = estimator.get_feature_names_out()\n+        dtypes = {col: original_input.dtypes[col] for col in selected_cols \n+                 if col in original_input.columns}\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=dtypes,\n     )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..10a41a4 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -3,7 +3,7 @@ from scipy.sparse import issparse\n from . import check_pandas_support\n from .._config import get_config\n from ._available_if import available_if\n-def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n+def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None, dtypes=None):\n     if issparse(data_to_wrap):\n         raise ValueError('Pandas output does not support sparse data.')\n     if callable(columns):\n@@ -17,8 +17,17 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            for col, dtype in dtypes.items():\n+                if col in data_to_wrap.columns:\n+                    data_to_wrap[col] = data_to_wrap[col].astype(dtype)\n         return data_to_wrap\n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        for col, dtype in dtypes.items():\n+            if col in df.columns:\n+                df[col] = df[col].astype(dtype)\n+    return df\n def _get_output_config(method, estimator=None):\n     est_sklearn_output_config = getattr(estimator, '_sklearn_output_config', {})\n     if method in est_sklearn_output_config:\n@@ -32,7 +41,11 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     output_config = _get_output_config(method, estimator)\n     if output_config['dense'] == 'default' or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n-    return _wrap_in_pandas_container(data_to_wrap=data_to_wrap, index=getattr(original_input, 'index', None), columns=estimator.get_feature_names_out)\n+    dtypes = None\n+    if hasattr(original_input, 'dtypes'):\n+        selected_cols = estimator.get_feature_names_out()\n+        dtypes = {col: original_input.dtypes[col] for col in selected_cols if col in original_input.columns}\n+    return _wrap_in_pandas_container(data_to_wrap=data_to_wrap, index=getattr(original_input, 'index', None), columns=estimator.get_feature_names_out, dtypes=dtypes)\n def _wrap_method_output(f, method):\n     @wraps(f)\n     def wrapped(self, X, *args, **kwargs):\n", "normalized_occurrence": 1}
