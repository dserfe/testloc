{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db0cc2e..84caa6b 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,54 +1499,64 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+        self._use_blit = use_blit and (self.ref_artist.figure is not None and self.ref_artist.figure.canvas.supports_blit)\n+        if self.ref_artist.figure is not None:\n+            self.cids = [\n+                self.ref_artist.figure.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.ref_artist.figure.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n             dy = evt.y - self.mouse_y\n             self.update_offset(dx, dy)\n-            if self._use_blit:\n-                self.canvas.restore_region(self.background)\n+            if self._use_blit and self.canvas is not None:\n+                if self.background is not None:\n+                    self.canvas.restore_region(self.background)\n                 self.ref_artist.draw(\n                     self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n+                if self.canvas is not None:\n+                    self.canvas.blit()\n             else:\n-                self.canvas.draw()\n+                if self.canvas is not None:\n+                    self.canvas.draw()\n \n     def on_pick(self, evt):\n         if self._check_still_parented() and evt.artist == self.ref_artist:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n+            if self._use_blit and self.canvas is not None:\n                 self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = \\\n-                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n+                if self.canvas is not None:\n+                    self.canvas.draw()\n+                    self.background = \\\n+                        self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n                 self.ref_artist.draw(\n                     self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable(\n-                \"motion_notify_event\", self.on_motion)\n+                if self.canvas is not None:\n+                    self.canvas.blit()\n+            if self.canvas is not None:\n+                self._c1 = self.canvas.callbacks._connect_picklable(\n+                    \"motion_notify_event\", self.on_motion)\n             self.save_offset()\n \n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n+            if self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n \n-            if self._use_blit:\n+            if self._use_blit and self.canvas is not None:\n                 self.ref_artist.set_animated(False)\n \n     def _check_still_parented(self):\n@@ -1558,8 +1568,9 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+        if self.canvas is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex f94319f..2590f7d 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1262,20 +1262,25 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [self.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+        self._use_blit = use_blit and (self.ref_artist.figure is not None and self.ref_artist.figure.canvas.supports_blit)\n+        if self.ref_artist.figure is not None:\n+            self.cids = [self.ref_artist.figure.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.ref_artist.figure.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n+        else:\n+            self.cids = []\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n             dy = evt.y - self.mouse_y\n             self.update_offset(dx, dy)\n-            if self._use_blit:\n-                self.canvas.restore_region(self.background)\n+            if self._use_blit and self.canvas is not None:\n+                if self.background is not None:\n+                    self.canvas.restore_region(self.background)\n                 self.ref_artist.draw(self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            else:\n+                if self.canvas is not None:\n+                    self.canvas.blit()\n+            elif self.canvas is not None:\n                 self.canvas.draw()\n \n     def on_pick(self, evt):\n@@ -1283,21 +1288,25 @@ class DraggableBase:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n+            if self._use_blit and self.canvas is not None:\n                 self.ref_artist.set_animated(True)\n-                self.canvas.draw()\n-                self.background = self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n+                if self.canvas is not None:\n+                    self.canvas.draw()\n+                    self.background = self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n                 self.ref_artist.draw(self.ref_artist.figure._get_renderer())\n-                self.canvas.blit()\n-            self._c1 = self.canvas.callbacks._connect_picklable('motion_notify_event', self.on_motion)\n+                if self.canvas is not None:\n+                    self.canvas.blit()\n+            if self.canvas is not None:\n+                self._c1 = self.canvas.callbacks._connect_picklable('motion_notify_event', self.on_motion)\n             self.save_offset()\n \n     def on_release(self, event):\n         if self._check_still_parented() and self.got_artist:\n             self.finalize_offset()\n             self.got_artist = False\n-            self.canvas.mpl_disconnect(self._c1)\n-            if self._use_blit:\n+            if self.canvas is not None:\n+                self.canvas.mpl_disconnect(self._c1)\n+            if self._use_blit and self.canvas is not None:\n                 self.ref_artist.set_animated(False)\n \n     def _check_still_parented(self):\n@@ -1309,8 +1318,9 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+        if self.canvas is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n", "normalized_occurrence": 1}
