{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..524875c 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2076,6 +2076,7 @@ def has_variety(seq):\n     >>> has_variety((1, 1, 1))\n     False\n     \"\"\"\n+    initial_length = len(seq)\n     for i, s in enumerate(seq):\n         if i == 0:\n             sentinel = s\n@@ -2087,6 +2088,7 @@ def has_variety(seq):\n \n def uniq(seq, result=None):\n     \"\"\"\n+    initial_length = len(seq)\n     Yield unique elements from ``seq`` as an iterator. The second\n     parameter ``result``  is used internally; it is not necessary to pass\n     anything for this.\n@@ -2106,10 +2108,13 @@ def uniq(seq, result=None):\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n     \"\"\"\n+    initial_length = len(seq)\n     try:\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if len(seq) != initial_length:\n+                raise RuntimeError(\"list changed size during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..629e572 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -723,6 +723,7 @@ def has_dups(seq):\n     uniq = set()\n     return any((True for s in seq if s in uniq or uniq.add(s)))\n def has_variety(seq):\n+    initial_length = len(seq)\n     for i, s in enumerate(seq):\n         if i == 0:\n             sentinel = s\n@@ -730,10 +731,13 @@ def has_variety(seq):\n             return True\n     return False\n def uniq(seq, result=None):\n+    initial_length = len(seq)\n     try:\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if len(seq) != initial_length:\n+                raise RuntimeError('list changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 1}
