{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..4396d75 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,8 +202,18 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                # Get the raw value stored in the GFK field\n+                fk_val = getattr(obj, self.fk_field)\n+                if fk_val is None:\n+                    return None\n+                # Get the actual field type from the model to handle conversion\n+                pk_field = model._meta.pk\n+                try:\n+                    # Convert the value to the correct type for comparison\n+                    converted_value = pk_field.to_python(fk_val)\n+                except Exception:\n+                    return None\n+                return (converted_value, model)\n \n         return (\n             ret_val,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..acca6d3 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -100,7 +100,15 @@ class GenericForeignKey(FieldCacheMixin):\n                 return None\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n+                fk_val = getattr(obj, self.fk_field)\n+                if fk_val is None:\n+                    return None\n+                pk_field = model._meta.pk\n+                try:\n+                    converted_value = pk_field.to_python(fk_val)\n+                except Exception:\n+                    return None\n+                return (converted_value, model)\n         return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
