{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..a8aaada 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -312,24 +312,23 @@ def dup_sqf_list(f, K, all=False):\n     if dup_degree(f) <= 0:\n         return coeff, []\n \n-    result, i = [], 1\n-\n-    h = dup_diff(f, 1, K)\n-    g, p, q = dup_inner_gcd(f, h, K)\n+    result, i, prev_degree = [], 1, -1\n \n     while True:\n-        d = dup_diff(p, 1, K)\n-        h = dup_sub(q, d, K)\n-\n-        if not h:\n-            result.append((p, i))\n-            break\n+        h = dup_diff(f, 1, K)\n+        g, f, q = dup_inner_gcd(f, h, K)\n \n-        g, p, q = dup_inner_gcd(p, h, K)\n-\n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+        if dup_degree(f) == prev_degree:\n+            result[-1] = (dup_mul(result[-1][0], f, K), i)\n+        else:\n+            result.append((f, i))\n+        \n+        prev_degree = dup_degree(f)\n \n+        if dup_degree(g) == 0:\n+            break\n+        \n+        f = dup_quo(f, g, K)\n         i += 1\n \n     return coeff, result\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..22cb81b 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -104,18 +104,18 @@ def dup_sqf_list(f, K, all=False):\n             coeff = -coeff\n     if dup_degree(f) <= 0:\n         return (coeff, [])\n-    result, i = ([], 1)\n-    h = dup_diff(f, 1, K)\n-    g, p, q = dup_inner_gcd(f, h, K)\n+    result, i, prev_degree = ([], 1, -1)\n     while True:\n-        d = dup_diff(p, 1, K)\n-        h = dup_sub(q, d, K)\n-        if not h:\n-            result.append((p, i))\n+        h = dup_diff(f, 1, K)\n+        g, f, q = dup_inner_gcd(f, h, K)\n+        if dup_degree(f) == prev_degree:\n+            result[-1] = (dup_mul(result[-1][0], f, K), i)\n+        else:\n+            result.append((f, i))\n+        prev_degree = dup_degree(f)\n+        if dup_degree(g) == 0:\n             break\n-        g, p, q = dup_inner_gcd(p, h, K)\n-        if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+        f = dup_quo(f, g, K)\n         i += 1\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n", "normalized_occurrence": 1}
