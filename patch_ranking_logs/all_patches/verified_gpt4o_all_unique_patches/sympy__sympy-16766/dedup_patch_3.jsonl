{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16766", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 5576888..bf42919 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -353,9 +353,9 @@ class PythonCodePrinter(AbstractPythonCodePrinter):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n             f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n \n-    def _print_Not(self, expr):\n-        PREC = precedence(expr)\n-        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n \n \n for k in PythonCodePrinter._kf:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 89898b4..0428aa1 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -178,9 +178,9 @@ class AbstractPythonCodePrinter(CodePrinter):\n class PythonCodePrinter(AbstractPythonCodePrinter):\n     def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n-    def _print_Not(self, expr):\n-        PREC = precedence(expr)\n-        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return '{}[{}]'.format(str(base), ', '.join([self._print(ind) for ind in index]))\n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n for k in _known_constants_math:\n", "normalized_occurrence": 1}
