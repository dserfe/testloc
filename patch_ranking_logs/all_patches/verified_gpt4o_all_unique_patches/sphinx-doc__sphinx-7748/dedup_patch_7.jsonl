{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..683c844 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1044,7 +1044,7 @@ class DocstringSignatureMixin:\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        result = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,10 +1066,8 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            result.append((args, retann))\n+        return None if not result else result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1087,7 +1085,10 @@ class DocstringSignatureMixin:\n             # the feature is enabled\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                if isinstance(result, list):\n+                    self.args, self.retann = result[0]\n+                else:\n+                    self.args, self.retann = result\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n@@ -1157,8 +1158,18 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             self.add_line('   :async:', sourcename)\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        results = self._find_signature()\n+        sigs = []\n+\n+        if results:\n+            if not isinstance(results, list):\n+                results = [results]\n+            \n+            for result in results:\n+                self.args, self.retann = result\n+                sigs.append(super().format_signature(**kwargs))\n+        else:\n+            sigs.append(super().format_signature(**kwargs))\n \n         if inspect.is_singledispatch_function(self.object):\n             # append signature of singledispatch'ed functions\n@@ -1633,8 +1644,18 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         pass\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        results = self._find_signature()\n+        sigs = []\n+\n+        if results:\n+            if not isinstance(results, list):\n+                results = [results]\n+            \n+            for result in results:\n+                self.args, self.retann = result\n+                sigs.append(super().format_signature(**kwargs))\n+        else:\n+            sigs.append(super().format_signature(**kwargs))\n \n         meth = self.parent.__dict__.get(self.objpath[-1])\n         if inspect.is_singledispatch_method(meth):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..4bcc290 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -759,7 +759,7 @@ class DocstringSignatureMixin:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        result = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -776,9 +776,8 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n-        return result\n+            result.append((args, retann))\n+        return None if not result else result\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:\n@@ -792,7 +791,10 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                if isinstance(result, list):\n+                    self.args, self.retann = result[0]\n+                else:\n+                    self.args, self.retann = result\n         return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n@@ -848,8 +850,16 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             self.add_line('   :async:', sourcename)\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        results = self._find_signature()\n+        sigs = []\n+        if results:\n+            if not isinstance(results, list):\n+                results = [results]\n+            for result in results:\n+                self.args, self.retann = result\n+                sigs.append(super().format_signature(**kwargs))\n+        else:\n+            sigs.append(super().format_signature(**kwargs))\n         if inspect.is_singledispatch_function(self.object):\n             for typ, func in self.object.registry.items():\n                 if typ is object:\n@@ -1198,8 +1208,16 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n         pass\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        results = self._find_signature()\n+        sigs = []\n+        if results:\n+            if not isinstance(results, list):\n+                results = [results]\n+            for result in results:\n+                self.args, self.retann = result\n+                sigs.append(super().format_signature(**kwargs))\n+        else:\n+            sigs.append(super().format_signature(**kwargs))\n         meth = self.parent.__dict__.get(self.objpath[-1])\n         if inspect.is_singledispatch_method(meth):\n             for typ, func in meth.dispatcher.registry.items():\n", "normalized_occurrence": 1}
