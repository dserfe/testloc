{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..5876a48 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -50,7 +50,18 @@ from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n from . import legend_handler\n \n \n+import pickle\n+\n class DraggableLegend(DraggableOffsetBox):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the canvas from the state\n+        state.pop('canvas', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.canvas = None  # This will need to be re-initialized after unpickling\n     def __init__(self, legend, use_blit=False, update=\"loc\"):\n         \"\"\"\n         Wrapper around a `.Legend` to support mouse dragging.\n@@ -1194,7 +1205,7 @@ class Legend(Artist):\n             instance. Otherwise this returns *None*.\n         \"\"\"\n         if state:\n-            if self._draggable is None:\n+            if self._draggable is None or not isinstance(self._draggable, DraggableLegend):\n                 self._draggable = DraggableLegend(self,\n                                                   use_blit,\n                                                   update=update)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8070532..553a2d2 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -16,7 +16,15 @@ from matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n from matplotlib.offsetbox import AnchoredOffsetbox, DraggableOffsetBox, HPacker, VPacker, DrawingArea, TextArea\n from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n from . import legend_handler\n+import pickle\n class DraggableLegend(DraggableOffsetBox):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('canvas', None)\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.canvas = None\n     def __init__(self, legend, use_blit=False, update='loc'):\n         self.legend = legend\n         _api.check_in_list(['loc', 'bbox'], update=update)\n@@ -422,7 +430,7 @@ class Legend(Artist):\n         return self.legendPatch.contains(event)\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         if state:\n-            if self._draggable is None:\n+            if self._draggable is None or not isinstance(self._draggable, DraggableLegend):\n                 self._draggable = DraggableLegend(self, use_blit, update=update)\n         else:\n             if self._draggable is not None:\n", "normalized_occurrence": 1}
