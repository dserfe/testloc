{"model_name_or_path": "agentless", "instance_id": "django__django-13810", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2cbbab1..656c53a 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -57,6 +57,8 @@ class BaseHandler:\n                 )\n                 mw_instance = middleware(handler)\n             except MiddlewareNotUsed as exc:\n+                handler = convert_exception_to_response(self._get_response_async if self._middleware_chain_is_async else self._get_response_sync)\n+                handler_is_async = self._middleware_chain_is_async\n                 if settings.DEBUG:\n                     if str(exc):\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex db9e015..beb3ae9 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -37,6 +37,8 @@ class BaseHandler:\n                 handler = self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)\n                 mw_instance = middleware(handler)\n             except MiddlewareNotUsed as exc:\n+                handler = convert_exception_to_response(self._get_response_async if self._middleware_chain_is_async else self._get_response_sync)\n+                handler_is_async = self._middleware_chain_is_async\n                 if settings.DEBUG:\n                     if str(exc):\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n", "normalized_occurrence": 1}
