{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7993", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 6c414e0..f6aa2c4 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,14 +175,28 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        # Look for Python string format placeholders while ignoring JSON-style braces\n+        arguments = []\n+        in_placeholder = False\n+        current_placeholder = []\n+        for i, char in enumerate(template):\n+            if char == '{' and i + 1 < len(template) and template[i + 1] != '{':\n+                in_placeholder = True\n+                current_placeholder = []\n+            elif char == '}' and in_placeholder and (i == 0 or template[i - 1] != '}'):\n+                in_placeholder = False\n+                if current_placeholder:\n+                    arguments.append((''.join(current_placeholder).split(':')[0], ''))\n+            elif in_placeholder:\n+                current_placeholder.append(char)\n+\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:.*?)?\\}\", \"\", template)\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 3d6bc44..4d1f0c7 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -66,11 +66,23 @@ class TextReporter(BaseReporter):\n         if template == self._template:\n             return\n         self._template = template\n-        arguments = re.findall('\\\\{(.+?)(:.*)?\\\\}', template)\n+        arguments = []\n+        in_placeholder = False\n+        current_placeholder = []\n+        for i, char in enumerate(template):\n+            if char == '{' and i + 1 < len(template) and (template[i + 1] != '{'):\n+                in_placeholder = True\n+                current_placeholder = []\n+            elif char == '}' and in_placeholder and (i == 0 or template[i - 1] != '}'):\n+                in_placeholder = False\n+                if current_placeholder:\n+                    arguments.append((''.join(current_placeholder).split(':')[0], ''))\n+            elif in_placeholder:\n+                current_placeholder.append(char)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(f\"Don't recognize the argument '{argument[0]}' in the --msg-template. Are you sure it is supported on the current version of pylint?\")\n-                template = re.sub('\\\\{' + argument[0] + '(:.*?)?\\\\}', '', template)\n+                template = re.sub('\\\\{' + re.escape(argument[0]) + '(:.*?)?\\\\}', '', template)\n         self._fixed_template = template\n     def write_message(self, msg: Message) -> None:\n         self_dict = asdict(msg)\n", "normalized_occurrence": 1}
