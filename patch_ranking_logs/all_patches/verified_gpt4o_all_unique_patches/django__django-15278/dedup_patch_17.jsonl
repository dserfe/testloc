{"model_name_or_path": "agentless", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex be6e066..e754eb3 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -187,6 +187,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                         del mapping[field.column]\n         # Add in any created fields\n         if create_field:\n+            # Ensure a unique constraint on a nullable field is handled\n+            if create_field.null and create_field.unique:\n+                self._remake_table(model, create_field=create_field)\n+                return\n             body[create_field.name] = create_field\n             # Choose a default and insert it into the copy map\n             if not create_field.many_to_many and create_field.concrete:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex fd5121f..657d972 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -105,6 +105,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                         del body[name]\n                         del mapping[field.column]\n         if create_field:\n+            if create_field.null and create_field.unique:\n+                self._remake_table(model, create_field=create_field)\n+                return\n             body[create_field.name] = create_field\n             if not create_field.many_to_many and create_field.concrete:\n                 mapping[create_field.column] = self.prepare_default(self.effective_default(create_field))\n", "normalized_occurrence": 1}
