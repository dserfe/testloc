{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13343", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 4e9ee79..4bd1848 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -227,9 +227,10 @@ class FileField(Field):\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n \n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n+        self._storage = storage or default_storage\n+        self.storage = None\n+        if not callable(self._storage):\n+            self.storage = self._storage\n             if not isinstance(self.storage, Storage):\n                 raise TypeError(\n                     \"%s.storage must be a subclass/instance of %s.%s\"\n@@ -278,8 +279,8 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n@@ -303,6 +304,12 @@ class FileField(Field):\n         super().contribute_to_class(cls, name, **kwargs)\n         setattr(cls, self.attname, self.descriptor_class(self))\n \n+    @property\n+    def storage(self):\n+        if self._storage is not None and callable(self._storage) and not isinstance(self._storage, Storage):\n+            self._storage = self._storage()\n+        return self._storage\n+\n     def generate_filename(self, instance, filename):\n         \"\"\"\n         Apply (if callable) or prepend (if a string) upload_to to the filename,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex fc9a6b0..2dbac2f 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -119,9 +119,10 @@ class FileField(Field):\n     description = _('File')\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n+        self._storage = storage or default_storage\n+        self.storage = None\n+        if not callable(self._storage):\n+            self.storage = self._storage\n             if not isinstance(self.storage, Storage):\n                 raise TypeError('%s.storage must be a subclass/instance of %s.%s' % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__))\n         self.upload_to = upload_to\n@@ -144,8 +145,8 @@ class FileField(Field):\n         if kwargs.get('max_length') == 100:\n             del kwargs['max_length']\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return (name, path, args, kwargs)\n     def get_internal_type(self):\n         return 'FileField'\n@@ -162,6 +163,11 @@ class FileField(Field):\n     def contribute_to_class(self, cls, name, **kwargs):\n         super().contribute_to_class(cls, name, **kwargs)\n         setattr(cls, self.attname, self.descriptor_class(self))\n+    @property\n+    def storage(self):\n+        if self._storage is not None and callable(self._storage) and (not isinstance(self._storage, Storage)):\n+            self._storage = self._storage()\n+        return self._storage\n     def generate_filename(self, instance, filename):\n         if callable(self.upload_to):\n             filename = self.upload_to(instance, filename)\n", "normalized_occurrence": 1}
