{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..129ac52 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2115,27 +2115,31 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to add to the intermediate model.\n+            return self.has_change_permission(request, obj)\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to modify the intermediate model.\n+            opts = self.opts\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    return self.has_parent_permission(request, \"change\", field.remote_field.model._meta)\n+            return False\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to delete from the intermediate model.\n+            return self.has_change_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..befee7d 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1042,15 +1042,19 @@ class InlineModelAdmin(BaseModelAdmin):\n         return queryset\n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n-            return self.has_view_permission(request, obj)\n+            return self.has_change_permission(request, obj)\n         return super().has_add_permission(request)\n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            return self.has_view_permission(request, obj)\n+            opts = self.opts\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    return self.has_parent_permission(request, 'change', field.remote_field.model._meta)\n+            return False\n         return super().has_change_permission(request)\n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            return self.has_view_permission(request, obj)\n+            return self.has_change_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n", "normalized_occurrence": 1}
