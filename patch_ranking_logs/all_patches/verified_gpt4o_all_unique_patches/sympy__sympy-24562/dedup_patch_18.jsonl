{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..90216b2 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1606,12 +1606,15 @@ class Rational(Number):\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n                     p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp/fq\n+                    if '/' in p:\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            p = fractions.Fraction(p)\n+                            q = fractions.Fraction(q)\n+                            return Rational(p, q)\n+                    else:\n+                        p = fractions.Fraction(p)\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..52447ec 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1392,12 +1392,15 @@ class Rational(Number):\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n                     p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp / fq\n+                    if '/' in p:\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            p = fractions.Fraction(p)\n+                            q = fractions.Fraction(q)\n+                            return Rational(p, q)\n+                    else:\n+                        p = fractions.Fraction(p)\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n", "normalized_occurrence": 1}
