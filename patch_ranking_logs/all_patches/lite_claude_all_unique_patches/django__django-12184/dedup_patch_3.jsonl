{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12184", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 1a3b6f6..34b3726 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -158,7 +158,8 @@ class RegexPattern(CheckURLMixin):\n             # If there are any named groups, use those as kwargs, ignoring\n             # non-named groups. Otherwise, pass all non-named arguments as\n             # positional arguments.\n-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n+            kwargs = match.groupdict()\n+            kwargs = {k: v for k, v in kwargs.items() if v is not None}\n             args = () if kwargs else match.groups()\n             return path[match.end():], args, kwargs\n         return None\n", "occurrence": 2, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex a06ca7c..e12a94f 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -91,7 +91,8 @@ class RegexPattern(CheckURLMixin):\n     def match(self, path):\n         match = self.regex.search(path)\n         if match:\n-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n+            kwargs = match.groupdict()\n+            kwargs = {k: v for k, v in kwargs.items() if v is not None}\n             args = () if kwargs else match.groups()\n             return (path[match.end():], args, kwargs)\n         return None\n", "normalized_occurrence": 2}
