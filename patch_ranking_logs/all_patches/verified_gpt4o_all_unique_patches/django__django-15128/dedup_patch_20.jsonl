{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..8e795cc 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -596,23 +596,31 @@ class Query(BaseExpression):\n         joinpromoter.add_votes(\n             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n         rhs_votes = set()\n-        # Now, add the joins from rhs query into the new query (skipping base\n-        # table).\n+        # Ensure aliases are unique to prevent intersecting keys and values in the change_map\n+        def unique_alias(existing_aliases, base_alias):\n+            suffix = 1\n+            new_alias = base_alias\n+            while new_alias in existing_aliases or new_alias in change_map.values():\n+                new_alias = f'{base_alias}{suffix}'\n+                suffix += 1\n+            return new_alias\n+\n+        # Now, add the joins from rhs query into the new query (skipping base table).\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(self.alias_map)\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n-            # If the left side of the join was already relabeled, use the\n-            # updated alias.\n+            # If the left side of the join was already relabeled, use the updated alias.\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n-            # We can't reuse the same join again in the query. If we have two\n-            # distinct joins for the same connection in rhs query, then the\n-            # combined query must have two joins, too.\n+            # We can't reuse the same join again in the query. If we have two distinct joins for the same connection in rhs query, then the combined query must have two joins, too.\n             reuse.discard(new_alias)\n             if alias != new_alias:\n+                new_alias = unique_alias(existing_aliases, new_alias)\n                 change_map[alias] = new_alias\n+                existing_aliases.add(new_alias)\n             if not rhs.alias_refcount[alias]:\n                 # The alias was unused in the rhs query. Unref it so that it\n                 # will be unused in the new query, too. We have to add and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..e246b38 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -332,7 +332,15 @@ class Query(BaseExpression):\n         joinpromoter = JoinPromoter(connector, 2, False)\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n+        def unique_alias(existing_aliases, base_alias):\n+            suffix = 1\n+            new_alias = base_alias\n+            while new_alias in existing_aliases or new_alias in change_map.values():\n+                new_alias = f'{base_alias}{suffix}'\n+                suffix += 1\n+            return new_alias\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(self.alias_map)\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n@@ -341,7 +349,9 @@ class Query(BaseExpression):\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n             if alias != new_alias:\n+                new_alias = unique_alias(existing_aliases, new_alias)\n                 change_map[alias] = new_alias\n+                existing_aliases.add(new_alias)\n             if not rhs.alias_refcount[alias]:\n                 self.unref_alias(new_alias)\n         joinpromoter.add_votes(rhs_votes)\n", "normalized_occurrence": 1}
