{"model_name_or_path": "agentless", "instance_id": "django__django-11095", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 62b54f5..a4715e9 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,9 +580,17 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook to get the list of inline classes for the given request and object.\n+        Should return a list of InlineModelAdmin classes.\n+        \"\"\"\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n+        inline_classes = self.get_inlines(request, obj)\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in inline_classes:\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n@@ -1914,6 +1922,7 @@ class ModelAdmin(BaseModelAdmin):\n     def _create_formsets(self, request, obj, change):\n         \"Helper function to generate formsets for add/change_view.\"\n         formsets = []\n+        inline_classes = self.get_inlines(request, obj)\n         inline_instances = []\n         prefixes = {}\n         get_formsets_args = [request]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex bdbec4d..1ce0682 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -295,9 +295,12 @@ class ModelAdmin(BaseModelAdmin):\n         super().__init__()\n     def __str__(self):\n         return '%s.%s' % (self.model._meta.app_label, self.__class__.__name__)\n+    def get_inlines(self, request, obj=None):\n+        return self.inlines\n     def get_inline_instances(self, request, obj=None):\n+        inline_classes = self.get_inlines(request, obj)\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in inline_classes:\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or inline.has_add_permission(request, obj) or inline.has_delete_permission(request, obj)):\n@@ -924,6 +927,7 @@ class ModelAdmin(BaseModelAdmin):\n         return TemplateResponse(request, self.object_history_template or ['admin/%s/%s/object_history.html' % (app_label, opts.model_name), 'admin/%s/object_history.html' % app_label, 'admin/object_history.html'], context)\n     def _create_formsets(self, request, obj, change):\n         formsets = []\n+        inline_classes = self.get_inlines(request, obj)\n         inline_instances = []\n         prefixes = {}\n         get_formsets_args = [request]\n", "normalized_occurrence": 1}
