{"model_name_or_path": "agentless", "instance_id": "django__django-11477", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 58da200..2c2d238 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -468,7 +468,11 @@ class URLResolver:\n                     else:\n                         for name in url_pattern.reverse_dict:\n                             for matches, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n-                                new_matches = normalize(p_pattern + pat)\n+                                normalized_pattern = normalize(p_pattern + pat)\n+                                # Ensure optional named groups are correctly handled\n+                                if name.endswith('?'):\n+                                    name = name[:-1]\n+                                new_matches = normalized_pattern\n                                 lookups.appendlist(\n                                     name,\n                                     (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex e10e0e8..f596deb 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -296,7 +296,10 @@ class URLResolver:\n                     else:\n                         for name in url_pattern.reverse_dict:\n                             for matches, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n-                                new_matches = normalize(p_pattern + pat)\n+                                normalized_pattern = normalize(p_pattern + pat)\n+                                if name.endswith('?'):\n+                                    name = name[:-1]\n+                                new_matches = normalized_pattern\n                                 lookups.appendlist(name, (new_matches, p_pattern + pat, {**defaults, **url_pattern.default_kwargs}, {**self.pattern.converters, **url_pattern.pattern.converters, **converters}))\n                         for namespace, (prefix, sub_pattern) in url_pattern.namespace_dict.items():\n                             current_converters = url_pattern.pattern.converters\n", "normalized_occurrence": 1}
