{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..01366ba 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -496,6 +496,23 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            for part in text.split('+'):\n+                part = part.strip()\n+                if not self.body[-1].endswith('>'):\n+                    self.body.append('<kbd class=\"compound-key\">+</kbd>')\n+                if '-' in part:\n+                    subparts = part.split('-')\n+                    for i, subpart in enumerate(subparts):\n+                        subpart = subpart.strip()\n+                        if subpart:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(subpart))\n+                        if i < len(subparts) - 1:\n+                            self.body.append('<kbd class=\"compound-key\">-</kbd>')\n+                else:\n+                    if part:\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(part))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -841,4 +858,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..5d4273f 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -447,6 +447,23 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            for part in text.split('+'):\n+                part = part.strip()\n+                if not self.body[-1].endswith('>'):\n+                    self.body.append('<kbd class=\"compound-key\">+</kbd>')\n+                if '-' in part:\n+                    subparts = part.split('-')\n+                    for i, subpart in enumerate(subparts):\n+                        subpart = subpart.strip()\n+                        if subpart:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(subpart))\n+                        if i < len(subparts) - 1:\n+                            self.body.append('<kbd class=\"compound-key\">-</kbd>')\n+                else:\n+                    if part:\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(part))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -789,4 +806,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..aaa7fcc 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,22 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            for part in text.split('+'):\n+                part = part.strip()\n+                if not self.body[-1].endswith('>'):\n+                    self.body.append('<kbd class=\"compound-key\">+</kbd>')\n+                if '-' in part:\n+                    subparts = part.split('-')\n+                    for i, subpart in enumerate(subparts):\n+                        subpart = subpart.strip()\n+                        if subpart:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(subpart))\n+                        if i < len(subparts) - 1:\n+                            self.body.append('<kbd class=\"compound-key\">-</kbd>')\n+                elif part:\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(part))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..7a82084 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,22 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            for part in text.split('+'):\n+                part = part.strip()\n+                if not self.body[-1].endswith('>'):\n+                    self.body.append('<kbd class=\"compound-key\">+</kbd>')\n+                if '-' in part:\n+                    subparts = part.split('-')\n+                    for i, subpart in enumerate(subparts):\n+                        subpart = subpart.strip()\n+                        if subpart:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(subpart))\n+                        if i < len(subparts) - 1:\n+                            self.body.append('<kbd class=\"compound-key\">-</kbd>')\n+                elif part:\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(part))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
