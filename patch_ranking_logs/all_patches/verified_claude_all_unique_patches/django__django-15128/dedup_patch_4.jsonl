{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..2088dfa 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -745,30 +745,7 @@ class Query(BaseExpression):\n             for model, values in seen.items():\n                 callback(target, model, values)\n \n-    def table_alias(self, table_name, create=False, filtered_relation=None):\n-        \"\"\"\n-        Return a table alias for the given table_name and whether this is a\n-        new alias or not.\n-\n-        If 'create' is true, a new alias is always created. Otherwise, the\n-        most recently created alias for the table (if one exists) is reused.\n-        \"\"\"\n-        alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n-            alias = alias_list[0]\n-            self.alias_refcount[alias] += 1\n-            return alias, False\n \n-        # Create a new alias for this table.\n-        if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n-            alias_list.append(alias)\n-        else:\n-            # The first occurrence of a table uses the table name directly.\n-            alias = filtered_relation.alias if filtered_relation is not None else table_name\n-            self.table_map[table_name] = [alias]\n-        self.alias_refcount[alias] = 1\n-        return alias, True\n \n     def ref_alias(self, alias):\n         \"\"\"Increases the reference count for this alias.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..4a3ab3b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -422,20 +422,6 @@ class Query(BaseExpression):\n                 seen.setdefault(model, set())\n             for model, values in seen.items():\n                 callback(target, model, values)\n-    def table_alias(self, table_name, create=False, filtered_relation=None):\n-        alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n-            alias = alias_list[0]\n-            self.alias_refcount[alias] += 1\n-            return (alias, False)\n-        if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n-            alias_list.append(alias)\n-        else:\n-            alias = filtered_relation.alias if filtered_relation is not None else table_name\n-            self.table_map[table_name] = [alias]\n-        self.alias_refcount[alias] = 1\n-        return (alias, True)\n     def ref_alias(self, alias):\n         self.alias_refcount[alias] += 1\n     def unref_alias(self, alias, amount=1):\n", "normalized_occurrence": 1}
