{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..7997c24 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -917,12 +917,55 @@ class PrettyPrinter(Printer):\n                 else:\n                     #We always wrap the measure numbers in\n                     #parentheses\n-                    arg_str = self._print(\n-                        v).parens()[0]\n-\n+                    arg_str = self._print(v)\n+                    if v.is_Add or v.is_Mul:\n+                        arg_str = arg_str.parens()[0]\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n \n+        if len(o1) == 1:\n+            return prettyForm(o1[0])\n+\n+        max_len = max(len(comp) for comp in o1)\n+        centered_o1 = [comp.center(max_len) for comp in o1]\n+        if centered_o1[0].startswith(u\" + \"):\n+            centered_o1[0] = centered_o1[0][3:]\n+        elif centered_o1[0].startswith(\" \"):\n+            centered_o1[0] = centered_o1[0][1:]\n+\n+        lengths = []\n+        strs = ['']\n+        for i, partstr in enumerate(centered_o1):\n+            if '\\n' in partstr:\n+                tempstr = partstr\n+                tempstr = tempstr.replace(vectstrs[i], '')\n+                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n+                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                          + ' ' + vectstrs[i])\n+                centered_o1[i] = tempstr\n+        centered_o1 = [x.split('\\n') for x in centered_o1]\n+        n_newlines = max([len(x) for x in centered_o1])\n+        for parts in centered_o1:\n+            lengths.append(len(parts[0]))\n+            for j in range(n_newlines):\n+                if j+1 <= len(parts):\n+                    if j >= len(strs):\n+                        strs.append(' ' * (sum(lengths[:-1]) +\n+                                           3*(len(lengths)-1)))\n+                    if j == 0:\n+                        strs[0] += parts[0] + ' + '\n+                    else:\n+                        strs[j] += parts[j] + ' '*(lengths[-1] -\n+                                                   len(parts[j])+\n+                                                   3)\n+                else:\n+                    if j >= len(strs):\n+                        strs.append(' ' * (sum(lengths[:-1]) +\n+                                           3*(len(lengths)-1)))\n+                    strs[j] += ' '*(lengths[-1]+3)\n+\n+        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+\n         #outstr = u(\"\").join(o1)\n         if o1[0].startswith(u\" + \"):\n             o1[0] = o1[0][3:]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..4b56f7f 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -660,9 +660,44 @@ class PrettyPrinter(Printer):\n                 elif v == -1:\n                     o1.append(u'(-1) ' + k._pretty_form)\n                 else:\n-                    arg_str = self._print(v).parens()[0]\n+                    arg_str = self._print(v)\n+                    if v.is_Add or v.is_Mul:\n+                        arg_str = arg_str.parens()[0]\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n+        if len(o1) == 1:\n+            return prettyForm(o1[0])\n+        max_len = max((len(comp) for comp in o1))\n+        centered_o1 = [comp.center(max_len) for comp in o1]\n+        if centered_o1[0].startswith(u' + '):\n+            centered_o1[0] = centered_o1[0][3:]\n+        elif centered_o1[0].startswith(' '):\n+            centered_o1[0] = centered_o1[0][1:]\n+        lengths = []\n+        strs = ['']\n+        for i, partstr in enumerate(centered_o1):\n+            if '\\n' in partstr:\n+                tempstr = partstr\n+                tempstr = tempstr.replace(vectstrs[i], '')\n+                tempstr = tempstr.replace(u'⎞', u'⎞' + ' ' + vectstrs[i])\n+                centered_o1[i] = tempstr\n+        centered_o1 = [x.split('\\n') for x in centered_o1]\n+        n_newlines = max([len(x) for x in centered_o1])\n+        for parts in centered_o1:\n+            lengths.append(len(parts[0]))\n+            for j in range(n_newlines):\n+                if j + 1 <= len(parts):\n+                    if j >= len(strs):\n+                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n+                    if j == 0:\n+                        strs[0] += parts[0] + ' + '\n+                    else:\n+                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n+                else:\n+                    if j >= len(strs):\n+                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n+                    strs[j] += ' ' * (lengths[-1] + 3)\n+        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n         if o1[0].startswith(u' + '):\n             o1[0] = o1[0][3:]\n         elif o1[0].startswith(' '):\n", "normalized_occurrence": 1}
