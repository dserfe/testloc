{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 8743303..aed7534 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2135,34 +2135,3 @@ def train_test_split(*arrays, **options):\n train_test_split.__test__ = False\n \n \n-def _build_repr(self):\n-    # XXX This is copied from BaseEstimator's get_params\n-    cls = self.__class__\n-    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n-    # Ignore varargs, kw and default values and pop self\n-    init_signature = signature(init)\n-    # Consider the constructor parameters excluding 'self'\n-    if init is object.__init__:\n-        args = []\n-    else:\n-        args = sorted([p.name for p in init_signature.parameters.values()\n-                       if p.name != 'self' and p.kind != p.VAR_KEYWORD])\n-    class_name = self.__class__.__name__\n-    params = dict()\n-    for key in args:\n-        # We need deprecation warnings to always be on in order to\n-        # catch deprecated param values.\n-        # This is set in utils/__init__.py but it gets overwritten\n-        # when running under python3 somehow.\n-        warnings.simplefilter(\"always\", DeprecationWarning)\n-        try:\n-            with warnings.catch_warnings(record=True) as w:\n-                value = getattr(self, key, None)\n-            if len(w) and w[0].category == DeprecationWarning:\n-                # if the parameter is deprecated, don't show it\n-                continue\n-        finally:\n-            warnings.filters.pop(0)\n-        params[key] = value\n-\n-    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 7f10fe3..8f92011 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1898,26 +1898,4 @@ def train_test_split(*arrays, **options):\n         cv = CVClass(test_size=n_test, train_size=n_train, random_state=random_state)\n         train, test = next(cv.split(X=arrays[0], y=stratify))\n     return list(chain.from_iterable(((safe_indexing(a, train), safe_indexing(a, test)) for a in arrays)))\n-train_test_split.__test__ = False\n-\n-def _build_repr(self):\n-    cls = self.__class__\n-    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n-    init_signature = signature(init)\n-    if init is object.__init__:\n-        args = []\n-    else:\n-        args = sorted([p.name for p in init_signature.parameters.values() if p.name != 'self' and p.kind != p.VAR_KEYWORD])\n-    class_name = self.__class__.__name__\n-    params = dict()\n-    for key in args:\n-        warnings.simplefilter('always', DeprecationWarning)\n-        try:\n-            with warnings.catch_warnings(record=True) as w:\n-                value = getattr(self, key, None)\n-            if len(w) and w[0].category == DeprecationWarning:\n-                continue\n-        finally:\n-            warnings.filters.pop(0)\n-        params[key] = value\n-    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n\\ No newline at end of file\n+train_test_split.__test__ = False\n\\ No newline at end of file\n", "normalized_occurrence": 1}
