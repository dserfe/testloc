{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..96a6f7e 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -851,27 +851,28 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             Xs = [f.toarray() if sparse.issparse(f) else f for f in Xs]\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n-                pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n-\n-                # If all transformers define `get_feature_names_out`, then transform\n-                # will adjust the column names to be consistent with\n-                # verbose_feature_names_out. Here we prefix the feature names if\n-                # verbose_feature_names_out=True.\n-\n-                if not self.verbose_feature_names_out:\n+                if len(Xs) > 0:\n+                    pd = check_pandas_support(\"transform\")\n+                    output = pd.concat(Xs, axis=1)\n+\n+                    # If all transformers define `get_feature_names_out`, then transform\n+                    # will adjust the column names to be consistent with\n+                    # verbose_feature_names_out. Here we prefix the feature names if\n+                    # verbose_feature_names_out=True.\n+\n+                    if not self.verbose_feature_names_out:\n+                        return output\n+\n+                    transformer_names = [\n+                        t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                    ]\n+                    feature_names_outs = [X.columns for X in Xs if len(X.columns) > 0]\n+                    names_out = self._add_prefix_for_feature_names_out(\n+                        list(zip(transformer_names, feature_names_outs))\n+                    )\n+                    output.columns = names_out\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n-                return output\n-\n             return np.hstack(Xs)\n \n     def _sk_visual_block_(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..93e2c59 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -253,15 +253,16 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             Xs = [f.toarray() if sparse.issparse(f) else f for f in Xs]\n             config = _get_output_config('transform', self)\n             if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n-                pd = check_pandas_support('transform')\n-                output = pd.concat(Xs, axis=1)\n-                if not self.verbose_feature_names_out:\n+                if len(Xs) > 0:\n+                    pd = check_pandas_support('transform')\n+                    output = pd.concat(Xs, axis=1)\n+                    if not self.verbose_feature_names_out:\n+                        return output\n+                    transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n+                    feature_names_outs = [X.columns for X in Xs if len(X.columns) > 0]\n+                    names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                    output.columns = names_out\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n-                output.columns = names_out\n-                return output\n             return np.hstack(Xs)\n     def _sk_visual_block_(self):\n         if isinstance(self.remainder, str) and self.remainder == 'drop':\n", "normalized_occurrence": 1}
