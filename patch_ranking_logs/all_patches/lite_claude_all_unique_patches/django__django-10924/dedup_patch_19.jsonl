{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f5823d9..e1f0901 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,11 +1663,17 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.path_value, self.match, self.recursive = path, match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def get_path(self):\n+        \"\"\"Return the resolved path value, calling it if it's callable.\"\"\"\n+        if callable(self.path_value):\n+            return self.path_value()\n+        return self.path_value\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1687,8 +1693,8 @@ class FilePathField(Field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n-            kwargs['path'] = self.path\n+        if self.path_value != '':\n+            kwargs['path'] = self.path_value\n         if self.match is not None:\n             kwargs['match'] = self.match\n         if self.recursive is not False:\n@@ -1709,7 +1715,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self.get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 285706a..bdcbf43 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -844,10 +844,14 @@ class EmailField(CharField):\n class FilePathField(Field):\n     description = _('File path')\n     def __init__(self, verbose_name=None, name=None, path='', match=None, recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = (path, match, recursive)\n+        self.path_value, self.match, self.recursive = (path, match, recursive)\n         self.allow_files, self.allow_folders = (allow_files, allow_folders)\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n+    def get_path(self):\n+        if callable(self.path_value):\n+            return self.path_value()\n+        return self.path_value\n     def check(self, **kwargs):\n         return [*super().check(**kwargs), *self._check_allowing_files_or_folders(**kwargs)]\n     def _check_allowing_files_or_folders(self, **kwargs):\n@@ -856,8 +860,8 @@ class FilePathField(Field):\n         return []\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n-            kwargs['path'] = self.path\n+        if self.path_value != '':\n+            kwargs['path'] = self.path_value\n         if self.match is not None:\n             kwargs['match'] = self.match\n         if self.recursive is not False:\n@@ -875,7 +879,7 @@ class FilePathField(Field):\n             return None\n         return str(value)\n     def formfield(self, **kwargs):\n-        return super().formfield(**{'path': self.path, 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n+        return super().formfield(**{'path': self.get_path(), 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n     def get_internal_type(self):\n         return 'FilePathField'\n class FloatField(Field):\n", "normalized_occurrence": 1}
