{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..d030b5e 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -340,9 +340,19 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n-        # [obj_1] and not [\"label_1\"]\n-        return \"unknown\"\n+    if not issparse(y) and y.dtype == object:\n+        # Handle pandas nullable dtypes that become object dtype\n+        if hasattr(y.flat[0], 'dtype'):\n+            # If it's a pandas nullable type, get the underlying numeric value\n+            y = xp.asarray([val if not pd.isna(val) else np.nan for val in y])\n+            if y.dtype.kind == 'f':\n+                if xp.any(y != y.astype(int)):\n+                    _assert_all_finite(y, input_name=input_name)\n+                    return \"continuous\" + suffix\n+                return \"multiclass\" + suffix if xp.unique_values(y).shape[0] > 2 else \"binary\"\n+        elif not isinstance(y.flat[0], str):\n+            # [obj_1] and not [\"label_1\"]\n+            return \"unknown\"\n \n     # Check if multioutput\n     if y.ndim == 2 and y.shape[1] > 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..2b13048 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -91,8 +91,16 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n-        return 'unknown'\n+    if not issparse(y) and y.dtype == object:\n+        if hasattr(y.flat[0], 'dtype'):\n+            y = xp.asarray([val if not pd.isna(val) else np.nan for val in y])\n+            if y.dtype.kind == 'f':\n+                if xp.any(y != y.astype(int)):\n+                    _assert_all_finite(y, input_name=input_name)\n+                    return 'continuous' + suffix\n+                return 'multiclass' + suffix if xp.unique_values(y).shape[0] > 2 else 'binary'\n+        elif not isinstance(y.flat[0], str):\n+            return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n     else:\n", "normalized_occurrence": 1}
