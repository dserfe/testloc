{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..9cd1549 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -1,5 +1,6 @@\n \"Functions that help with dynamically creating decorators for views.\"\n \n+import functools\n from functools import partial, update_wrapper, wraps\n \n \n@@ -16,7 +17,12 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    # Get any attributes that the decorator adds\n+    assigned = tuple(a for a in functools.WRAPPER_ASSIGNMENTS if hasattr(dummy, a))\n+    updated = tuple(a for a in functools.WRAPPER_UPDATES if hasattr(dummy, a))\n+    # Only update the wrapper with attributes from the decorator that don't \n+    # override existing attributes\n+    functools.update_wrapper(_wrapper, dummy, assigned=assigned, updated=updated)\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..88804e6 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -1,3 +1,4 @@\n+import functools\n from functools import partial, update_wrapper, wraps\n class classonlymethod(classmethod):\n     def __get__(self, instance, cls=None):\n@@ -8,7 +9,9 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    assigned = tuple((a for a in functools.WRAPPER_ASSIGNMENTS if hasattr(dummy, a)))\n+    updated = tuple((a for a in functools.WRAPPER_UPDATES if hasattr(dummy, a)))\n+    functools.update_wrapper(_wrapper, dummy, assigned=assigned, updated=updated)\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
