{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..16095b4 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,18 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Remove weak references before pickling\n+        def remove_weakrefs(obj):\n+            if isinstance(obj, weakref.ReferenceType):\n+                return None\n+            if isinstance(obj, dict):\n+                return {k: remove_weakrefs(v) for k, v in obj.items()}\n+            if isinstance(obj, (list, tuple, set)):\n+                cls = type(obj)\n+                return cls(remove_weakrefs(v) for v in obj)\n+            return obj\n+\n+        state = remove_weakrefs(state)\n         return state\n \n     def __setstate__(self, state):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..00ee437 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,6 +345,16 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        def remove_weakrefs(obj):\n+            if isinstance(obj, weakref.ReferenceType):\n+                return None\n+            if isinstance(obj, dict):\n+                return {k: remove_weakrefs(v) for k, v in obj.items()}\n+            if isinstance(obj, (list, tuple, set)):\n+                cls = type(obj)\n+                return cls((remove_weakrefs(v) for v in obj))\n+            return obj\n+        state = remove_weakrefs(state)\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n", "normalized_occurrence": 1}
