{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3677", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 95cff56..e857f8f 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3604,6 +3604,9 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any variables conflict (see ``compat``).\n         \"\"\"\n         _check_inplace(inplace)\n+        if isinstance(other, DataArray):\n+            other = other.to_dataset()\n+\n         merge_result = dataset_merge_method(\n             self,\n             other,\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a7f45b0..808a555 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1198,6 +1198,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         return self._replace(inplace=True, **merge_result._asdict())\n     def merge(self, other: 'CoercibleMapping', inplace: bool=None, overwrite_vars: Union[Hashable, Iterable[Hashable]]=frozenset(), compat: str='no_conflicts', join: str='outer', fill_value: Any=dtypes.NA) -> 'Dataset':\n         _check_inplace(inplace)\n+        if isinstance(other, DataArray):\n+            other = other.to_dataset()\n         merge_result = dataset_merge_method(self, other, overwrite_vars=overwrite_vars, compat=compat, join=join, fill_value=fill_value)\n         return self._replace(**merge_result._asdict())\n     def _assert_all_in_dataset(self, names: Iterable[Hashable], virtual_okay: bool=False) -> None:\n", "normalized_occurrence": 2}
