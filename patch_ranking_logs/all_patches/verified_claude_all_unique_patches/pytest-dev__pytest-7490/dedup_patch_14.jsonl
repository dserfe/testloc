{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..3513411 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -276,21 +276,23 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and (xfailed or any(m.name == \"xfail\" for m in item.iter_markers())):\n+        # Get xfail marker, either from pre-test markers or dynamically added ones\n+        xfailed = xfailed or next((m for m in item.iter_markers() if m.name == \"xfail\"), None)\n         if call.excinfo:\n-            raises = xfailed.raises\n+            raises = getattr(xfailed, \"raises\", None)\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n                 rep.outcome = \"failed\"\n             else:\n                 rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = getattr(xfailed, \"reason\", None)\n         elif call.when == \"call\":\n-            if xfailed.strict:\n+            if getattr(xfailed, \"strict\", False):\n                 rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+                rep.longrepr = \"[XPASS(strict)] \" + getattr(xfailed, \"reason\", \"\")\n             else:\n                 rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = getattr(xfailed, \"reason\", None)\n \n     if (\n         item._store.get(skipped_by_mark_key, True)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..7874c44 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -154,21 +154,22 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and (xfailed or any((m.name == 'xfail' for m in item.iter_markers()))):\n+        xfailed = xfailed or next((m for m in item.iter_markers() if m.name == 'xfail'), None)\n         if call.excinfo:\n-            raises = xfailed.raises\n+            raises = getattr(xfailed, 'raises', None)\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n                 rep.outcome = 'failed'\n             else:\n                 rep.outcome = 'skipped'\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = getattr(xfailed, 'reason', None)\n         elif call.when == 'call':\n-            if xfailed.strict:\n+            if getattr(xfailed, 'strict', False):\n                 rep.outcome = 'failed'\n-                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n+                rep.longrepr = '[XPASS(strict)] ' + getattr(xfailed, 'reason', '')\n             else:\n                 rep.outcome = 'passed'\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = getattr(xfailed, 'reason', None)\n     if item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n         _, _, reason = rep.longrepr\n         filename, line = item.reportinfo()[:2]\n", "normalized_occurrence": 1}
