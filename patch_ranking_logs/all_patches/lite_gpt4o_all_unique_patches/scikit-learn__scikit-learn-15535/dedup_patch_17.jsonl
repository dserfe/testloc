{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex be26d08..79d50ec 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -459,7 +459,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n+            # if input is object and contains non-numeric data, raise an error\n+            if not np.all([isinstance(val, (int, float, complex)) for val in np.ravel(array)]):\n+                raise ValueError(\"Input contains non-numeric data. \"\n+                                 \"Ensure that all data are numeric.\")\n             dtype = np.float64\n         else:\n             dtype = None\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 8ce0584..6313b94 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -137,6 +137,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             dtype_orig = np.result_type(*array.dtypes)\n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n+            if not np.all([isinstance(val, (int, float, complex)) for val in np.ravel(array)]):\n+                raise ValueError('Input contains non-numeric data. Ensure that all data are numeric.')\n             dtype = np.float64\n         else:\n             dtype = None\n", "normalized_occurrence": 1}
