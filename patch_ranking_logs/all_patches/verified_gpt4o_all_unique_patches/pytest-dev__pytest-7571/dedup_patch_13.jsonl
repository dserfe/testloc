{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..63b10ee 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -350,8 +350,14 @@ class LogCaptureFixture:\n     def _finalize(self) -> None:\n         \"\"\"Finalizes the fixture.\n \n-        This restores the log levels changed by :meth:`set_level`.\n+        This restores the log levels changed by :meth:`set_level`, including\n+        the handler's log level.\n         \"\"\"\n+        # restore handler log level\n+        if self._initial_logger_levels:\n+            first_logger = next(iter(self._initial_logger_levels))\n+            logger = logging.getLogger(first_logger)\n+            self.handler.setLevel(logger.level)\n         # restore log levels\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..981e5af 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -165,6 +165,10 @@ class LogCaptureFixture:\n         self._item = item\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n+        if self._initial_logger_levels:\n+            first_logger = next(iter(self._initial_logger_levels))\n+            logger = logging.getLogger(first_logger)\n+            self.handler.setLevel(logger.level)\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n", "normalized_occurrence": 1}
