{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..5590259 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -132,6 +133,10 @@ class Mod(Function):\n                 return cls(net, q)\n \n         elif isinstance(p, Mul):\n+            # For simple cases like -Mod(x, y), preserve the outer multiplication\n+            if len(p.args) == 2 and any(isinstance(arg, cls) for arg in p.args):\n+                return p\n+\n             # separating into modulus and non modulus\n             both_l = non_mod_l, mod_l = [], []\n             for arg in p.args:\n@@ -240,4 +245,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..76499a1 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -81,6 +81,8 @@ class Mod(Function):\n                 net = Add(*non_mod_l) + Add(*[i.args[0] for i in mod_l])\n                 return cls(net, q)\n         elif isinstance(p, Mul):\n+            if len(p.args) == 2 and any((isinstance(arg, cls) for arg in p.args)):\n+                return p\n             both_l = non_mod_l, mod_l = ([], [])\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n", "normalized_occurrence": 1}
