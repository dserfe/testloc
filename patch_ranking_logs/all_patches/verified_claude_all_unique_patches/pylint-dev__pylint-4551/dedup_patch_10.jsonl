{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..6eb373b 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,19 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get type hints from __init__ parameters\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:  # Skip 'self'\n+                if arg.annotation:\n+                    try:\n+                        type_name = arg.annotation.as_string()\n+                        attrs.append(f\"{arg.name} : {type_name}\")\n+                    except (AttributeError, TypeError):\n+                        continue\n+\n+        # Handle regular attributes and properties\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n@@ -91,6 +104,9 @@ class ClassDiagram(Figure, FilterMixIn):\n         ):\n             if not self.show_attr(node_name):\n                 continue\n+            # Skip if already added from __init__ parameters\n+            if any(attr.startswith(node_name + \" : \") for attr in attrs):\n+                continue\n             names = self.class_names(associated_nodes)\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..595c0ec 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,9 +57,20 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:\n+                if arg.annotation:\n+                    try:\n+                        type_name = arg.annotation.as_string()\n+                        attrs.append(f'{arg.name} : {type_name}')\n+                    except (AttributeError, TypeError):\n+                        continue\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n+            if any((attr.startswith(node_name + ' : ') for attr in attrs)):\n+                continue\n             names = self.class_names(associated_nodes)\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n", "normalized_occurrence": 1}
