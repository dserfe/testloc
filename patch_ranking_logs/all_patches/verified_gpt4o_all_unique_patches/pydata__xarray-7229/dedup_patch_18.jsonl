{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7229", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 952c546..76cb696 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -291,10 +291,17 @@ def merge_collected(\n                                 f\"variable {name!r}:\\nfirst value: {variable.attrs!r}\\nsecond value: {other_variable.attrs!r}\"\n                             )\n                 merged_vars[name] = variable\n-                merged_vars[name].attrs = merge_attrs(\n-                    [var.attrs for var, _ in indexed_elements],\n-                    combine_attrs=combine_attrs,\n-                )\n+                # Preserve coordinate attributes\n+                if name in merged_indexes:\n+                    merged_vars[name].attrs = merge_attrs(\n+                        [merged_vars[name].attrs] + [var.attrs for var, _ in indexed_elements],\n+                        combine_attrs=combine_attrs,\n+                    )\n+                else:\n+                    merged_vars[name].attrs = merge_attrs(\n+                        [var.attrs for var, _ in indexed_elements],\n+                        combine_attrs=combine_attrs,\n+                    )\n                 merged_indexes[name] = index\n             else:\n                 variables = [variable for variable, _ in elements_list]\n@@ -309,9 +316,14 @@ def merge_collected(\n                         raise\n \n                 if name in merged_vars:\n-                    merged_vars[name].attrs = merge_attrs(\n-                        [var.attrs for var in variables], combine_attrs=combine_attrs\n-                    )\n+                    if name in merged_indexes:\n+                        merged_vars[name].attrs = merge_attrs(\n+                            [merged_vars[name].attrs] + [var.attrs for var in variables], combine_attrs=combine_attrs\n+                        )\n+                    else:\n+                        merged_vars[name].attrs = merge_attrs(\n+                            [var.attrs for var in variables], combine_attrs=combine_attrs\n+                        )\n \n     return merged_vars, merged_indexes\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex ca74f84..adacfee 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -182,7 +182,10 @@ def merge_collected(grouped: dict[Hashable, list[MergeElement]], prioritized: Ma\n                         if not dict_equiv(variable.attrs, other_variable.attrs):\n                             raise MergeError(f'conflicting attribute values on combined variable {name!r}:\\nfirst value: {variable.attrs!r}\\nsecond value: {other_variable.attrs!r}')\n                 merged_vars[name] = variable\n-                merged_vars[name].attrs = merge_attrs([var.attrs for var, _ in indexed_elements], combine_attrs=combine_attrs)\n+                if name in merged_indexes:\n+                    merged_vars[name].attrs = merge_attrs([merged_vars[name].attrs] + [var.attrs for var, _ in indexed_elements], combine_attrs=combine_attrs)\n+                else:\n+                    merged_vars[name].attrs = merge_attrs([var.attrs for var, _ in indexed_elements], combine_attrs=combine_attrs)\n                 merged_indexes[name] = index\n             else:\n                 variables = [variable for variable, _ in elements_list]\n@@ -192,7 +195,10 @@ def merge_collected(grouped: dict[Hashable, list[MergeElement]], prioritized: Ma\n                     if compat != 'minimal':\n                         raise\n                 if name in merged_vars:\n-                    merged_vars[name].attrs = merge_attrs([var.attrs for var in variables], combine_attrs=combine_attrs)\n+                    if name in merged_indexes:\n+                        merged_vars[name].attrs = merge_attrs([merged_vars[name].attrs] + [var.attrs for var in variables], combine_attrs=combine_attrs)\n+                    else:\n+                        merged_vars[name].attrs = merge_attrs([var.attrs for var in variables], combine_attrs=combine_attrs)\n     return (merged_vars, merged_indexes)\n \n def collect_variables_and_indexes(list_of_mappings: list[DatasetLike], indexes: Mapping[Any, Any] | None=None) -> dict[Hashable, list[MergeElement]]:\n", "normalized_occurrence": 1}
