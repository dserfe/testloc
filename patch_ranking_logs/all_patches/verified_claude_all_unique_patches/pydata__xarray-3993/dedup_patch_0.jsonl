{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3993", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4198249..12157cc 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3480,56 +3480,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n-    def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n-    ) -> \"DataArray\":\n-        \"\"\" integrate the array with the trapezoidal rule.\n-\n-        .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n-            must be one dimensional.\n-\n-        Parameters\n-        ----------\n-        dim : hashable, or sequence of hashable\n-            Coordinate(s) used for the integration.\n-        datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n-                         \"ps\", \"fs\", \"as\"}, optional\n-            Can be used to specify the unit if datetime coordinate is used.\n-\n-        Returns\n-        -------\n-        integrated: DataArray\n \n-        See also\n-        --------\n-        numpy.trapz: corresponding numpy function\n-\n-        Examples\n-        --------\n-\n-        >>> da = xr.DataArray(\n-        ...     np.arange(12).reshape(4, 3),\n-        ...     dims=[\"x\", \"y\"],\n-        ...     coords={\"x\": [0, 0.1, 1.1, 1.2]},\n-        ... )\n-        >>> da\n-        <xarray.DataArray (x: 4, y: 3)>\n-        array([[ 0,  1,  2],\n-               [ 3,  4,  5],\n-               [ 6,  7,  8],\n-               [ 9, 10, 11]])\n-        Coordinates:\n-          * x        (x) float64 0.0 0.1 1.1 1.2\n-        Dimensions without coordinates: y\n-        >>>\n-        >>> da.integrate(\"x\")\n-        <xarray.DataArray (y: 3)>\n-        array([5.4, 6.6, 7.8])\n-        Dimensions without coordinates: y\n-        \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n-        return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n         \"\"\"Unify chunk size along all chunked dimensions of this DataArray.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex ae20f2c..e0d7100 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -805,9 +805,6 @@ class DataArray(AbstractArray, DataWithCoords):\n     def differentiate(self, coord: Hashable, edge_order: int=1, datetime_unit: str=None) -> 'DataArray':\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n-    def integrate(self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str=None) -> 'DataArray':\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n-        return self._from_temp_dataset(ds)\n     def unify_chunks(self) -> 'DataArray':\n         ds = self._to_temp_dataset().unify_chunks()\n         return self._from_temp_dataset(ds)\n", "normalized_occurrence": 1}
