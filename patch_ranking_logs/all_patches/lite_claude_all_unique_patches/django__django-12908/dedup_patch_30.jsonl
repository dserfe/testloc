{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..c431bad 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,10 +475,23 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+            \n+        # If we have distinct_fields, wrap the union in a subquery with DISTINCT ON\n+        if getattr(self.query, 'distinct_fields', None):\n+            distinct_fields = ', '.join(\n+                str(field) for field in self.query.distinct_fields\n+            )\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(\n+                distinct_fields,\n+                combined_sql,\n+                self.quote_name_unless_alias(self.query.model._meta.db_table)\n+            )\n+            \n+        result = [combined_sql]\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..b56fc5d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,10 +267,14 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        if getattr(self.query, 'distinct_fields', None):\n+            distinct_fields = ', '.join((str(field) for field in self.query.distinct_fields))\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(distinct_fields, combined_sql, self.quote_name_unless_alias(self.query.model._meta.db_table))\n+        result = [combined_sql]\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
