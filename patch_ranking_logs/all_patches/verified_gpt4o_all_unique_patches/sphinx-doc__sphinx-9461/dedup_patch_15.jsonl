{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..8367719 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2126,11 +2126,11 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n \n         sourcename = self.get_sourcename()\n         obj = self.parent.__dict__.get(self.object_name, self.object)\n-        if inspect.isabstractmethod(obj):\n+        if inspect.isabstractmethod(obj) or (isinstance(obj, property) and inspect.isabstractmethod(obj.fget)):\n             self.add_line('   :abstractmethod:', sourcename)\n-        if inspect.iscoroutinefunction(obj):\n+        if inspect.iscoroutinefunction(obj) or (isinstance(obj, property) and inspect.iscoroutinefunction(obj.fget)):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj) or (isinstance(obj, property) and inspect.isclassmethod(obj.fget)):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..1ba974e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1237,11 +1237,11 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n         obj = self.parent.__dict__.get(self.object_name, self.object)\n-        if inspect.isabstractmethod(obj):\n+        if inspect.isabstractmethod(obj) or (isinstance(obj, property) and inspect.isabstractmethod(obj.fget)):\n             self.add_line('   :abstractmethod:', sourcename)\n-        if inspect.iscoroutinefunction(obj):\n+        if inspect.iscoroutinefunction(obj) or (isinstance(obj, property) and inspect.iscoroutinefunction(obj.fget)):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj) or (isinstance(obj, property) and inspect.isclassmethod(obj.fget)):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "normalized_occurrence": 1}
