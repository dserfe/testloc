{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..717dd71 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,7 +112,15 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    Commas can be escaped by enclosing the pattern in quotes or parentheses.\"\"\"\n+    if value.startswith('\"') and value.endswith('\"'):\n+        # Handle quoted pattern as a single regex\n+        return [_regex_transformer(value[1:-1])]\n+    if value.startswith('(') and value.endswith(')'):\n+        # Handle parenthesized pattern as a single regex\n+        return [_regex_transformer(value)]\n+    # Otherwise split on commas for backward compatibility\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(_regex_transformer(pattern))\n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..f1c47da 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -54,6 +54,10 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         msg = f'Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}'\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    if value.startswith('\"') and value.endswith('\"'):\n+        return [_regex_transformer(value[1:-1])]\n+    if value.startswith('(') and value.endswith(')'):\n+        return [_regex_transformer(value)]\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(_regex_transformer(pattern))\n", "normalized_occurrence": 1}
