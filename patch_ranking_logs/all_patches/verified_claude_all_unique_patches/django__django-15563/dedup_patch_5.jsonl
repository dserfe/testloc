{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..096d330 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,6 +987,36 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n+        \n+        # Handle updates for multi-table inheritance\n+        if self.model._meta.parents:\n+            # Get all parent models\n+            parent_models = self.model._meta.parents.keys()\n+            updates_by_model = {}\n+            \n+            # Group updates by parent model\n+            for field_name, value in kwargs.items():\n+                field = self.model._meta.get_field(field_name)\n+                parent = field.model\n+                if parent in parent_models:\n+                    updates_by_model.setdefault(parent, {}).update({field_name: value})\n+                else:\n+                    updates_by_model.setdefault(self.model, {}).update({field_name: value})\n+            \n+            # Perform updates for each model\n+            rows = 0\n+            for model, model_updates in updates_by_model.items():\n+                if not model_updates:\n+                    continue\n+                query = self.query.chain(sql.UpdateQuery)\n+                query.model = model\n+                query.add_update_values(model_updates)\n+                query.annotations = {}\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n+            return rows\n+        \n+        # Regular single-table update\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..67d1ef1 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,6 +532,27 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n+        if self.model._meta.parents:\n+            parent_models = self.model._meta.parents.keys()\n+            updates_by_model = {}\n+            for field_name, value in kwargs.items():\n+                field = self.model._meta.get_field(field_name)\n+                parent = field.model\n+                if parent in parent_models:\n+                    updates_by_model.setdefault(parent, {}).update({field_name: value})\n+                else:\n+                    updates_by_model.setdefault(self.model, {}).update({field_name: value})\n+            rows = 0\n+            for model, model_updates in updates_by_model.items():\n+                if not model_updates:\n+                    continue\n+                query = self.query.chain(sql.UpdateQuery)\n+                query.model = model\n+                query.add_update_values(model_updates)\n+                query.annotations = {}\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n+            return rows\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         query.annotations = {}\n", "normalized_occurrence": 1}
