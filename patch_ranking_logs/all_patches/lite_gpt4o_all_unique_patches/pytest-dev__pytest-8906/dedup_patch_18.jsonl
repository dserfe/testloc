{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..a49dd7f 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -120,18 +120,41 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n     raise Exit(msg, returncode)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This is a helper function that calls `skip` with `allow_module_level=True`.\n+\n+    Example usage:\n+    ```python\n+    import sys\n+    if sys.version_info < (3, 8):\n+        skip_module(\"Requires Python >= 3.8\")\n+    ```\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n+\n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n-    \"\"\"Skip an executing test with the given message.\n+    \"\"\"Skip an executing test or module with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n+    during collection by using the ``allow_module_level`` flag. This function can\n     be called in doctests as well.\n \n+    When needing to skip a module entirely, consider using `skip_module` for clarity.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n \n+    Example usage to skip a module:\n+    ```python\n+    import sys\n+    if sys.version_info < (3, 8):\n+        skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+    ```\n+\n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..b186dd2 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -78,18 +78,41 @@ def exit(msg: str, returncode: Optional[int]=None) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Exit(msg, returncode)\n \n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This is a helper function that calls `skip` with `allow_module_level=True`.\n+\n+    Example usage:\n+    ```python\n+    import sys\n+    if sys.version_info < (3, 8):\n+        skip_module(\"Requires Python >= 3.8\")\n+    ```\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n+\n @_with_exception(Skipped)\n def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n-    \"\"\"Skip an executing test with the given message.\n+    \"\"\"Skip an executing test or module with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n+    during collection by using the ``allow_module_level`` flag. This function can\n     be called in doctests as well.\n \n+    When needing to skip a module entirely, consider using `skip_module` for clarity.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n \n+    Example usage to skip a module:\n+    ```python\n+    import sys\n+    if sys.version_info < (3, 8):\n+        skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+    ```\n+\n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n", "normalized_occurrence": 1}
