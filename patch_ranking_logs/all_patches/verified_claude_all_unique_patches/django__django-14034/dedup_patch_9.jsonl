{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..5490491 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1025,8 +1025,11 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n+                # Check individual field requirements before returning compressed empty value\n+                for i, field in enumerate(self.fields):\n+                    if field.required and (not value or value[i] in self.empty_values):\n+                        raise ValidationError(field.error_messages['incomplete'], code='incomplete')\n+                return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..b10f6b8 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -592,8 +592,10 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n+                for i, field in enumerate(self.fields):\n+                    if field.required and (not value or value[i] in self.empty_values):\n+                        raise ValidationError(field.error_messages['incomplete'], code='incomplete')\n+                return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n", "normalized_occurrence": 1}
