{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..13786d9 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -460,6 +460,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n+            t = arg.get_datatype('cython')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..346e3bb 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -211,6 +211,7 @@ class CythonCodeWrapper(CodeWrapper):\n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n+            t = arg.get_datatype('cython')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return '&{0}'.format(self._string_var(arg.name))\n", "normalized_occurrence": 1}
