{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..d39618b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3041,6 +3041,9 @@ class Figure(FigureBase):\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n \n+        # Store the original DPI value\n+        original_dpi = state.get('dpi', self.dpi)\n+        \n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n@@ -3055,6 +3058,9 @@ class Figure(FigureBase):\n             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n+            \n+        # Restore the original DPI value after canvas creation\n+        self.set_dpi(original_dpi)\n \n         self.stale = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..e67ec3a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -960,6 +960,7 @@ class Figure(FigureBase):\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n+        original_dpi = state.get('dpi', self.dpi)\n         self.__dict__ = state\n         FigureCanvasBase(self)\n         if restore_to_pylab:\n@@ -970,6 +971,7 @@ class Figure(FigureBase):\n             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n+        self.set_dpi(original_dpi)\n         self.stale = True\n     def add_axobserver(self, func):\n         self._axobservers.connect('_axes_change_event', lambda arg: func(arg))\n", "normalized_occurrence": 2}
