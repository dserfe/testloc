{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex ecd2cce..8fcfd4c 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1390,7 +1390,7 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other is S.false:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1400,7 +1400,7 @@ class Float(Number):\n             return self._mpf_ == other._mpf_\n         if other.is_Rational:\n             return other.__eq__(self)\n-        if other.is_Number:\n+        if other.is_Number or isinstance(other, bool):\n             # numbers should compare at the same precision;\n             # all _as_mpf_val routines should be sure to abide\n             # by the request to change the prec if necessary; if\n@@ -1865,13 +1865,13 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not isinstance(other, Number):\n+        if not isinstance(other, Number) or other is S.false:\n             # S(0) == S.false is False\n             # S(0) == False is True\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other is S.false:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1914,7 +1914,7 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if other.is_Number:\n+        if other.is_Number or isinstance(other, bool):\n             op = None\n             s, o = self, other\n             if other.is_NumberSymbol:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c5d42bc..2e971fd 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1195,7 +1195,7 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other is S.false:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1203,7 +1203,7 @@ class Float(Number):\n             return self._mpf_ == other._mpf_\n         if other.is_Rational:\n             return other.__eq__(self)\n-        if other.is_Number:\n+        if other.is_Number or isinstance(other, bool):\n             ompf = other._as_mpf_val(self._prec)\n             return bool(mlib.mpf_eq(self._mpf_, ompf))\n         return False\n@@ -1627,11 +1627,11 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not isinstance(other, Number):\n+        if not isinstance(other, Number) or other is S.false:\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other is S.false:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1664,7 +1664,7 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if other.is_Number:\n+        if other.is_Number or isinstance(other, bool):\n             op = None\n             s, o = (self, other)\n             if other.is_NumberSymbol:\n", "normalized_occurrence": 1}
