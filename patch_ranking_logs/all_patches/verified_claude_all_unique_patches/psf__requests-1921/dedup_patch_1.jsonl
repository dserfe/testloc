{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..26d6b9e 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -52,12 +52,18 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n         return request_setting\n \n     merged_setting = dict_class(to_key_val_list(session_setting))\n+    \n+    # Remove keys from session settings that are set to None\n+    for (k, v) in session_setting.items():\n+        if v is None:\n+            merged_setting.pop(k, None)\n+            \n     merged_setting.update(to_key_val_list(request_setting))\n \n-    # Remove keys that are set to None.\n+    # Remove keys from request settings that are set to None\n     for (k, v) in request_setting.items():\n         if v is None:\n-            del merged_setting[k]\n+            merged_setting.pop(k, None)\n \n     return merged_setting\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..54274be 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -20,10 +20,13 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     if not (isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)):\n         return request_setting\n     merged_setting = dict_class(to_key_val_list(session_setting))\n+    for k, v in session_setting.items():\n+        if v is None:\n+            merged_setting.pop(k, None)\n     merged_setting.update(to_key_val_list(request_setting))\n     for k, v in request_setting.items():\n         if v is None:\n-            del merged_setting[k]\n+            merged_setting.pop(k, None)\n     return merged_setting\n def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     if session_hooks is None or session_hooks.get('response') == []:\n", "normalized_occurrence": 1}
