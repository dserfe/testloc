{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a6c5dd7..34b1dbf 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -77,17 +77,22 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n+                before_resolved = self.get_source_expressions()[index]\n+                name = (\n+                    before_resolved.name\n+                    if hasattr(before_resolved, \"name\")\n+                    else repr(before_resolved)\n+                )\n                 if expr.contains_aggregate:\n-                    before_resolved = self.get_source_expressions()[index]\n-                    name = (\n-                        before_resolved.name\n-                        if hasattr(before_resolved, \"name\")\n-                        else repr(before_resolved)\n-                    )\n                     raise FieldError(\n                         \"Cannot compute %s('%s'): '%s' is an aggregate\"\n                         % (c.name, name, name)\n                     )\n+                if getattr(expr, 'contains_window_function', False):\n+                    raise FieldError(\n+                        \"Cannot compute %s('%s'): '%s' contains a window function\"\n+                        % (c.name, name, name)\n+                    )\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, \"resolve_expression\"):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex e18ccd1..a50c320 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -41,10 +41,12 @@ class Aggregate(Func):\n         elif not self.is_summary:\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n+                before_resolved = self.get_source_expressions()[index]\n+                name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                 if expr.contains_aggregate:\n-                    before_resolved = self.get_source_expressions()[index]\n-                    name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n+                if getattr(expr, 'contains_window_function', False):\n+                    raise FieldError(\"Cannot compute %s('%s'): '%s' contains a window function\" % (c.name, name, name))\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, 'resolve_expression'):\n", "normalized_occurrence": 1}
