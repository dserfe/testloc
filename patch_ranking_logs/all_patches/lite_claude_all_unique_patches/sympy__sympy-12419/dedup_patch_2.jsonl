{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex b4a2caa..b90536f 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -846,6 +846,7 @@ def telescopic(L, R, limits):\n def eval_sum(f, limits):\n     from sympy.concrete.delta import deltasummation, _has_simple_delta\n     from sympy.functions import KroneckerDelta\n+    from sympy.matrices.expressions.matexpr import MatrixElement\n \n     (i, a, b) = limits\n     if f is S.Zero:\n@@ -854,6 +855,15 @@ def eval_sum(f, limits):\n         return f*(b - a + 1)\n     if a == b:\n         return f.subs(i, a)\n+    \n+    # Special case for matrix elements\n+    if isinstance(f, MatrixElement):\n+        matrix = f.parent\n+        if matrix.is_Identity:\n+            if len(f.indices) == 2 and any(idx == i for idx in f.indices):\n+                # For identity matrix, sum of elements is n (matrix size)\n+                if all(idx in (i, j) for idx in f.indices for j in limits[0].free_symbols):\n+                    return matrix.rows\n     if isinstance(f, Piecewise):\n         if not any(i in arg.args[1].free_symbols for arg in f.args):\n             # Piecewise conditions do not depend on the dummy summation variable,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 3200d91..67f645e 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -325,6 +325,7 @@ def telescopic(L, R, limits):\n def eval_sum(f, limits):\n     from sympy.concrete.delta import deltasummation, _has_simple_delta\n     from sympy.functions import KroneckerDelta\n+    from sympy.matrices.expressions.matexpr import MatrixElement\n     i, a, b = limits\n     if f is S.Zero:\n         return S.Zero\n@@ -332,6 +333,12 @@ def eval_sum(f, limits):\n         return f * (b - a + 1)\n     if a == b:\n         return f.subs(i, a)\n+    if isinstance(f, MatrixElement):\n+        matrix = f.parent\n+        if matrix.is_Identity:\n+            if len(f.indices) == 2 and any((idx == i for idx in f.indices)):\n+                if all((idx in (i, j) for idx in f.indices for j in limits[0].free_symbols)):\n+                    return matrix.rows\n     if isinstance(f, Piecewise):\n         if not any((i in arg.args[1].free_symbols for arg in f.args)):\n             newargs = []\n", "normalized_occurrence": 1}
