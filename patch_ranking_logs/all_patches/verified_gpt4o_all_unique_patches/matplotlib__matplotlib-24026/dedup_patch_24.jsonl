{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24026", "model_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex 718e3a5..7d6de2f 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -70,7 +70,8 @@ def stackplot(axes, x, *args,\n \n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        color_cycle = axes._get_lines.prop_cycler\n+        axes._get_lines.set_prop_cycle(None)\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n@@ -108,7 +109,10 @@ def stackplot(axes, x, *args,\n         stack += first_line\n \n     # Color between x = 0 and the first array.\n-    color = axes._get_lines.get_next_color()\n+    if colors is not None:\n+        color = colors[0]\n+    else:\n+        color = axes._get_lines.get_next_color()\n     coll = axes.fill_between(x, first_line, stack[0, :],\n                              facecolor=color, label=next(labels, None),\n                              **kwargs)\n@@ -117,8 +121,11 @@ def stackplot(axes, x, *args,\n \n     # Color between array i-1 and array i\n     for i in range(len(y) - 1):\n-        color = axes._get_lines.get_next_color()\n+        if colors is not None:\n+            color = colors[(i + 1) % len(colors)]\n+        else:\n+            color = axes._get_lines.get_next_color()\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],\n                                    facecolor=color, label=next(labels, None),\n                                    **kwargs))\n-    return r\n+    return r\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex a81621f..c89057e 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -5,7 +5,8 @@ def stackplot(axes, x, *args, labels=(), colors=None, baseline='zero', **kwargs)\n     y = np.row_stack(args)\n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        color_cycle = axes._get_lines.prop_cycler\n+        axes._get_lines.set_prop_cycle(None)\n     stack = np.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))\n     _api.check_in_list(['zero', 'sym', 'wiggle', 'weighted_wiggle'], baseline=baseline)\n     if baseline == 'zero':\n@@ -32,11 +33,17 @@ def stackplot(axes, x, *args, labels=(), colors=None, baseline='zero', **kwargs)\n         center = np.cumsum(center.sum(0))\n         first_line = center - 0.5 * total\n         stack += first_line\n-    color = axes._get_lines.get_next_color()\n+    if colors is not None:\n+        color = colors[0]\n+    else:\n+        color = axes._get_lines.get_next_color()\n     coll = axes.fill_between(x, first_line, stack[0, :], facecolor=color, label=next(labels, None), **kwargs)\n     coll.sticky_edges.y[:] = [0]\n     r = [coll]\n     for i in range(len(y) - 1):\n-        color = axes._get_lines.get_next_color()\n+        if colors is not None:\n+            color = colors[(i + 1) % len(colors)]\n+        else:\n+            color = axes._get_lines.get_next_color()\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :], facecolor=color, label=next(labels, None), **kwargs))\n     return r\n\\ No newline at end of file\n", "normalized_occurrence": 1}
