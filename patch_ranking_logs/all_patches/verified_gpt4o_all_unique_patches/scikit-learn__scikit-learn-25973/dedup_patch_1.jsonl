{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25973", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex f742a36..536c365 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2404,6 +2404,8 @@ class _CVIterableWrapper(BaseCrossValidator):\n \n \n def check_cv(cv=5, y=None, *, classifier=False):\n+    if not hasattr(cv, 'split') and hasattr(cv, '__iter__'):\n+        cv = _CVIterableWrapper(cv)\n     \"\"\"Input checker utility for building a cross-validator.\n \n     Parameters\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c67b459..f7185db 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2064,41 +2064,9 @@ class _CVIterableWrapper(BaseCrossValidator):\n             yield (train, test)\n \n def check_cv(cv=5, y=None, *, classifier=False):\n-    \"\"\"Input checker utility for building a cross-validator.\n-\n-    Parameters\n-    ----------\n-    cv : int, cross-validation generator or an iterable, default=None\n-        Determines the cross-validation splitting strategy.\n-        Possible inputs for cv are:\n-        - None, to use the default 5-fold cross validation,\n-        - integer, to specify the number of folds.\n-        - :term:`CV splitter`,\n-        - An iterable that generates (train, test) splits as arrays of indices.\n-\n-        For integer/None inputs, if classifier is True and ``y`` is either\n-        binary or multiclass, :class:`StratifiedKFold` is used. In all other\n-        cases, :class:`KFold` is used.\n-\n-        Refer :ref:`User Guide <cross_validation>` for the various\n-        cross-validation strategies that can be used here.\n-\n-        .. versionchanged:: 0.22\n-            ``cv`` default value changed from 3-fold to 5-fold.\n-\n-    y : array-like, default=None\n-        The target variable for supervised learning problems.\n-\n-    classifier : bool, default=False\n-        Whether the task is a classification task, in which case\n-        stratified KFold will be used.\n-\n-    Returns\n-    -------\n-    checked_cv : a cross-validator instance.\n-        The return value is a cross-validator which generates the train/test\n-        splits via the ``split`` method.\n-    \"\"\"\n+    if not hasattr(cv, 'split') and hasattr(cv, '__iter__'):\n+        cv = _CVIterableWrapper(cv)\n+    'Input checker utility for building a cross-validator.\\n\\n    Parameters\\n    ----------\\n    cv : int, cross-validation generator or an iterable, default=None\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n        - None, to use the default 5-fold cross validation,\\n        - integer, to specify the number of folds.\\n        - :term:`CV splitter`,\\n        - An iterable that generates (train, test) splits as arrays of indices.\\n\\n        For integer/None inputs, if classifier is True and ``y`` is either\\n        binary or multiclass, :class:`StratifiedKFold` is used. In all other\\n        cases, :class:`KFold` is used.\\n\\n        Refer :ref:`User Guide <cross_validation>` for the various\\n        cross-validation strategies that can be used here.\\n\\n        .. versionchanged:: 0.22\\n            ``cv`` default value changed from 3-fold to 5-fold.\\n\\n    y : array-like, default=None\\n        The target variable for supervised learning problems.\\n\\n    classifier : bool, default=False\\n        Whether the task is a classification task, in which case\\n        stratified KFold will be used.\\n\\n    Returns\\n    -------\\n    checked_cv : a cross-validator instance.\\n        The return value is a cross-validator which generates the train/test\\n        splits via the ``split`` method.\\n    '\n     cv = 5 if cv is None else cv\n     if isinstance(cv, numbers.Integral):\n         if classifier and y is not None and (type_of_target(y, input_name='y') in ('binary', 'multiclass')):\n", "normalized_occurrence": 1}
